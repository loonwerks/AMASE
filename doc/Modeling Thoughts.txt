Add AGREE contracts to "baseline" model of WBS

To start with, each physical device and connection has a functional description, which we can reuse from Anjali's work.  Examine the failure types that can be modeled and reasoned about with behavioral modeling vs. the qualitative modeling from the AADL error annex.

Each failure is contract replacement to some degree.  To use a direct analogy, we can encapsulate a "correctly functioning" device in a faulty device and describe the mechanism by which the value of an output variable is 
modified by failure.

In AADL: can a device contain another device?  If not, can we to a schematic transformation of a contract to a 
"failure contract"; perhaps by renaming outputs to local variables and defining the failure information in terms 
of the "wrapped" outputs and inputs.

Do we allow AGREE contracts on devices?  If not, we need to add this straightaway.

Introduce failures: 
	1. atomic failures of physical components (devices)
		How are devices connected in the AADL model?  Does it model the connections related to 
			physics or just the electronic connections?
		
Propagation is modeled only from a physical component to the leaf-level logical components that are immediately connected to the physical component.  The physical component introduces a contract modification to the logical 
components connected to it.  We admit different kinds of physical failures: 
	Permanent failures, which will lead to an irrecoverable failure in the logical components.
	Restart failures, which lead to continuous failures until restart of the physical system containing the logical
		components.
	Transient failures, which lead to a single-step lack of satisfaction of the contract. (this seems too simple)

How do we *perceive* failures?  If we bring in the qualitative model, then we have a free pass; we can just ask whether a failure occurs.  Is this reasonable?
	
How are physical devices connected to logical components?
	How do we model memory failures?  What do they mean for individual logical component models?
	Simplest (no error correction): model is that system fails non-deterministically.  No requirements 
	for any software bound to the component meets its requirements thereafter until a system reset.
		
We can have "directionless" contracts in AADL by defining relations rather than equations, I suppose, 
though at some point John breaks each cycle.

Are faults ever bi-directional?  For example, a stuck valve may cause backflow in a pipe.

1/11
On one hand, the requirements-based view gives you *less* information, because it focuses on the requirements rather than the failures.  If your requirements are incomplete, then potentially dangerous failures are not exposed.  This is certainly true on the ARP model that Anjali did: there are dozens of possible requirements related to 
	- misapplication of brake pressure when not desired
	- autobraking and braking rates
	- pressure relationships: how *much* pressure is applied when brakes are applied
	- etc. etc. etc.	
Also, the propagation is implicit; you see the result (requirements failure) but the 'why' part is somewhat hidden. 

On the other hand, the AADL failure propagation stuff is, as best I can see, somewhat divorced from the real requirements.  For example, many of the propagations specified in the error annex below are incorrect, as I see it.  The point of the selector valve is to provide some fault protection in case both lines are pressurized for some reason.  This functionality gets lost in the error propagations.  

Also, there are no faults like "overpressure", "underpressure", etc. which can lead to incorrect system response.  There is only "NoService" which presumably means no pressure in the line.
 

In order to illustrate the "guilty" parts of the model, could we use IVCs?  No.  Note that if we provide all the concrete values for the test and negate the top-level property, then these values will be all that is required by the IVC generator, so we won't learn anything about the model.  If we don't (just provide the top-level trace) and negate the top-level property, then the solver will likely just give us back a satisfying trace.  For functional models, it would work well - just need the I/O trace - but not for predicate models.

QPR: March 1-2 TIM.  

Mitre is using the tools.  
	Usability recommendations coming from Mitre.
	TCG, Sim, and that version of AGREE.  
	Meeting Lockheed needs for flight test.
	
\
\\
|\\
|>>> 
|//
//
/

Feb 6th, 2017 (Danielle's notes)
Went through ARP4761 files and converted the bus connections to ports. 
Most of them were very straightforward given the simple diagram
(https://wiki.sei.cmu.edu/aadl/index.php/Simple_version_of_the_ARP4761/AIR6110_example)
but there were a couple of places I had to just make a judgement call. For example: 
In valves.aadl: 
  system generic
     features
       input : in data port common::pressure.i;
       output : out data port common::pressure.i;
       ...
       
It was unclear to me if they should be in data ports or out, so 
I just assumed since it was input/output, the port should match. 
Similar cases in wbs.aadl and wheel.aadl. 
