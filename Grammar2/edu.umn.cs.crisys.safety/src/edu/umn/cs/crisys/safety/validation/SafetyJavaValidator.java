/*
 * generated by Xtext
 */
package edu.umn.cs.crisys.safety.validation;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.validation.Check;
import org.osate.aadl2.AadlPackage;
import org.osate.aadl2.AnnexLibrary;
import org.osate.aadl2.NamedElement;

import com.rockwellcollins.atc.agree.agree.AgreePackage;
import com.rockwellcollins.atc.agree.agree.Arg;
import com.rockwellcollins.atc.agree.agree.Expr;
import com.rockwellcollins.atc.agree.validation.AgreeJavaValidator;

import edu.umn.cs.crisys.safety.safety.DurationStatement;
import edu.umn.cs.crisys.safety.safety.Eq;
import edu.umn.cs.crisys.safety.safety.EqStatement;
import edu.umn.cs.crisys.safety.safety.InputStatement;
import edu.umn.cs.crisys.safety.safety.IntervalEq;
import edu.umn.cs.crisys.safety.safety.OutputStatement;
import edu.umn.cs.crisys.safety.safety.SafetyPackage;
import edu.umn.cs.crisys.safety.safety.SetEq;
import edu.umn.cs.crisys.safety.safety.TriggerCondition;
import edu.umn.cs.crisys.safety.safety.TriggerStatement;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class SafetyJavaValidator extends AgreeJavaValidator {
	
	// Change package to SafetyPackage instead of AgreePackage.
	@Override
	protected boolean isResponsible(Map<Object, Object> context, EObject eObject) {
		return (eObject.eClass().getEPackage() == SafetyPackage.eINSTANCE) || eObject instanceof AadlPackage;
	}

	
	// Input Statements
	@Check
	public void checkInput(InputStatement inputStmt){
		NamedElement inConn = inputStmt.getIn_conn();
		String outConn = inputStmt.getOut_conn();
		
		if(inConn==null){
			error(inConn, "Input connection cannot be null");
		}
		if(outConn.isEmpty()){
			error(inputStmt, "Output connection name cannot be empty");
		}
	}
	
	// Output Statements
	// Need input here in order to make sure output names match
	@Check
	public void checkOutput(OutputStatement outputStmt, InputStatement inputStmt){
		String outConn = outputStmt.getOut_conn();
		NamedElement nominalConn = outputStmt.getNom_conn();
			
		if(nominalConn==null){
			error(nominalConn, "Nominal connection cannot be null");
		}
		if(outConn.isEmpty()){
			error(outputStmt, "Output connection name cannot be empty");
		}
		if(!(outConn.equals(inputStmt.getOut_conn()))){
			error(outputStmt, "Output connection name must be equal to the input's output feild.");
		}
		
	}
	
	// Duration statements
	@Check
	public void checkDuration(DurationStatement durationStmt){
		if(!(durationStmt.getTc().equals("PERMANANT") || durationStmt.getTc().equals("TRANSIENT"))){
			error(durationStmt, "Temporal constraint must be TRANSIENT or PERMANANT");
		}
		checkTimeInterval(durationStmt.getInterv());
	}
	
	
	// Trigger Statements
	@Check
	public void checkTriggerStatement(TriggerStatement triggerStmt){
		// First check the trigger condition
		checkTriggerCondition(triggerStmt.getCond());
		
		// Check the optional probability expression
		if(triggerStmt.getProbability() != null ){
			
			// Try casting string to double, catch exceptions to print out error
			double result = 0;
			try{
				result = Double.parseDouble(triggerStmt.getProbability());
			} catch(NullPointerException npe){
				error(triggerStmt, "Valid real number required");
			} catch(NumberFormatException nfe){
				error(triggerStmt, "Valid real number required");
			}
			
			// Now check to make sure it's a valid probability (btwn 0 and 1 inclusive)
			if((result < 0) || (result > 1)){
				error(triggerStmt, "Probability must be between 0 and 1 inclusive");
			}
			
			
		}
	}
	
	// This will need to be changed in order to deal with an
	// expression list. Not sure how to do that right now... 
	@Check
	public void checkTriggerCondition(TriggerCondition tc){
		if(tc != null){
			
			// Figure out how to check expressions through agree validation
			
			//checkExpr(tc.getExprList());
		}
	}
	
	
	// Check EqStatements: This includes Eq: Equivalent to Agree's EqStatement
	@Check
	public void checkEqStatement(Eq eqStmt){
		
		// check for empty lhs list
		if(eqStmt.getLhs().isEmpty()){
			error(eqStmt, "Cannot have an empty list on lhs.");
		}
		
		// Check to make sure we are within the safety annex
		AnnexLibrary library = EcoreUtil2.getContainerOfType(eqStmt, AnnexLibrary.class);
		if (library != null) {
			error(eqStmt, "Equation statments are only allowed in safety annexes");
		}
		
		// Check for cyclic assignments 
		// I would like to use Agree's validation here, but the method
		// is private. 
		checkMultiAssignEq(eqStmt, eqStmt.getLhs(), eqStmt.getExpr());
		
	}
	
	// Check the time interval passed in using Agree's method
	@Check
	public void checkIntervalEqStatement(IntervalEq intervalEq){
		checkTimeInterval(intervalEq.getInterv());
	}
	
	// Check the set eq statements
	// Most of this is making sure integers are valid in set. 
	@Check
	public void checkSetEqStatement(SetEq setEq){
		
		// Pass Arg to Agree's validation class
		checkArg(setEq.getLhs_set());
		
		// Try casting string to integer, catch exceptions to print out error
		Integer result = 0;
		try{
			result = Integer.parseInt(setEq.getL1());
		} catch(NullPointerException npe){
			error(setEq, "Valid integer required in set");
		} catch(NumberFormatException nfe){
			error(setEq, "Valid integer required in set");
		}
		
		// Now iterate through list making sure all integers are valid
		for(String item: setEq.getList()){
			try{
				result = Integer.parseInt(item);
			} catch(NullPointerException npe){
				error(setEq, "Valid integer required in set");
			} catch(NumberFormatException nfe){
				error(setEq, "Valid integer required in set");
			}
		}


		
		
	}
	
	// Check for cyclic assignments in Eq statement
	@Check
	public void checkMultiAssignEq(Eq eqStmt, EList<Arg> lhsArgs, Expr rhsExpr){
		
		
		// Make sure to take into account nondeterminism here! Expr may be null.
		if (rhsExpr == null) {
			return;
		}
		
	}
	

}
