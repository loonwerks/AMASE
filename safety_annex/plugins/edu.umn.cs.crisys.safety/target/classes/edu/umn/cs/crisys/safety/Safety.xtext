grammar edu.umn.cs.crisys.safety.Safety with com.rockwellcollins.atc.agree.Agree

generate safety "http://www.xtext.org/example/safety/Safety"

import "http://aadl.info/AADL/2.0" as aadl2

 
@Override
AnnexLibrary returns AnnexLibrary:
	SafetyLibrary;

@Override
AnnexSubclause returns AnnexSubclause:
	SafetySubclause;

SafetyLibrary:
	{SafetyContractLibrary} contract=SafetyContract;

SafetySubclause:
	{SafetyContractSubclause} contract=SafetyContract;

SafetyContract returns Contract:
	{SafetyContract} (specs+=SpecStatement)*;

ElementSafety returns aadl2::Element:
	SafetyEqStatement
	| Expr
	| FaultSubcomponent
;

@Override 
SpecStatement: 
		{FaultStatement} 'fault' name = ID (str=STRING)? ':'  faultDefName=DoubleDotRef 
			'{' faultDefinitions+=(FaultSubcomponent)* '}' 
	|	{AnalysisStatement} 'analyze' ':' behavior = AnalysisBehavior 
	|   {HWFaultStatement} 'HW_fault' name = ID (str=STRING)? ':' 
			'{' faultDefinitions+=(HWFaultSubcomponent)* '}'
	| 	{PropagateStatement} 'propagate_from' ':' '{' srcFaultList+= ID '@' srcComp_path+=[aadl2::NamedElement|DCID] (',' 
			srcFaultList+=ID '@' srcComp_path+=[aadl2::NamedElement|DCID])* '}' 
			'to' '{' destFaultList+= ID '@' destComp_path+=[aadl2::NamedElement|DCID] 
			(',' destFaultList+=ID '@' destComp_path+=[aadl2::NamedElement|DCID])* '}' ';'
	|   {ActivationStatement} 'fault_activation' ':' agreeBoolVarName=ID ('@' agreeComp_Path=[aadl2::NamedElement|DCID])?
					 '=' faultName= ID '@' faultComp_Path=[aadl2::NamedElement|DCID] ';'
;
	
AnalysisBehavior : 
		{FaultCountBehavior} 'max' (maxFaults=INTEGER_LIT) 'fault'
   | 	{ProbabilityBehavior} 'probability' (probabilty=REAL_LIT) 
;	

FaultSubcomponent returns FaultSubcomponent: 
		{InputStatement} 'inputs' ':' fault_in+=ID '<-' nom_conn+=Expr
			(','fault_in+=ID '<-' nom_conn+=Expr)*';' 
	| 	{OutputStatement} 'outputs' ':' nom_conn+=[aadl2::NamedElement|DCID] '<-' fault_out+=ID 
			(','nom_conn+=[aadl2::NamedElement|DCID] '<-' fault_out+=ID)*';'
 	| 	{DurationStatement} 'duration' ':' tc=TemporalConstraint (interv=SafetyInterval)? ';'  
 	| 	{ProbabilityStatement} 'probability' ':' probability=REAL_LIT ';'
 	|   {DisableStatement} 'disable' ':' cond=BooleanLiteral ';'
 	|	{TriggerStatement} 'enabled' cond=TriggerCondition  ';'
 	| 	{PropagationTypeStatement} 'propagate_type' ':' pty = PropagationTypeConstraint ';'
	| 	SafetyEqStatement 
;
	
HWFaultSubcomponent returns HWFaultSubcomponent: 
	  	{DurationStatement} 'duration' ':' tc=TemporalConstraint (interv=SafetyInterval)? ';'  
 	| 	{ProbabilityStatement} 'probability' ':' probability=REAL_LIT ';'
 	| 	{PropagationTypeStatement} 'propagate_type' ':' pty = PropagationTypeConstraint ';' 
;	

PropagationTypeConstraint:
	  	{asymmetric} 'asymmetric'
    | 	{symmetric} 'symmetric'
;
	 
TemporalConstraint:
		{PermanentConstraint} 'permanent' 
	| 	{TransientConstraint} 'transient'
;

TriggerCondition:
   		{EnablerCondition} 'by' '{' exprList+=(Expr) ("," exprList+=(Expr))*  '}'  
;
	
SafetyEqStatement:
		{EqValue} 'eq' (lhs+=Arg (',' lhs+=Arg)*) ('=' expr=Expr)? ';'
	| 	{IntervalEq} 'safety_interval' lhs_int=Arg '=' interv=SafetyInterval ';'
    | 	{SetEq} 'safety_set' lhs_set=Arg '=' '{'l1=Expr (',' list+=Expr)* '}' ';'
    | 	{RangeEq} 'safety_range' lhs_range=Arg '=' '{'l1=Expr ',' l2=Expr '}' ';'
;

SafetyInterval returns SafetyInterval:
	=>({ClosedSafetyInterval} '[' low=Expr ',' high=Expr ']')
|   =>({OpenLeftSafetyInterval} '(' low=Expr ',' high=Expr']')
|   =>({OpenRightSafetyInterval} '[' low=Expr ',' high=Expr ')')
|   =>({OpenSafetyInterval} '(' low=Expr ',' high=Expr ')') 
;
