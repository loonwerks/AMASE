/*
 * generated by Xtext
 */
package edu.umn.cs.crisys.safety.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import com.rockwellcollins.atc.agree.services.AgreeGrammarAccess;
import org.osate.xtext.aadl2.properties.services.PropertiesGrammarAccess;

@Singleton
public class SafetyGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AnnexLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.umn.cs.crisys.safety.Safety.AnnexLibrary");
		private final RuleCall cSafetyLibraryParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//@Override
		//AnnexLibrary:
		//	SafetyLibrary;
		@Override public ParserRule getRule() { return rule; }

		//SafetyLibrary
		public RuleCall getSafetyLibraryParserRuleCall() { return cSafetyLibraryParserRuleCall; }
	}

	public class AnnexSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.umn.cs.crisys.safety.Safety.AnnexSubclause");
		private final RuleCall cSafetySubclauseParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//@Override
		//AnnexSubclause:
		//	SafetySubclause;
		@Override public ParserRule getRule() { return rule; }

		//SafetySubclause
		public RuleCall getSafetySubclauseParserRuleCall() { return cSafetySubclauseParserRuleCall; }
	}

	public class SafetyLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.umn.cs.crisys.safety.Safety.SafetyLibrary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSafetyContractLibraryAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cContractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContractSafetyContractParserRuleCall_1_0 = (RuleCall)cContractAssignment_1.eContents().get(0);
		
		//SafetyLibrary:
		//	{SafetyContractLibrary} contract=SafetyContract;
		@Override public ParserRule getRule() { return rule; }

		//{SafetyContractLibrary} contract=SafetyContract
		public Group getGroup() { return cGroup; }

		//{SafetyContractLibrary}
		public Action getSafetyContractLibraryAction_0() { return cSafetyContractLibraryAction_0; }

		//contract=SafetyContract
		public Assignment getContractAssignment_1() { return cContractAssignment_1; }

		//SafetyContract
		public RuleCall getContractSafetyContractParserRuleCall_1_0() { return cContractSafetyContractParserRuleCall_1_0; }
	}

	public class SafetySubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.umn.cs.crisys.safety.Safety.SafetySubclause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSafetyContractSubclauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cContractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContractSafetyContractParserRuleCall_1_0 = (RuleCall)cContractAssignment_1.eContents().get(0);
		
		//SafetySubclause:
		//	{SafetyContractSubclause} contract=SafetyContract;
		@Override public ParserRule getRule() { return rule; }

		//{SafetyContractSubclause} contract=SafetyContract
		public Group getGroup() { return cGroup; }

		//{SafetyContractSubclause}
		public Action getSafetyContractSubclauseAction_0() { return cSafetyContractSubclauseAction_0; }

		//contract=SafetyContract
		public Assignment getContractAssignment_1() { return cContractAssignment_1; }

		//SafetyContract
		public RuleCall getContractSafetyContractParserRuleCall_1_0() { return cContractSafetyContractParserRuleCall_1_0; }
	}

	public class SafetyContractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.umn.cs.crisys.safety.Safety.SafetyContract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSafetyContractAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSpecsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSpecsSpecStatementParserRuleCall_1_0 = (RuleCall)cSpecsAssignment_1.eContents().get(0);
		
		//SafetyContract Contract:
		//	{SafetyContract} specs+=SpecStatement*;
		@Override public ParserRule getRule() { return rule; }

		//{SafetyContract} specs+=SpecStatement*
		public Group getGroup() { return cGroup; }

		//{SafetyContract}
		public Action getSafetyContractAction_0() { return cSafetyContractAction_0; }

		//specs+=SpecStatement*
		public Assignment getSpecsAssignment_1() { return cSpecsAssignment_1; }

		//SpecStatement
		public RuleCall getSpecsSpecStatementParserRuleCall_1_0() { return cSpecsSpecStatementParserRuleCall_1_0; }
	}

	public class ElementSafetyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.umn.cs.crisys.safety.Safety.ElementSafety");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSafetyEqStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFaultSubcomponentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ElementSafety aadl2::Element:
		//	SafetyEqStatement
		//	| Expr
		//	| FaultSubcomponent;
		@Override public ParserRule getRule() { return rule; }

		//SafetyEqStatement | Expr | FaultSubcomponent
		public Alternatives getAlternatives() { return cAlternatives; }

		//SafetyEqStatement
		public RuleCall getSafetyEqStatementParserRuleCall_0() { return cSafetyEqStatementParserRuleCall_0; }

		//Expr
		public RuleCall getExprParserRuleCall_1() { return cExprParserRuleCall_1; }

		//FaultSubcomponent
		public RuleCall getFaultSubcomponentParserRuleCall_2() { return cFaultSubcomponentParserRuleCall_2; }
	}

	public class SpecStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.umn.cs.crisys.safety.Safety.SpecStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cFaultStatementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cFaultKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Assignment cStrAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cStrSTRINGTerminalRuleCall_0_3_0 = (RuleCall)cStrAssignment_0_3.eContents().get(0);
		private final Keyword cColonKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cFaultDefNameAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cFaultDefNameDoubleDotRefParserRuleCall_0_5_0 = (RuleCall)cFaultDefNameAssignment_0_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Assignment cFaultDefinitionsAssignment_0_7 = (Assignment)cGroup_0.eContents().get(7);
		private final RuleCall cFaultDefinitionsFaultSubcomponentParserRuleCall_0_7_0 = (RuleCall)cFaultDefinitionsAssignment_0_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_8 = (Keyword)cGroup_0.eContents().get(8);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAnalysisStatementAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAnalyzeKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cBehaviorAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cBehaviorAnalysisBehaviorParserRuleCall_1_3_0 = (RuleCall)cBehaviorAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cHWFaultStatementAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cHW_faultKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cNameAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_2_0 = (RuleCall)cNameAssignment_2_2.eContents().get(0);
		private final Assignment cStrAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cStrSTRINGTerminalRuleCall_2_3_0 = (RuleCall)cStrAssignment_2_3.eContents().get(0);
		private final Keyword cColonKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Assignment cFaultDefinitionsAssignment_2_6 = (Assignment)cGroup_2.eContents().get(6);
		private final RuleCall cFaultDefinitionsHWFaultSubcomponentParserRuleCall_2_6_0 = (RuleCall)cFaultDefinitionsAssignment_2_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_7 = (Keyword)cGroup_2.eContents().get(7);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cPropagateStatementAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cPropagate_fromKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cColonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cSrcFaultListAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cSrcFaultListIDTerminalRuleCall_3_4_0 = (RuleCall)cSrcFaultListAssignment_3_4.eContents().get(0);
		private final Keyword cCommercialAtKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		private final Assignment cSrcComp_pathAssignment_3_6 = (Assignment)cGroup_3.eContents().get(6);
		private final CrossReference cSrcComp_pathNamedElementCrossReference_3_6_0 = (CrossReference)cSrcComp_pathAssignment_3_6.eContents().get(0);
		private final RuleCall cSrcComp_pathNamedElementDCIDParserRuleCall_3_6_0_1 = (RuleCall)cSrcComp_pathNamedElementCrossReference_3_6_0.eContents().get(1);
		private final Group cGroup_3_7 = (Group)cGroup_3.eContents().get(7);
		private final Keyword cCommaKeyword_3_7_0 = (Keyword)cGroup_3_7.eContents().get(0);
		private final Assignment cSrcFaultListAssignment_3_7_1 = (Assignment)cGroup_3_7.eContents().get(1);
		private final RuleCall cSrcFaultListIDTerminalRuleCall_3_7_1_0 = (RuleCall)cSrcFaultListAssignment_3_7_1.eContents().get(0);
		private final Keyword cCommercialAtKeyword_3_7_2 = (Keyword)cGroup_3_7.eContents().get(2);
		private final Assignment cSrcComp_pathAssignment_3_7_3 = (Assignment)cGroup_3_7.eContents().get(3);
		private final CrossReference cSrcComp_pathNamedElementCrossReference_3_7_3_0 = (CrossReference)cSrcComp_pathAssignment_3_7_3.eContents().get(0);
		private final RuleCall cSrcComp_pathNamedElementDCIDParserRuleCall_3_7_3_0_1 = (RuleCall)cSrcComp_pathNamedElementCrossReference_3_7_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3_8 = (Keyword)cGroup_3.eContents().get(8);
		private final Keyword cToKeyword_3_9 = (Keyword)cGroup_3.eContents().get(9);
		private final Keyword cLeftCurlyBracketKeyword_3_10 = (Keyword)cGroup_3.eContents().get(10);
		private final Assignment cDestFaultListAssignment_3_11 = (Assignment)cGroup_3.eContents().get(11);
		private final RuleCall cDestFaultListIDTerminalRuleCall_3_11_0 = (RuleCall)cDestFaultListAssignment_3_11.eContents().get(0);
		private final Keyword cCommercialAtKeyword_3_12 = (Keyword)cGroup_3.eContents().get(12);
		private final Assignment cDestComp_pathAssignment_3_13 = (Assignment)cGroup_3.eContents().get(13);
		private final CrossReference cDestComp_pathNamedElementCrossReference_3_13_0 = (CrossReference)cDestComp_pathAssignment_3_13.eContents().get(0);
		private final RuleCall cDestComp_pathNamedElementDCIDParserRuleCall_3_13_0_1 = (RuleCall)cDestComp_pathNamedElementCrossReference_3_13_0.eContents().get(1);
		private final Group cGroup_3_14 = (Group)cGroup_3.eContents().get(14);
		private final Keyword cCommaKeyword_3_14_0 = (Keyword)cGroup_3_14.eContents().get(0);
		private final Assignment cDestFaultListAssignment_3_14_1 = (Assignment)cGroup_3_14.eContents().get(1);
		private final RuleCall cDestFaultListIDTerminalRuleCall_3_14_1_0 = (RuleCall)cDestFaultListAssignment_3_14_1.eContents().get(0);
		private final Keyword cCommercialAtKeyword_3_14_2 = (Keyword)cGroup_3_14.eContents().get(2);
		private final Assignment cDestComp_pathAssignment_3_14_3 = (Assignment)cGroup_3_14.eContents().get(3);
		private final CrossReference cDestComp_pathNamedElementCrossReference_3_14_3_0 = (CrossReference)cDestComp_pathAssignment_3_14_3.eContents().get(0);
		private final RuleCall cDestComp_pathNamedElementDCIDParserRuleCall_3_14_3_0_1 = (RuleCall)cDestComp_pathNamedElementCrossReference_3_14_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3_15 = (Keyword)cGroup_3.eContents().get(15);
		private final Keyword cSemicolonKeyword_3_16 = (Keyword)cGroup_3.eContents().get(16);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cActivationStatementAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cFault_activationKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cColonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cAgreeBoolVarNameAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cAgreeBoolVarNameIDTerminalRuleCall_4_3_0 = (RuleCall)cAgreeBoolVarNameAssignment_4_3.eContents().get(0);
		private final Group cGroup_4_4 = (Group)cGroup_4.eContents().get(4);
		private final Keyword cCommercialAtKeyword_4_4_0 = (Keyword)cGroup_4_4.eContents().get(0);
		private final Assignment cAgreeComp_PathAssignment_4_4_1 = (Assignment)cGroup_4_4.eContents().get(1);
		private final CrossReference cAgreeComp_PathNamedElementCrossReference_4_4_1_0 = (CrossReference)cAgreeComp_PathAssignment_4_4_1.eContents().get(0);
		private final RuleCall cAgreeComp_PathNamedElementDCIDParserRuleCall_4_4_1_0_1 = (RuleCall)cAgreeComp_PathNamedElementCrossReference_4_4_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_4_5 = (Keyword)cGroup_4.eContents().get(5);
		private final Assignment cFaultNameAssignment_4_6 = (Assignment)cGroup_4.eContents().get(6);
		private final RuleCall cFaultNameIDTerminalRuleCall_4_6_0 = (RuleCall)cFaultNameAssignment_4_6.eContents().get(0);
		private final Keyword cCommercialAtKeyword_4_7 = (Keyword)cGroup_4.eContents().get(7);
		private final Assignment cFaultComp_PathAssignment_4_8 = (Assignment)cGroup_4.eContents().get(8);
		private final CrossReference cFaultComp_PathNamedElementCrossReference_4_8_0 = (CrossReference)cFaultComp_PathAssignment_4_8.eContents().get(0);
		private final RuleCall cFaultComp_PathNamedElementDCIDParserRuleCall_4_8_0_1 = (RuleCall)cFaultComp_PathNamedElementCrossReference_4_8_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4_9 = (Keyword)cGroup_4.eContents().get(9);
		
		//@Override
		//SpecStatement:
		//	{FaultStatement} 'fault' name=ID str=STRING? ':' faultDefName=DoubleDotRef
		//	'{' faultDefinitions+=FaultSubcomponent* '}'
		//	| {AnalysisStatement} 'analyze' ':' behavior=AnalysisBehavior
		//	| {HWFaultStatement} 'HW_fault' name=ID str=STRING? ':'
		//	'{' faultDefinitions+=HWFaultSubcomponent* '}'
		//	| {PropagateStatement} 'propagate_from' ':' '{' srcFaultList+=ID '@' srcComp_path+=[aadl2::NamedElement|DCID] (','
		//	srcFaultList+=ID '@' srcComp_path+=[aadl2::NamedElement|DCID])* '}'
		//	'to' '{' destFaultList+=ID '@' destComp_path+=[aadl2::NamedElement|DCID] (',' destFaultList+=ID '@'
		//	destComp_path+=[aadl2::NamedElement|DCID])* '}' ';'
		//	| {ActivationStatement} 'fault_activation' ':' agreeBoolVarName=ID ('@' agreeComp_Path=[aadl2::NamedElement|DCID])?
		//	'=' faultName=ID '@' faultComp_Path=[aadl2::NamedElement|DCID] ';';
		@Override public ParserRule getRule() { return rule; }

		//{FaultStatement} 'fault' name=ID str=STRING? ':' faultDefName=DoubleDotRef '{' faultDefinitions+=FaultSubcomponent* '}'
		//| {AnalysisStatement} 'analyze' ':' behavior=AnalysisBehavior | {HWFaultStatement} 'HW_fault' name=ID str=STRING? ':'
		//'{' faultDefinitions+=HWFaultSubcomponent* '}' | {PropagateStatement} 'propagate_from' ':' '{' srcFaultList+=ID '@'
		//srcComp_path+=[aadl2::NamedElement|DCID] (',' srcFaultList+=ID '@' srcComp_path+=[aadl2::NamedElement|DCID])* '}' 'to'
		//'{' destFaultList+=ID '@' destComp_path+=[aadl2::NamedElement|DCID] (',' destFaultList+=ID '@'
		//destComp_path+=[aadl2::NamedElement|DCID])* '}' ';' | {ActivationStatement} 'fault_activation' ':' agreeBoolVarName=ID
		//('@' agreeComp_Path=[aadl2::NamedElement|DCID])? '=' faultName=ID '@' faultComp_Path=[aadl2::NamedElement|DCID] ';'
		public Alternatives getAlternatives() { return cAlternatives; }

		//{FaultStatement} 'fault' name=ID str=STRING? ':' faultDefName=DoubleDotRef '{' faultDefinitions+=FaultSubcomponent* '}'
		public Group getGroup_0() { return cGroup_0; }

		//{FaultStatement}
		public Action getFaultStatementAction_0_0() { return cFaultStatementAction_0_0; }

		//'fault'
		public Keyword getFaultKeyword_0_1() { return cFaultKeyword_0_1; }

		//name=ID
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_0() { return cNameIDTerminalRuleCall_0_2_0; }

		//str=STRING?
		public Assignment getStrAssignment_0_3() { return cStrAssignment_0_3; }

		//STRING
		public RuleCall getStrSTRINGTerminalRuleCall_0_3_0() { return cStrSTRINGTerminalRuleCall_0_3_0; }

		//':'
		public Keyword getColonKeyword_0_4() { return cColonKeyword_0_4; }

		//faultDefName=DoubleDotRef
		public Assignment getFaultDefNameAssignment_0_5() { return cFaultDefNameAssignment_0_5; }

		//DoubleDotRef
		public RuleCall getFaultDefNameDoubleDotRefParserRuleCall_0_5_0() { return cFaultDefNameDoubleDotRefParserRuleCall_0_5_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_6() { return cLeftCurlyBracketKeyword_0_6; }

		//faultDefinitions+=FaultSubcomponent*
		public Assignment getFaultDefinitionsAssignment_0_7() { return cFaultDefinitionsAssignment_0_7; }

		//FaultSubcomponent
		public RuleCall getFaultDefinitionsFaultSubcomponentParserRuleCall_0_7_0() { return cFaultDefinitionsFaultSubcomponentParserRuleCall_0_7_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_0_8() { return cRightCurlyBracketKeyword_0_8; }

		//{AnalysisStatement} 'analyze' ':' behavior=AnalysisBehavior
		public Group getGroup_1() { return cGroup_1; }

		//{AnalysisStatement}
		public Action getAnalysisStatementAction_1_0() { return cAnalysisStatementAction_1_0; }

		//'analyze'
		public Keyword getAnalyzeKeyword_1_1() { return cAnalyzeKeyword_1_1; }

		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//behavior=AnalysisBehavior
		public Assignment getBehaviorAssignment_1_3() { return cBehaviorAssignment_1_3; }

		//AnalysisBehavior
		public RuleCall getBehaviorAnalysisBehaviorParserRuleCall_1_3_0() { return cBehaviorAnalysisBehaviorParserRuleCall_1_3_0; }

		//{HWFaultStatement} 'HW_fault' name=ID str=STRING? ':' '{' faultDefinitions+=HWFaultSubcomponent* '}'
		public Group getGroup_2() { return cGroup_2; }

		//{HWFaultStatement}
		public Action getHWFaultStatementAction_2_0() { return cHWFaultStatementAction_2_0; }

		//'HW_fault'
		public Keyword getHW_faultKeyword_2_1() { return cHW_faultKeyword_2_1; }

		//name=ID
		public Assignment getNameAssignment_2_2() { return cNameAssignment_2_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_2_0() { return cNameIDTerminalRuleCall_2_2_0; }

		//str=STRING?
		public Assignment getStrAssignment_2_3() { return cStrAssignment_2_3; }

		//STRING
		public RuleCall getStrSTRINGTerminalRuleCall_2_3_0() { return cStrSTRINGTerminalRuleCall_2_3_0; }

		//':'
		public Keyword getColonKeyword_2_4() { return cColonKeyword_2_4; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_5() { return cLeftCurlyBracketKeyword_2_5; }

		//faultDefinitions+=HWFaultSubcomponent*
		public Assignment getFaultDefinitionsAssignment_2_6() { return cFaultDefinitionsAssignment_2_6; }

		//HWFaultSubcomponent
		public RuleCall getFaultDefinitionsHWFaultSubcomponentParserRuleCall_2_6_0() { return cFaultDefinitionsHWFaultSubcomponentParserRuleCall_2_6_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_2_7() { return cRightCurlyBracketKeyword_2_7; }

		//{PropagateStatement} 'propagate_from' ':' '{' srcFaultList+=ID '@' srcComp_path+=[aadl2::NamedElement|DCID] (','
		//srcFaultList+=ID '@' srcComp_path+=[aadl2::NamedElement|DCID])* '}' 'to' '{' destFaultList+=ID '@'
		//destComp_path+=[aadl2::NamedElement|DCID] (',' destFaultList+=ID '@' destComp_path+=[aadl2::NamedElement|DCID])* '}'
		//';'
		public Group getGroup_3() { return cGroup_3; }

		//{PropagateStatement}
		public Action getPropagateStatementAction_3_0() { return cPropagateStatementAction_3_0; }

		//'propagate_from'
		public Keyword getPropagate_fromKeyword_3_1() { return cPropagate_fromKeyword_3_1; }

		//':'
		public Keyword getColonKeyword_3_2() { return cColonKeyword_3_2; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_3() { return cLeftCurlyBracketKeyword_3_3; }

		//srcFaultList+=ID
		public Assignment getSrcFaultListAssignment_3_4() { return cSrcFaultListAssignment_3_4; }

		//ID
		public RuleCall getSrcFaultListIDTerminalRuleCall_3_4_0() { return cSrcFaultListIDTerminalRuleCall_3_4_0; }

		//'@'
		public Keyword getCommercialAtKeyword_3_5() { return cCommercialAtKeyword_3_5; }

		//srcComp_path+=[aadl2::NamedElement|DCID]
		public Assignment getSrcComp_pathAssignment_3_6() { return cSrcComp_pathAssignment_3_6; }

		//[aadl2::NamedElement|DCID]
		public CrossReference getSrcComp_pathNamedElementCrossReference_3_6_0() { return cSrcComp_pathNamedElementCrossReference_3_6_0; }

		//DCID
		public RuleCall getSrcComp_pathNamedElementDCIDParserRuleCall_3_6_0_1() { return cSrcComp_pathNamedElementDCIDParserRuleCall_3_6_0_1; }

		//(',' srcFaultList+=ID '@' srcComp_path+=[aadl2::NamedElement|DCID])*
		public Group getGroup_3_7() { return cGroup_3_7; }

		//','
		public Keyword getCommaKeyword_3_7_0() { return cCommaKeyword_3_7_0; }

		//srcFaultList+=ID
		public Assignment getSrcFaultListAssignment_3_7_1() { return cSrcFaultListAssignment_3_7_1; }

		//ID
		public RuleCall getSrcFaultListIDTerminalRuleCall_3_7_1_0() { return cSrcFaultListIDTerminalRuleCall_3_7_1_0; }

		//'@'
		public Keyword getCommercialAtKeyword_3_7_2() { return cCommercialAtKeyword_3_7_2; }

		//srcComp_path+=[aadl2::NamedElement|DCID]
		public Assignment getSrcComp_pathAssignment_3_7_3() { return cSrcComp_pathAssignment_3_7_3; }

		//[aadl2::NamedElement|DCID]
		public CrossReference getSrcComp_pathNamedElementCrossReference_3_7_3_0() { return cSrcComp_pathNamedElementCrossReference_3_7_3_0; }

		//DCID
		public RuleCall getSrcComp_pathNamedElementDCIDParserRuleCall_3_7_3_0_1() { return cSrcComp_pathNamedElementDCIDParserRuleCall_3_7_3_0_1; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3_8() { return cRightCurlyBracketKeyword_3_8; }

		//'to'
		public Keyword getToKeyword_3_9() { return cToKeyword_3_9; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_10() { return cLeftCurlyBracketKeyword_3_10; }

		//destFaultList+=ID
		public Assignment getDestFaultListAssignment_3_11() { return cDestFaultListAssignment_3_11; }

		//ID
		public RuleCall getDestFaultListIDTerminalRuleCall_3_11_0() { return cDestFaultListIDTerminalRuleCall_3_11_0; }

		//'@'
		public Keyword getCommercialAtKeyword_3_12() { return cCommercialAtKeyword_3_12; }

		//destComp_path+=[aadl2::NamedElement|DCID]
		public Assignment getDestComp_pathAssignment_3_13() { return cDestComp_pathAssignment_3_13; }

		//[aadl2::NamedElement|DCID]
		public CrossReference getDestComp_pathNamedElementCrossReference_3_13_0() { return cDestComp_pathNamedElementCrossReference_3_13_0; }

		//DCID
		public RuleCall getDestComp_pathNamedElementDCIDParserRuleCall_3_13_0_1() { return cDestComp_pathNamedElementDCIDParserRuleCall_3_13_0_1; }

		//(',' destFaultList+=ID '@' destComp_path+=[aadl2::NamedElement|DCID])*
		public Group getGroup_3_14() { return cGroup_3_14; }

		//','
		public Keyword getCommaKeyword_3_14_0() { return cCommaKeyword_3_14_0; }

		//destFaultList+=ID
		public Assignment getDestFaultListAssignment_3_14_1() { return cDestFaultListAssignment_3_14_1; }

		//ID
		public RuleCall getDestFaultListIDTerminalRuleCall_3_14_1_0() { return cDestFaultListIDTerminalRuleCall_3_14_1_0; }

		//'@'
		public Keyword getCommercialAtKeyword_3_14_2() { return cCommercialAtKeyword_3_14_2; }

		//destComp_path+=[aadl2::NamedElement|DCID]
		public Assignment getDestComp_pathAssignment_3_14_3() { return cDestComp_pathAssignment_3_14_3; }

		//[aadl2::NamedElement|DCID]
		public CrossReference getDestComp_pathNamedElementCrossReference_3_14_3_0() { return cDestComp_pathNamedElementCrossReference_3_14_3_0; }

		//DCID
		public RuleCall getDestComp_pathNamedElementDCIDParserRuleCall_3_14_3_0_1() { return cDestComp_pathNamedElementDCIDParserRuleCall_3_14_3_0_1; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3_15() { return cRightCurlyBracketKeyword_3_15; }

		//';'
		public Keyword getSemicolonKeyword_3_16() { return cSemicolonKeyword_3_16; }

		//{ActivationStatement} 'fault_activation' ':' agreeBoolVarName=ID ('@' agreeComp_Path=[aadl2::NamedElement|DCID])? '='
		//faultName=ID '@' faultComp_Path=[aadl2::NamedElement|DCID] ';'
		public Group getGroup_4() { return cGroup_4; }

		//{ActivationStatement}
		public Action getActivationStatementAction_4_0() { return cActivationStatementAction_4_0; }

		//'fault_activation'
		public Keyword getFault_activationKeyword_4_1() { return cFault_activationKeyword_4_1; }

		//':'
		public Keyword getColonKeyword_4_2() { return cColonKeyword_4_2; }

		//agreeBoolVarName=ID
		public Assignment getAgreeBoolVarNameAssignment_4_3() { return cAgreeBoolVarNameAssignment_4_3; }

		//ID
		public RuleCall getAgreeBoolVarNameIDTerminalRuleCall_4_3_0() { return cAgreeBoolVarNameIDTerminalRuleCall_4_3_0; }

		//('@' agreeComp_Path=[aadl2::NamedElement|DCID])?
		public Group getGroup_4_4() { return cGroup_4_4; }

		//'@'
		public Keyword getCommercialAtKeyword_4_4_0() { return cCommercialAtKeyword_4_4_0; }

		//agreeComp_Path=[aadl2::NamedElement|DCID]
		public Assignment getAgreeComp_PathAssignment_4_4_1() { return cAgreeComp_PathAssignment_4_4_1; }

		//[aadl2::NamedElement|DCID]
		public CrossReference getAgreeComp_PathNamedElementCrossReference_4_4_1_0() { return cAgreeComp_PathNamedElementCrossReference_4_4_1_0; }

		//DCID
		public RuleCall getAgreeComp_PathNamedElementDCIDParserRuleCall_4_4_1_0_1() { return cAgreeComp_PathNamedElementDCIDParserRuleCall_4_4_1_0_1; }

		//'='
		public Keyword getEqualsSignKeyword_4_5() { return cEqualsSignKeyword_4_5; }

		//faultName=ID
		public Assignment getFaultNameAssignment_4_6() { return cFaultNameAssignment_4_6; }

		//ID
		public RuleCall getFaultNameIDTerminalRuleCall_4_6_0() { return cFaultNameIDTerminalRuleCall_4_6_0; }

		//'@'
		public Keyword getCommercialAtKeyword_4_7() { return cCommercialAtKeyword_4_7; }

		//faultComp_Path=[aadl2::NamedElement|DCID]
		public Assignment getFaultComp_PathAssignment_4_8() { return cFaultComp_PathAssignment_4_8; }

		//[aadl2::NamedElement|DCID]
		public CrossReference getFaultComp_PathNamedElementCrossReference_4_8_0() { return cFaultComp_PathNamedElementCrossReference_4_8_0; }

		//DCID
		public RuleCall getFaultComp_PathNamedElementDCIDParserRuleCall_4_8_0_1() { return cFaultComp_PathNamedElementDCIDParserRuleCall_4_8_0_1; }

		//';'
		public Keyword getSemicolonKeyword_4_9() { return cSemicolonKeyword_4_9; }
	}

	public class AnalysisBehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.umn.cs.crisys.safety.Safety.AnalysisBehavior");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cFaultCountBehaviorAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cMaxKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cMaxFaultsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cMaxFaultsINTEGER_LITTerminalRuleCall_0_2_0 = (RuleCall)cMaxFaultsAssignment_0_2.eContents().get(0);
		private final Keyword cFaultKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cProbabilityBehaviorAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cProbabilityKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cProbabiltyAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cProbabiltyREAL_LITTerminalRuleCall_1_2_0 = (RuleCall)cProbabiltyAssignment_1_2.eContents().get(0);
		
		//AnalysisBehavior:
		//	{FaultCountBehavior} 'max' maxFaults=INTEGER_LIT 'fault'
		//	| {ProbabilityBehavior} 'probability' probabilty=REAL_LIT;
		@Override public ParserRule getRule() { return rule; }

		//{FaultCountBehavior} 'max' maxFaults=INTEGER_LIT 'fault' | {ProbabilityBehavior} 'probability' probabilty=REAL_LIT
		public Alternatives getAlternatives() { return cAlternatives; }

		//{FaultCountBehavior} 'max' maxFaults=INTEGER_LIT 'fault'
		public Group getGroup_0() { return cGroup_0; }

		//{FaultCountBehavior}
		public Action getFaultCountBehaviorAction_0_0() { return cFaultCountBehaviorAction_0_0; }

		//'max'
		public Keyword getMaxKeyword_0_1() { return cMaxKeyword_0_1; }

		//maxFaults=INTEGER_LIT
		public Assignment getMaxFaultsAssignment_0_2() { return cMaxFaultsAssignment_0_2; }

		//INTEGER_LIT
		public RuleCall getMaxFaultsINTEGER_LITTerminalRuleCall_0_2_0() { return cMaxFaultsINTEGER_LITTerminalRuleCall_0_2_0; }

		//'fault'
		public Keyword getFaultKeyword_0_3() { return cFaultKeyword_0_3; }

		//{ProbabilityBehavior} 'probability' probabilty=REAL_LIT
		public Group getGroup_1() { return cGroup_1; }

		//{ProbabilityBehavior}
		public Action getProbabilityBehaviorAction_1_0() { return cProbabilityBehaviorAction_1_0; }

		//'probability'
		public Keyword getProbabilityKeyword_1_1() { return cProbabilityKeyword_1_1; }

		//probabilty=REAL_LIT
		public Assignment getProbabiltyAssignment_1_2() { return cProbabiltyAssignment_1_2; }

		//REAL_LIT
		public RuleCall getProbabiltyREAL_LITTerminalRuleCall_1_2_0() { return cProbabiltyREAL_LITTerminalRuleCall_1_2_0; }
	}

	public class FaultSubcomponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.umn.cs.crisys.safety.Safety.FaultSubcomponent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cInputStatementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cInputsKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cFault_inAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cFault_inIDTerminalRuleCall_0_3_0 = (RuleCall)cFault_inAssignment_0_3.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cNom_connAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cNom_connExprParserRuleCall_0_5_0 = (RuleCall)cNom_connAssignment_0_5.eContents().get(0);
		private final Group cGroup_0_6 = (Group)cGroup_0.eContents().get(6);
		private final Keyword cCommaKeyword_0_6_0 = (Keyword)cGroup_0_6.eContents().get(0);
		private final Assignment cFault_inAssignment_0_6_1 = (Assignment)cGroup_0_6.eContents().get(1);
		private final RuleCall cFault_inIDTerminalRuleCall_0_6_1_0 = (RuleCall)cFault_inAssignment_0_6_1.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_0_6_2 = (Keyword)cGroup_0_6.eContents().get(2);
		private final Assignment cNom_connAssignment_0_6_3 = (Assignment)cGroup_0_6.eContents().get(3);
		private final RuleCall cNom_connExprParserRuleCall_0_6_3_0 = (RuleCall)cNom_connAssignment_0_6_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_7 = (Keyword)cGroup_0.eContents().get(7);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOutputStatementAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOutputsKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cNom_connAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cNom_connNamedElementCrossReference_1_3_0 = (CrossReference)cNom_connAssignment_1_3.eContents().get(0);
		private final RuleCall cNom_connNamedElementDCIDParserRuleCall_1_3_0_1 = (RuleCall)cNom_connNamedElementCrossReference_1_3_0.eContents().get(1);
		private final Keyword cLessThanSignHyphenMinusKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cFault_outAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cFault_outIDTerminalRuleCall_1_5_0 = (RuleCall)cFault_outAssignment_1_5.eContents().get(0);
		private final Group cGroup_1_6 = (Group)cGroup_1.eContents().get(6);
		private final Keyword cCommaKeyword_1_6_0 = (Keyword)cGroup_1_6.eContents().get(0);
		private final Assignment cNom_connAssignment_1_6_1 = (Assignment)cGroup_1_6.eContents().get(1);
		private final CrossReference cNom_connNamedElementCrossReference_1_6_1_0 = (CrossReference)cNom_connAssignment_1_6_1.eContents().get(0);
		private final RuleCall cNom_connNamedElementDCIDParserRuleCall_1_6_1_0_1 = (RuleCall)cNom_connNamedElementCrossReference_1_6_1_0.eContents().get(1);
		private final Keyword cLessThanSignHyphenMinusKeyword_1_6_2 = (Keyword)cGroup_1_6.eContents().get(2);
		private final Assignment cFault_outAssignment_1_6_3 = (Assignment)cGroup_1_6.eContents().get(3);
		private final RuleCall cFault_outIDTerminalRuleCall_1_6_3_0 = (RuleCall)cFault_outAssignment_1_6_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cDurationStatementAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cDurationKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cColonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cTcAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cTcTemporalConstraintParserRuleCall_2_3_0 = (RuleCall)cTcAssignment_2_3.eContents().get(0);
		private final Assignment cIntervAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cIntervIntervalParserRuleCall_2_4_0 = (RuleCall)cIntervAssignment_2_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cProbabilityStatementAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cProbabilityKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cColonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cProbabilityAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cProbabilityREAL_LITTerminalRuleCall_3_3_0 = (RuleCall)cProbabilityAssignment_3_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cTriggerStatementAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cEnabledKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cCondAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cCondTriggerConditionParserRuleCall_4_2_0 = (RuleCall)cCondAssignment_4_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cPropagationTypeStatementAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cPropagate_typeKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cColonKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cPtyAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cPtyPropagationTypeConstraintParserRuleCall_5_3_0 = (RuleCall)cPtyAssignment_5_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final RuleCall cSafetyEqStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//FaultSubcomponent:
		//	{InputStatement} 'inputs' ':' fault_in+=ID '<-' nom_conn+=Expr (',' fault_in+=ID '<-' nom_conn+=Expr)* ';'
		//	| {OutputStatement} 'outputs' ':' nom_conn+=[aadl2::NamedElement|DCID] '<-' fault_out+=ID (','
		//	nom_conn+=[aadl2::NamedElement|DCID] '<-' fault_out+=ID)* ';'
		//	| {DurationStatement} 'duration' ':' tc=TemporalConstraint interv=Interval? ';'
		//	| {ProbabilityStatement} 'probability' ':' probability=REAL_LIT ';'
		//	| {TriggerStatement} 'enabled' cond=TriggerCondition ';'
		//	| {PropagationTypeStatement} 'propagate_type' ':' pty=PropagationTypeConstraint ';'
		//	| SafetyEqStatement;
		@Override public ParserRule getRule() { return rule; }

		//{InputStatement} 'inputs' ':' fault_in+=ID '<-' nom_conn+=Expr (',' fault_in+=ID '<-' nom_conn+=Expr)* ';' |
		//{OutputStatement} 'outputs' ':' nom_conn+=[aadl2::NamedElement|DCID] '<-' fault_out+=ID (','
		//nom_conn+=[aadl2::NamedElement|DCID] '<-' fault_out+=ID)* ';' | {DurationStatement} 'duration' ':'
		//tc=TemporalConstraint interv=Interval? ';' | {ProbabilityStatement} 'probability' ':' probability=REAL_LIT ';' |
		//{TriggerStatement} 'enabled' cond=TriggerCondition ';' | {PropagationTypeStatement} 'propagate_type' ':'
		//pty=PropagationTypeConstraint ';' | SafetyEqStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//{InputStatement} 'inputs' ':' fault_in+=ID '<-' nom_conn+=Expr (',' fault_in+=ID '<-' nom_conn+=Expr)* ';'
		public Group getGroup_0() { return cGroup_0; }

		//{InputStatement}
		public Action getInputStatementAction_0_0() { return cInputStatementAction_0_0; }

		//'inputs'
		public Keyword getInputsKeyword_0_1() { return cInputsKeyword_0_1; }

		//':'
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }

		//fault_in+=ID
		public Assignment getFault_inAssignment_0_3() { return cFault_inAssignment_0_3; }

		//ID
		public RuleCall getFault_inIDTerminalRuleCall_0_3_0() { return cFault_inIDTerminalRuleCall_0_3_0; }

		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_0_4() { return cLessThanSignHyphenMinusKeyword_0_4; }

		//nom_conn+=Expr
		public Assignment getNom_connAssignment_0_5() { return cNom_connAssignment_0_5; }

		//Expr
		public RuleCall getNom_connExprParserRuleCall_0_5_0() { return cNom_connExprParserRuleCall_0_5_0; }

		//(',' fault_in+=ID '<-' nom_conn+=Expr)*
		public Group getGroup_0_6() { return cGroup_0_6; }

		//','
		public Keyword getCommaKeyword_0_6_0() { return cCommaKeyword_0_6_0; }

		//fault_in+=ID
		public Assignment getFault_inAssignment_0_6_1() { return cFault_inAssignment_0_6_1; }

		//ID
		public RuleCall getFault_inIDTerminalRuleCall_0_6_1_0() { return cFault_inIDTerminalRuleCall_0_6_1_0; }

		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_0_6_2() { return cLessThanSignHyphenMinusKeyword_0_6_2; }

		//nom_conn+=Expr
		public Assignment getNom_connAssignment_0_6_3() { return cNom_connAssignment_0_6_3; }

		//Expr
		public RuleCall getNom_connExprParserRuleCall_0_6_3_0() { return cNom_connExprParserRuleCall_0_6_3_0; }

		//';'
		public Keyword getSemicolonKeyword_0_7() { return cSemicolonKeyword_0_7; }

		//{OutputStatement} 'outputs' ':' nom_conn+=[aadl2::NamedElement|DCID] '<-' fault_out+=ID (','
		//nom_conn+=[aadl2::NamedElement|DCID] '<-' fault_out+=ID)* ';'
		public Group getGroup_1() { return cGroup_1; }

		//{OutputStatement}
		public Action getOutputStatementAction_1_0() { return cOutputStatementAction_1_0; }

		//'outputs'
		public Keyword getOutputsKeyword_1_1() { return cOutputsKeyword_1_1; }

		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//nom_conn+=[aadl2::NamedElement|DCID]
		public Assignment getNom_connAssignment_1_3() { return cNom_connAssignment_1_3; }

		//[aadl2::NamedElement|DCID]
		public CrossReference getNom_connNamedElementCrossReference_1_3_0() { return cNom_connNamedElementCrossReference_1_3_0; }

		//DCID
		public RuleCall getNom_connNamedElementDCIDParserRuleCall_1_3_0_1() { return cNom_connNamedElementDCIDParserRuleCall_1_3_0_1; }

		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_1_4() { return cLessThanSignHyphenMinusKeyword_1_4; }

		//fault_out+=ID
		public Assignment getFault_outAssignment_1_5() { return cFault_outAssignment_1_5; }

		//ID
		public RuleCall getFault_outIDTerminalRuleCall_1_5_0() { return cFault_outIDTerminalRuleCall_1_5_0; }

		//(',' nom_conn+=[aadl2::NamedElement|DCID] '<-' fault_out+=ID)*
		public Group getGroup_1_6() { return cGroup_1_6; }

		//','
		public Keyword getCommaKeyword_1_6_0() { return cCommaKeyword_1_6_0; }

		//nom_conn+=[aadl2::NamedElement|DCID]
		public Assignment getNom_connAssignment_1_6_1() { return cNom_connAssignment_1_6_1; }

		//[aadl2::NamedElement|DCID]
		public CrossReference getNom_connNamedElementCrossReference_1_6_1_0() { return cNom_connNamedElementCrossReference_1_6_1_0; }

		//DCID
		public RuleCall getNom_connNamedElementDCIDParserRuleCall_1_6_1_0_1() { return cNom_connNamedElementDCIDParserRuleCall_1_6_1_0_1; }

		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_1_6_2() { return cLessThanSignHyphenMinusKeyword_1_6_2; }

		//fault_out+=ID
		public Assignment getFault_outAssignment_1_6_3() { return cFault_outAssignment_1_6_3; }

		//ID
		public RuleCall getFault_outIDTerminalRuleCall_1_6_3_0() { return cFault_outIDTerminalRuleCall_1_6_3_0; }

		//';'
		public Keyword getSemicolonKeyword_1_7() { return cSemicolonKeyword_1_7; }

		//{DurationStatement} 'duration' ':' tc=TemporalConstraint interv=Interval? ';'
		public Group getGroup_2() { return cGroup_2; }

		//{DurationStatement}
		public Action getDurationStatementAction_2_0() { return cDurationStatementAction_2_0; }

		//'duration'
		public Keyword getDurationKeyword_2_1() { return cDurationKeyword_2_1; }

		//':'
		public Keyword getColonKeyword_2_2() { return cColonKeyword_2_2; }

		//tc=TemporalConstraint
		public Assignment getTcAssignment_2_3() { return cTcAssignment_2_3; }

		//TemporalConstraint
		public RuleCall getTcTemporalConstraintParserRuleCall_2_3_0() { return cTcTemporalConstraintParserRuleCall_2_3_0; }

		//interv=Interval?
		public Assignment getIntervAssignment_2_4() { return cIntervAssignment_2_4; }

		//Interval
		public RuleCall getIntervIntervalParserRuleCall_2_4_0() { return cIntervIntervalParserRuleCall_2_4_0; }

		//';'
		public Keyword getSemicolonKeyword_2_5() { return cSemicolonKeyword_2_5; }

		//{ProbabilityStatement} 'probability' ':' probability=REAL_LIT ';'
		public Group getGroup_3() { return cGroup_3; }

		//{ProbabilityStatement}
		public Action getProbabilityStatementAction_3_0() { return cProbabilityStatementAction_3_0; }

		//'probability'
		public Keyword getProbabilityKeyword_3_1() { return cProbabilityKeyword_3_1; }

		//':'
		public Keyword getColonKeyword_3_2() { return cColonKeyword_3_2; }

		//probability=REAL_LIT
		public Assignment getProbabilityAssignment_3_3() { return cProbabilityAssignment_3_3; }

		//REAL_LIT
		public RuleCall getProbabilityREAL_LITTerminalRuleCall_3_3_0() { return cProbabilityREAL_LITTerminalRuleCall_3_3_0; }

		//';'
		public Keyword getSemicolonKeyword_3_4() { return cSemicolonKeyword_3_4; }

		//{TriggerStatement} 'enabled' cond=TriggerCondition ';'
		public Group getGroup_4() { return cGroup_4; }

		//{TriggerStatement}
		public Action getTriggerStatementAction_4_0() { return cTriggerStatementAction_4_0; }

		//'enabled'
		public Keyword getEnabledKeyword_4_1() { return cEnabledKeyword_4_1; }

		//cond=TriggerCondition
		public Assignment getCondAssignment_4_2() { return cCondAssignment_4_2; }

		//TriggerCondition
		public RuleCall getCondTriggerConditionParserRuleCall_4_2_0() { return cCondTriggerConditionParserRuleCall_4_2_0; }

		//';'
		public Keyword getSemicolonKeyword_4_3() { return cSemicolonKeyword_4_3; }

		//{PropagationTypeStatement} 'propagate_type' ':' pty=PropagationTypeConstraint ';'
		public Group getGroup_5() { return cGroup_5; }

		//{PropagationTypeStatement}
		public Action getPropagationTypeStatementAction_5_0() { return cPropagationTypeStatementAction_5_0; }

		//'propagate_type'
		public Keyword getPropagate_typeKeyword_5_1() { return cPropagate_typeKeyword_5_1; }

		//':'
		public Keyword getColonKeyword_5_2() { return cColonKeyword_5_2; }

		//pty=PropagationTypeConstraint
		public Assignment getPtyAssignment_5_3() { return cPtyAssignment_5_3; }

		//PropagationTypeConstraint
		public RuleCall getPtyPropagationTypeConstraintParserRuleCall_5_3_0() { return cPtyPropagationTypeConstraintParserRuleCall_5_3_0; }

		//';'
		public Keyword getSemicolonKeyword_5_4() { return cSemicolonKeyword_5_4; }

		//SafetyEqStatement
		public RuleCall getSafetyEqStatementParserRuleCall_6() { return cSafetyEqStatementParserRuleCall_6; }
	}

	public class HWFaultSubcomponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.umn.cs.crisys.safety.Safety.HWFaultSubcomponent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cDurationStatementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cDurationKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cTcAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cTcTemporalConstraintParserRuleCall_0_3_0 = (RuleCall)cTcAssignment_0_3.eContents().get(0);
		private final Assignment cIntervAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cIntervIntervalParserRuleCall_0_4_0 = (RuleCall)cIntervAssignment_0_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cProbabilityStatementAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cProbabilityKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cProbabilityAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cProbabilityREAL_LITTerminalRuleCall_1_3_0 = (RuleCall)cProbabilityAssignment_1_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cPropagationTypeStatementAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cPropagate_typeKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cColonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cPtyAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cPtyPropagationTypeConstraintParserRuleCall_2_3_0 = (RuleCall)cPtyAssignment_2_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//HWFaultSubcomponent:
		//	{DurationStatement} 'duration' ':' tc=TemporalConstraint interv=Interval? ';'
		//	| {ProbabilityStatement} 'probability' ':' probability=REAL_LIT ';'
		//	| {PropagationTypeStatement} 'propagate_type' ':' pty=PropagationTypeConstraint ';';
		@Override public ParserRule getRule() { return rule; }

		//{DurationStatement} 'duration' ':' tc=TemporalConstraint interv=Interval? ';' | {ProbabilityStatement} 'probability' ':'
		//probability=REAL_LIT ';' | {PropagationTypeStatement} 'propagate_type' ':' pty=PropagationTypeConstraint ';'
		public Alternatives getAlternatives() { return cAlternatives; }

		//{DurationStatement} 'duration' ':' tc=TemporalConstraint interv=Interval? ';'
		public Group getGroup_0() { return cGroup_0; }

		//{DurationStatement}
		public Action getDurationStatementAction_0_0() { return cDurationStatementAction_0_0; }

		//'duration'
		public Keyword getDurationKeyword_0_1() { return cDurationKeyword_0_1; }

		//':'
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }

		//tc=TemporalConstraint
		public Assignment getTcAssignment_0_3() { return cTcAssignment_0_3; }

		//TemporalConstraint
		public RuleCall getTcTemporalConstraintParserRuleCall_0_3_0() { return cTcTemporalConstraintParserRuleCall_0_3_0; }

		//interv=Interval?
		public Assignment getIntervAssignment_0_4() { return cIntervAssignment_0_4; }

		//Interval
		public RuleCall getIntervIntervalParserRuleCall_0_4_0() { return cIntervIntervalParserRuleCall_0_4_0; }

		//';'
		public Keyword getSemicolonKeyword_0_5() { return cSemicolonKeyword_0_5; }

		//{ProbabilityStatement} 'probability' ':' probability=REAL_LIT ';'
		public Group getGroup_1() { return cGroup_1; }

		//{ProbabilityStatement}
		public Action getProbabilityStatementAction_1_0() { return cProbabilityStatementAction_1_0; }

		//'probability'
		public Keyword getProbabilityKeyword_1_1() { return cProbabilityKeyword_1_1; }

		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//probability=REAL_LIT
		public Assignment getProbabilityAssignment_1_3() { return cProbabilityAssignment_1_3; }

		//REAL_LIT
		public RuleCall getProbabilityREAL_LITTerminalRuleCall_1_3_0() { return cProbabilityREAL_LITTerminalRuleCall_1_3_0; }

		//';'
		public Keyword getSemicolonKeyword_1_4() { return cSemicolonKeyword_1_4; }

		//{PropagationTypeStatement} 'propagate_type' ':' pty=PropagationTypeConstraint ';'
		public Group getGroup_2() { return cGroup_2; }

		//{PropagationTypeStatement}
		public Action getPropagationTypeStatementAction_2_0() { return cPropagationTypeStatementAction_2_0; }

		//'propagate_type'
		public Keyword getPropagate_typeKeyword_2_1() { return cPropagate_typeKeyword_2_1; }

		//':'
		public Keyword getColonKeyword_2_2() { return cColonKeyword_2_2; }

		//pty=PropagationTypeConstraint
		public Assignment getPtyAssignment_2_3() { return cPtyAssignment_2_3; }

		//PropagationTypeConstraint
		public RuleCall getPtyPropagationTypeConstraintParserRuleCall_2_3_0() { return cPtyPropagationTypeConstraintParserRuleCall_2_3_0; }

		//';'
		public Keyword getSemicolonKeyword_2_4() { return cSemicolonKeyword_2_4; }
	}

	public class PropagationTypeConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.umn.cs.crisys.safety.Safety.PropagationTypeConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAsymmetricAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cAsymmetricKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSymmetricAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSymmetricKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//PropagationTypeConstraint:
		//	{asymmetric} 'asymmetric'
		//	| {symmetric} 'symmetric';
		@Override public ParserRule getRule() { return rule; }

		//{asymmetric} 'asymmetric' | {symmetric} 'symmetric'
		public Alternatives getAlternatives() { return cAlternatives; }

		//{asymmetric} 'asymmetric'
		public Group getGroup_0() { return cGroup_0; }

		//{asymmetric}
		public Action getAsymmetricAction_0_0() { return cAsymmetricAction_0_0; }

		//'asymmetric'
		public Keyword getAsymmetricKeyword_0_1() { return cAsymmetricKeyword_0_1; }

		//{symmetric} 'symmetric'
		public Group getGroup_1() { return cGroup_1; }

		//{symmetric}
		public Action getSymmetricAction_1_0() { return cSymmetricAction_1_0; }

		//'symmetric'
		public Keyword getSymmetricKeyword_1_1() { return cSymmetricKeyword_1_1; }
	}

	public class TemporalConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.umn.cs.crisys.safety.Safety.TemporalConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPermanentConstraintAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cPermanentKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cTransientConstraintAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cTransientKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//TemporalConstraint:
		//	{PermanentConstraint} 'permanent'
		//	| {TransientConstraint} 'transient';
		@Override public ParserRule getRule() { return rule; }

		//{PermanentConstraint} 'permanent' | {TransientConstraint} 'transient'
		public Alternatives getAlternatives() { return cAlternatives; }

		//{PermanentConstraint} 'permanent'
		public Group getGroup_0() { return cGroup_0; }

		//{PermanentConstraint}
		public Action getPermanentConstraintAction_0_0() { return cPermanentConstraintAction_0_0; }

		//'permanent'
		public Keyword getPermanentKeyword_0_1() { return cPermanentKeyword_0_1; }

		//{TransientConstraint} 'transient'
		public Group getGroup_1() { return cGroup_1; }

		//{TransientConstraint}
		public Action getTransientConstraintAction_1_0() { return cTransientConstraintAction_1_0; }

		//'transient'
		public Keyword getTransientKeyword_1_1() { return cTransientKeyword_1_1; }
	}

	public class TriggerConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.umn.cs.crisys.safety.Safety.TriggerCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnablerConditionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cByKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExprListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprListExprParserRuleCall_3_0 = (RuleCall)cExprListAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExprListAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cExprListExprParserRuleCall_4_1_0 = (RuleCall)cExprListAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TriggerCondition:
		//	{EnablerCondition} 'by' '{' exprList+=Expr ("," exprList+=Expr)* '}';
		@Override public ParserRule getRule() { return rule; }

		//{EnablerCondition} 'by' '{' exprList+=Expr ("," exprList+=Expr)* '}'
		public Group getGroup() { return cGroup; }

		//{EnablerCondition}
		public Action getEnablerConditionAction_0() { return cEnablerConditionAction_0; }

		//'by'
		public Keyword getByKeyword_1() { return cByKeyword_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//exprList+=Expr
		public Assignment getExprListAssignment_3() { return cExprListAssignment_3; }

		//Expr
		public RuleCall getExprListExprParserRuleCall_3_0() { return cExprListExprParserRuleCall_3_0; }

		//("," exprList+=Expr)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//exprList+=Expr
		public Assignment getExprListAssignment_4_1() { return cExprListAssignment_4_1; }

		//Expr
		public RuleCall getExprListExprParserRuleCall_4_1_0() { return cExprListExprParserRuleCall_4_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class SafetyEqStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.umn.cs.crisys.safety.Safety.SafetyEqStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cEqValueAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cEqKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Assignment cLhsAssignment_0_2_0 = (Assignment)cGroup_0_2.eContents().get(0);
		private final RuleCall cLhsArgParserRuleCall_0_2_0_0 = (RuleCall)cLhsAssignment_0_2_0.eContents().get(0);
		private final Group cGroup_0_2_1 = (Group)cGroup_0_2.eContents().get(1);
		private final Keyword cCommaKeyword_0_2_1_0 = (Keyword)cGroup_0_2_1.eContents().get(0);
		private final Assignment cLhsAssignment_0_2_1_1 = (Assignment)cGroup_0_2_1.eContents().get(1);
		private final RuleCall cLhsArgParserRuleCall_0_2_1_1_0 = (RuleCall)cLhsAssignment_0_2_1_1.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cEqualsSignKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cExprAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_0_3_1_0 = (RuleCall)cExprAssignment_0_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIntervalEqAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cIntervalKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cLhs_intAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLhs_intArgParserRuleCall_1_2_0 = (RuleCall)cLhs_intAssignment_1_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cIntervAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cIntervIntervalParserRuleCall_1_4_0 = (RuleCall)cIntervAssignment_1_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSetEqAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cSetKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cLhs_setAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cLhs_setArgParserRuleCall_2_2_0 = (RuleCall)cLhs_setAssignment_2_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cL1Assignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cL1ExprParserRuleCall_2_5_0 = (RuleCall)cL1Assignment_2_5.eContents().get(0);
		private final Group cGroup_2_6 = (Group)cGroup_2.eContents().get(6);
		private final Keyword cCommaKeyword_2_6_0 = (Keyword)cGroup_2_6.eContents().get(0);
		private final Assignment cListAssignment_2_6_1 = (Assignment)cGroup_2_6.eContents().get(1);
		private final RuleCall cListExprParserRuleCall_2_6_1_0 = (RuleCall)cListAssignment_2_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_7 = (Keyword)cGroup_2.eContents().get(7);
		private final Keyword cSemicolonKeyword_2_8 = (Keyword)cGroup_2.eContents().get(8);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cRangeEqAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cRangeKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cLhs_rangeAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cLhs_rangeArgParserRuleCall_3_2_0 = (RuleCall)cLhs_rangeAssignment_3_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Assignment cL1Assignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final RuleCall cL1ExprParserRuleCall_3_5_0 = (RuleCall)cL1Assignment_3_5.eContents().get(0);
		private final Keyword cCommaKeyword_3_6 = (Keyword)cGroup_3.eContents().get(6);
		private final Assignment cL2Assignment_3_7 = (Assignment)cGroup_3.eContents().get(7);
		private final RuleCall cL2ExprParserRuleCall_3_7_0 = (RuleCall)cL2Assignment_3_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_8 = (Keyword)cGroup_3.eContents().get(8);
		private final Keyword cSemicolonKeyword_3_9 = (Keyword)cGroup_3.eContents().get(9);
		
		//SafetyEqStatement:
		//	{EqValue} 'eq' (lhs+=Arg (',' lhs+=Arg)*) ('=' expr=Expr)? ';'
		//	| {IntervalEq} 'interval' lhs_int=Arg '=' interv=Interval ';'
		//	| {SetEq} 'set' lhs_set=Arg '=' '{' l1=Expr (',' list+=Expr)* '}' ';'
		//	| {RangeEq} 'range' lhs_range=Arg '=' '{' l1=Expr ',' l2=Expr '}' ';';
		@Override public ParserRule getRule() { return rule; }

		//{EqValue} 'eq' (lhs+=Arg (',' lhs+=Arg)*) ('=' expr=Expr)? ';' | {IntervalEq} 'interval' lhs_int=Arg '=' interv=Interval
		//';' | {SetEq} 'set' lhs_set=Arg '=' '{' l1=Expr (',' list+=Expr)* '}' ';' | {RangeEq} 'range' lhs_range=Arg '=' '{'
		//l1=Expr ',' l2=Expr '}' ';'
		public Alternatives getAlternatives() { return cAlternatives; }

		//{EqValue} 'eq' (lhs+=Arg (',' lhs+=Arg)*) ('=' expr=Expr)? ';'
		public Group getGroup_0() { return cGroup_0; }

		//{EqValue}
		public Action getEqValueAction_0_0() { return cEqValueAction_0_0; }

		//'eq'
		public Keyword getEqKeyword_0_1() { return cEqKeyword_0_1; }

		//lhs+=Arg (',' lhs+=Arg)*
		public Group getGroup_0_2() { return cGroup_0_2; }

		//lhs+=Arg
		public Assignment getLhsAssignment_0_2_0() { return cLhsAssignment_0_2_0; }

		//Arg
		public RuleCall getLhsArgParserRuleCall_0_2_0_0() { return cLhsArgParserRuleCall_0_2_0_0; }

		//(',' lhs+=Arg)*
		public Group getGroup_0_2_1() { return cGroup_0_2_1; }

		//','
		public Keyword getCommaKeyword_0_2_1_0() { return cCommaKeyword_0_2_1_0; }

		//lhs+=Arg
		public Assignment getLhsAssignment_0_2_1_1() { return cLhsAssignment_0_2_1_1; }

		//Arg
		public RuleCall getLhsArgParserRuleCall_0_2_1_1_0() { return cLhsArgParserRuleCall_0_2_1_1_0; }

		//('=' expr=Expr)?
		public Group getGroup_0_3() { return cGroup_0_3; }

		//'='
		public Keyword getEqualsSignKeyword_0_3_0() { return cEqualsSignKeyword_0_3_0; }

		//expr=Expr
		public Assignment getExprAssignment_0_3_1() { return cExprAssignment_0_3_1; }

		//Expr
		public RuleCall getExprExprParserRuleCall_0_3_1_0() { return cExprExprParserRuleCall_0_3_1_0; }

		//';'
		public Keyword getSemicolonKeyword_0_4() { return cSemicolonKeyword_0_4; }

		//{IntervalEq} 'interval' lhs_int=Arg '=' interv=Interval ';'
		public Group getGroup_1() { return cGroup_1; }

		//{IntervalEq}
		public Action getIntervalEqAction_1_0() { return cIntervalEqAction_1_0; }

		//'interval'
		public Keyword getIntervalKeyword_1_1() { return cIntervalKeyword_1_1; }

		//lhs_int=Arg
		public Assignment getLhs_intAssignment_1_2() { return cLhs_intAssignment_1_2; }

		//Arg
		public RuleCall getLhs_intArgParserRuleCall_1_2_0() { return cLhs_intArgParserRuleCall_1_2_0; }

		//'='
		public Keyword getEqualsSignKeyword_1_3() { return cEqualsSignKeyword_1_3; }

		//interv=Interval
		public Assignment getIntervAssignment_1_4() { return cIntervAssignment_1_4; }

		//Interval
		public RuleCall getIntervIntervalParserRuleCall_1_4_0() { return cIntervIntervalParserRuleCall_1_4_0; }

		//';'
		public Keyword getSemicolonKeyword_1_5() { return cSemicolonKeyword_1_5; }

		//{SetEq} 'set' lhs_set=Arg '=' '{' l1=Expr (',' list+=Expr)* '}' ';'
		public Group getGroup_2() { return cGroup_2; }

		//{SetEq}
		public Action getSetEqAction_2_0() { return cSetEqAction_2_0; }

		//'set'
		public Keyword getSetKeyword_2_1() { return cSetKeyword_2_1; }

		//lhs_set=Arg
		public Assignment getLhs_setAssignment_2_2() { return cLhs_setAssignment_2_2; }

		//Arg
		public RuleCall getLhs_setArgParserRuleCall_2_2_0() { return cLhs_setArgParserRuleCall_2_2_0; }

		//'='
		public Keyword getEqualsSignKeyword_2_3() { return cEqualsSignKeyword_2_3; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_4() { return cLeftCurlyBracketKeyword_2_4; }

		//l1=Expr
		public Assignment getL1Assignment_2_5() { return cL1Assignment_2_5; }

		//Expr
		public RuleCall getL1ExprParserRuleCall_2_5_0() { return cL1ExprParserRuleCall_2_5_0; }

		//(',' list+=Expr)*
		public Group getGroup_2_6() { return cGroup_2_6; }

		//','
		public Keyword getCommaKeyword_2_6_0() { return cCommaKeyword_2_6_0; }

		//list+=Expr
		public Assignment getListAssignment_2_6_1() { return cListAssignment_2_6_1; }

		//Expr
		public RuleCall getListExprParserRuleCall_2_6_1_0() { return cListExprParserRuleCall_2_6_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_2_7() { return cRightCurlyBracketKeyword_2_7; }

		//';'
		public Keyword getSemicolonKeyword_2_8() { return cSemicolonKeyword_2_8; }

		//{RangeEq} 'range' lhs_range=Arg '=' '{' l1=Expr ',' l2=Expr '}' ';'
		public Group getGroup_3() { return cGroup_3; }

		//{RangeEq}
		public Action getRangeEqAction_3_0() { return cRangeEqAction_3_0; }

		//'range'
		public Keyword getRangeKeyword_3_1() { return cRangeKeyword_3_1; }

		//lhs_range=Arg
		public Assignment getLhs_rangeAssignment_3_2() { return cLhs_rangeAssignment_3_2; }

		//Arg
		public RuleCall getLhs_rangeArgParserRuleCall_3_2_0() { return cLhs_rangeArgParserRuleCall_3_2_0; }

		//'='
		public Keyword getEqualsSignKeyword_3_3() { return cEqualsSignKeyword_3_3; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_4() { return cLeftCurlyBracketKeyword_3_4; }

		//l1=Expr
		public Assignment getL1Assignment_3_5() { return cL1Assignment_3_5; }

		//Expr
		public RuleCall getL1ExprParserRuleCall_3_5_0() { return cL1ExprParserRuleCall_3_5_0; }

		//','
		public Keyword getCommaKeyword_3_6() { return cCommaKeyword_3_6; }

		//l2=Expr
		public Assignment getL2Assignment_3_7() { return cL2Assignment_3_7; }

		//Expr
		public RuleCall getL2ExprParserRuleCall_3_7_0() { return cL2ExprParserRuleCall_3_7_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3_8() { return cRightCurlyBracketKeyword_3_8; }

		//';'
		public Keyword getSemicolonKeyword_3_9() { return cSemicolonKeyword_3_9; }
	}

	public class IntervalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.umn.cs.crisys.safety.Safety.Interval");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Action cClosedIntervalAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cLowAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cLowExprParserRuleCall_0_0_2_0 = (RuleCall)cLowAssignment_0_0_2.eContents().get(0);
		private final Keyword cCommaKeyword_0_0_3 = (Keyword)cGroup_0_0.eContents().get(3);
		private final Assignment cHighAssignment_0_0_4 = (Assignment)cGroup_0_0.eContents().get(4);
		private final RuleCall cHighExprParserRuleCall_0_0_4_0 = (RuleCall)cHighAssignment_0_0_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_0_5 = (Keyword)cGroup_0_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cOpenLeftIntervalAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cLowAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cLowExprParserRuleCall_1_0_2_0 = (RuleCall)cLowAssignment_1_0_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Assignment cHighAssignment_1_0_4 = (Assignment)cGroup_1_0.eContents().get(4);
		private final RuleCall cHighExprParserRuleCall_1_0_4_0 = (RuleCall)cHighAssignment_1_0_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_5 = (Keyword)cGroup_1_0.eContents().get(5);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Action cOpenRightIntervalAction_2_0_0 = (Action)cGroup_2_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cLowAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cLowExprParserRuleCall_2_0_2_0 = (RuleCall)cLowAssignment_2_0_2.eContents().get(0);
		private final Keyword cCommaKeyword_2_0_3 = (Keyword)cGroup_2_0.eContents().get(3);
		private final Assignment cHighAssignment_2_0_4 = (Assignment)cGroup_2_0.eContents().get(4);
		private final RuleCall cHighExprParserRuleCall_2_0_4_0 = (RuleCall)cHighAssignment_2_0_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_0_5 = (Keyword)cGroup_2_0.eContents().get(5);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Action cOpenIntervalAction_3_0_0 = (Action)cGroup_3_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cLowAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cLowExprParserRuleCall_3_0_2_0 = (RuleCall)cLowAssignment_3_0_2.eContents().get(0);
		private final Keyword cCommaKeyword_3_0_3 = (Keyword)cGroup_3_0.eContents().get(3);
		private final Assignment cHighAssignment_3_0_4 = (Assignment)cGroup_3_0.eContents().get(4);
		private final RuleCall cHighExprParserRuleCall_3_0_4_0 = (RuleCall)cHighAssignment_3_0_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_0_5 = (Keyword)cGroup_3_0.eContents().get(5);
		
		//Interval:
		//	=> ({ClosedInterval} '[' low=Expr ',' high=Expr ']') | => ({OpenLeftInterval} '(' low=Expr ',' high=Expr ']') | =>
		//	({OpenRightInterval} '[' low=Expr ',' high=Expr ')') | => ({OpenInterval} '(' low=Expr ',' high=Expr ')');
		@Override public ParserRule getRule() { return rule; }

		//=> ({ClosedInterval} '[' low=Expr ',' high=Expr ']') | => ({OpenLeftInterval} '(' low=Expr ',' high=Expr ']') | =>
		//({OpenRightInterval} '[' low=Expr ',' high=Expr ')') | => ({OpenInterval} '(' low=Expr ',' high=Expr ')')
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> ({ClosedInterval} '[' low=Expr ',' high=Expr ']')
		public Group getGroup_0() { return cGroup_0; }

		//{ClosedInterval} '[' low=Expr ',' high=Expr ']'
		public Group getGroup_0_0() { return cGroup_0_0; }

		//{ClosedInterval}
		public Action getClosedIntervalAction_0_0_0() { return cClosedIntervalAction_0_0_0; }

		//'['
		public Keyword getLeftSquareBracketKeyword_0_0_1() { return cLeftSquareBracketKeyword_0_0_1; }

		//low=Expr
		public Assignment getLowAssignment_0_0_2() { return cLowAssignment_0_0_2; }

		//Expr
		public RuleCall getLowExprParserRuleCall_0_0_2_0() { return cLowExprParserRuleCall_0_0_2_0; }

		//','
		public Keyword getCommaKeyword_0_0_3() { return cCommaKeyword_0_0_3; }

		//high=Expr
		public Assignment getHighAssignment_0_0_4() { return cHighAssignment_0_0_4; }

		//Expr
		public RuleCall getHighExprParserRuleCall_0_0_4_0() { return cHighExprParserRuleCall_0_0_4_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_0_0_5() { return cRightSquareBracketKeyword_0_0_5; }

		//=> ({OpenLeftInterval} '(' low=Expr ',' high=Expr ']')
		public Group getGroup_1() { return cGroup_1; }

		//{OpenLeftInterval} '(' low=Expr ',' high=Expr ']'
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{OpenLeftInterval}
		public Action getOpenLeftIntervalAction_1_0_0() { return cOpenLeftIntervalAction_1_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_0_1() { return cLeftParenthesisKeyword_1_0_1; }

		//low=Expr
		public Assignment getLowAssignment_1_0_2() { return cLowAssignment_1_0_2; }

		//Expr
		public RuleCall getLowExprParserRuleCall_1_0_2_0() { return cLowExprParserRuleCall_1_0_2_0; }

		//','
		public Keyword getCommaKeyword_1_0_3() { return cCommaKeyword_1_0_3; }

		//high=Expr
		public Assignment getHighAssignment_1_0_4() { return cHighAssignment_1_0_4; }

		//Expr
		public RuleCall getHighExprParserRuleCall_1_0_4_0() { return cHighExprParserRuleCall_1_0_4_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_1_0_5() { return cRightSquareBracketKeyword_1_0_5; }

		//=> ({OpenRightInterval} '[' low=Expr ',' high=Expr ')')
		public Group getGroup_2() { return cGroup_2; }

		//{OpenRightInterval} '[' low=Expr ',' high=Expr ')'
		public Group getGroup_2_0() { return cGroup_2_0; }

		//{OpenRightInterval}
		public Action getOpenRightIntervalAction_2_0_0() { return cOpenRightIntervalAction_2_0_0; }

		//'['
		public Keyword getLeftSquareBracketKeyword_2_0_1() { return cLeftSquareBracketKeyword_2_0_1; }

		//low=Expr
		public Assignment getLowAssignment_2_0_2() { return cLowAssignment_2_0_2; }

		//Expr
		public RuleCall getLowExprParserRuleCall_2_0_2_0() { return cLowExprParserRuleCall_2_0_2_0; }

		//','
		public Keyword getCommaKeyword_2_0_3() { return cCommaKeyword_2_0_3; }

		//high=Expr
		public Assignment getHighAssignment_2_0_4() { return cHighAssignment_2_0_4; }

		//Expr
		public RuleCall getHighExprParserRuleCall_2_0_4_0() { return cHighExprParserRuleCall_2_0_4_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2_0_5() { return cRightParenthesisKeyword_2_0_5; }

		//=> ({OpenInterval} '(' low=Expr ',' high=Expr ')')
		public Group getGroup_3() { return cGroup_3; }

		//{OpenInterval} '(' low=Expr ',' high=Expr ')'
		public Group getGroup_3_0() { return cGroup_3_0; }

		//{OpenInterval}
		public Action getOpenIntervalAction_3_0_0() { return cOpenIntervalAction_3_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_3_0_1() { return cLeftParenthesisKeyword_3_0_1; }

		//low=Expr
		public Assignment getLowAssignment_3_0_2() { return cLowAssignment_3_0_2; }

		//Expr
		public RuleCall getLowExprParserRuleCall_3_0_2_0() { return cLowExprParserRuleCall_3_0_2_0; }

		//','
		public Keyword getCommaKeyword_3_0_3() { return cCommaKeyword_3_0_3; }

		//high=Expr
		public Assignment getHighAssignment_3_0_4() { return cHighAssignment_3_0_4; }

		//Expr
		public RuleCall getHighExprParserRuleCall_3_0_4_0() { return cHighExprParserRuleCall_3_0_4_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3_0_5() { return cRightParenthesisKeyword_3_0_5; }
	}
	
	
	private final AnnexLibraryElements pAnnexLibrary;
	private final AnnexSubclauseElements pAnnexSubclause;
	private final SafetyLibraryElements pSafetyLibrary;
	private final SafetySubclauseElements pSafetySubclause;
	private final SafetyContractElements pSafetyContract;
	private final ElementSafetyElements pElementSafety;
	private final SpecStatementElements pSpecStatement;
	private final AnalysisBehaviorElements pAnalysisBehavior;
	private final FaultSubcomponentElements pFaultSubcomponent;
	private final HWFaultSubcomponentElements pHWFaultSubcomponent;
	private final PropagationTypeConstraintElements pPropagationTypeConstraint;
	private final TemporalConstraintElements pTemporalConstraint;
	private final TriggerConditionElements pTriggerCondition;
	private final SafetyEqStatementElements pSafetyEqStatement;
	private final IntervalElements pInterval;
	
	private final Grammar grammar;

	private final AgreeGrammarAccess gaAgree;

	private final PropertiesGrammarAccess gaProperties;

	@Inject
	public SafetyGrammarAccess(GrammarProvider grammarProvider,
		AgreeGrammarAccess gaAgree,
		PropertiesGrammarAccess gaProperties) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaAgree = gaAgree;
		this.gaProperties = gaProperties;
		this.pAnnexLibrary = new AnnexLibraryElements();
		this.pAnnexSubclause = new AnnexSubclauseElements();
		this.pSafetyLibrary = new SafetyLibraryElements();
		this.pSafetySubclause = new SafetySubclauseElements();
		this.pSafetyContract = new SafetyContractElements();
		this.pElementSafety = new ElementSafetyElements();
		this.pSpecStatement = new SpecStatementElements();
		this.pAnalysisBehavior = new AnalysisBehaviorElements();
		this.pFaultSubcomponent = new FaultSubcomponentElements();
		this.pHWFaultSubcomponent = new HWFaultSubcomponentElements();
		this.pPropagationTypeConstraint = new PropagationTypeConstraintElements();
		this.pTemporalConstraint = new TemporalConstraintElements();
		this.pTriggerCondition = new TriggerConditionElements();
		this.pSafetyEqStatement = new SafetyEqStatementElements();
		this.pInterval = new IntervalElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.umn.cs.crisys.safety.Safety".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public AgreeGrammarAccess getAgreeGrammarAccess() {
		return gaAgree;
	}

	public PropertiesGrammarAccess getPropertiesGrammarAccess() {
		return gaProperties;
	}

	
	//@Override
	//AnnexLibrary:
	//	SafetyLibrary;
	public AnnexLibraryElements getAnnexLibraryAccess() {
		return pAnnexLibrary;
	}
	
	public ParserRule getAnnexLibraryRule() {
		return getAnnexLibraryAccess().getRule();
	}

	//@Override
	//AnnexSubclause:
	//	SafetySubclause;
	public AnnexSubclauseElements getAnnexSubclauseAccess() {
		return pAnnexSubclause;
	}
	
	public ParserRule getAnnexSubclauseRule() {
		return getAnnexSubclauseAccess().getRule();
	}

	//SafetyLibrary:
	//	{SafetyContractLibrary} contract=SafetyContract;
	public SafetyLibraryElements getSafetyLibraryAccess() {
		return pSafetyLibrary;
	}
	
	public ParserRule getSafetyLibraryRule() {
		return getSafetyLibraryAccess().getRule();
	}

	//SafetySubclause:
	//	{SafetyContractSubclause} contract=SafetyContract;
	public SafetySubclauseElements getSafetySubclauseAccess() {
		return pSafetySubclause;
	}
	
	public ParserRule getSafetySubclauseRule() {
		return getSafetySubclauseAccess().getRule();
	}

	//SafetyContract Contract:
	//	{SafetyContract} specs+=SpecStatement*;
	public SafetyContractElements getSafetyContractAccess() {
		return pSafetyContract;
	}
	
	public ParserRule getSafetyContractRule() {
		return getSafetyContractAccess().getRule();
	}

	//ElementSafety aadl2::Element:
	//	SafetyEqStatement
	//	| Expr
	//	| FaultSubcomponent;
	public ElementSafetyElements getElementSafetyAccess() {
		return pElementSafety;
	}
	
	public ParserRule getElementSafetyRule() {
		return getElementSafetyAccess().getRule();
	}

	//@Override
	//SpecStatement:
	//	{FaultStatement} 'fault' name=ID str=STRING? ':' faultDefName=DoubleDotRef
	//	'{' faultDefinitions+=FaultSubcomponent* '}'
	//	| {AnalysisStatement} 'analyze' ':' behavior=AnalysisBehavior
	//	| {HWFaultStatement} 'HW_fault' name=ID str=STRING? ':'
	//	'{' faultDefinitions+=HWFaultSubcomponent* '}'
	//	| {PropagateStatement} 'propagate_from' ':' '{' srcFaultList+=ID '@' srcComp_path+=[aadl2::NamedElement|DCID] (','
	//	srcFaultList+=ID '@' srcComp_path+=[aadl2::NamedElement|DCID])* '}'
	//	'to' '{' destFaultList+=ID '@' destComp_path+=[aadl2::NamedElement|DCID] (',' destFaultList+=ID '@'
	//	destComp_path+=[aadl2::NamedElement|DCID])* '}' ';'
	//	| {ActivationStatement} 'fault_activation' ':' agreeBoolVarName=ID ('@' agreeComp_Path=[aadl2::NamedElement|DCID])?
	//	'=' faultName=ID '@' faultComp_Path=[aadl2::NamedElement|DCID] ';';
	public SpecStatementElements getSpecStatementAccess() {
		return pSpecStatement;
	}
	
	public ParserRule getSpecStatementRule() {
		return getSpecStatementAccess().getRule();
	}

	//AnalysisBehavior:
	//	{FaultCountBehavior} 'max' maxFaults=INTEGER_LIT 'fault'
	//	| {ProbabilityBehavior} 'probability' probabilty=REAL_LIT;
	public AnalysisBehaviorElements getAnalysisBehaviorAccess() {
		return pAnalysisBehavior;
	}
	
	public ParserRule getAnalysisBehaviorRule() {
		return getAnalysisBehaviorAccess().getRule();
	}

	//FaultSubcomponent:
	//	{InputStatement} 'inputs' ':' fault_in+=ID '<-' nom_conn+=Expr (',' fault_in+=ID '<-' nom_conn+=Expr)* ';'
	//	| {OutputStatement} 'outputs' ':' nom_conn+=[aadl2::NamedElement|DCID] '<-' fault_out+=ID (','
	//	nom_conn+=[aadl2::NamedElement|DCID] '<-' fault_out+=ID)* ';'
	//	| {DurationStatement} 'duration' ':' tc=TemporalConstraint interv=Interval? ';'
	//	| {ProbabilityStatement} 'probability' ':' probability=REAL_LIT ';'
	//	| {TriggerStatement} 'enabled' cond=TriggerCondition ';'
	//	| {PropagationTypeStatement} 'propagate_type' ':' pty=PropagationTypeConstraint ';'
	//	| SafetyEqStatement;
	public FaultSubcomponentElements getFaultSubcomponentAccess() {
		return pFaultSubcomponent;
	}
	
	public ParserRule getFaultSubcomponentRule() {
		return getFaultSubcomponentAccess().getRule();
	}

	//HWFaultSubcomponent:
	//	{DurationStatement} 'duration' ':' tc=TemporalConstraint interv=Interval? ';'
	//	| {ProbabilityStatement} 'probability' ':' probability=REAL_LIT ';'
	//	| {PropagationTypeStatement} 'propagate_type' ':' pty=PropagationTypeConstraint ';';
	public HWFaultSubcomponentElements getHWFaultSubcomponentAccess() {
		return pHWFaultSubcomponent;
	}
	
	public ParserRule getHWFaultSubcomponentRule() {
		return getHWFaultSubcomponentAccess().getRule();
	}

	//PropagationTypeConstraint:
	//	{asymmetric} 'asymmetric'
	//	| {symmetric} 'symmetric';
	public PropagationTypeConstraintElements getPropagationTypeConstraintAccess() {
		return pPropagationTypeConstraint;
	}
	
	public ParserRule getPropagationTypeConstraintRule() {
		return getPropagationTypeConstraintAccess().getRule();
	}

	//TemporalConstraint:
	//	{PermanentConstraint} 'permanent'
	//	| {TransientConstraint} 'transient';
	public TemporalConstraintElements getTemporalConstraintAccess() {
		return pTemporalConstraint;
	}
	
	public ParserRule getTemporalConstraintRule() {
		return getTemporalConstraintAccess().getRule();
	}

	//TriggerCondition:
	//	{EnablerCondition} 'by' '{' exprList+=Expr ("," exprList+=Expr)* '}';
	public TriggerConditionElements getTriggerConditionAccess() {
		return pTriggerCondition;
	}
	
	public ParserRule getTriggerConditionRule() {
		return getTriggerConditionAccess().getRule();
	}

	//SafetyEqStatement:
	//	{EqValue} 'eq' (lhs+=Arg (',' lhs+=Arg)*) ('=' expr=Expr)? ';'
	//	| {IntervalEq} 'interval' lhs_int=Arg '=' interv=Interval ';'
	//	| {SetEq} 'set' lhs_set=Arg '=' '{' l1=Expr (',' list+=Expr)* '}' ';'
	//	| {RangeEq} 'range' lhs_range=Arg '=' '{' l1=Expr ',' l2=Expr '}' ';';
	public SafetyEqStatementElements getSafetyEqStatementAccess() {
		return pSafetyEqStatement;
	}
	
	public ParserRule getSafetyEqStatementRule() {
		return getSafetyEqStatementAccess().getRule();
	}

	//Interval:
	//	=> ({ClosedInterval} '[' low=Expr ',' high=Expr ']') | => ({OpenLeftInterval} '(' low=Expr ',' high=Expr ']') | =>
	//	({OpenRightInterval} '[' low=Expr ',' high=Expr ')') | => ({OpenInterval} '(' low=Expr ',' high=Expr ')');
	public IntervalElements getIntervalAccess() {
		return pInterval;
	}
	
	public ParserRule getIntervalRule() {
		return getIntervalAccess().getRule();
	}

	//NamedElement aadl2::NamedElement:
	//	Arg
	//	| NamedSpecStatement
	//	| FnDef
	//	| PropertyStatement
	//	| ConstStatement
	//	| EnumStatement
	//	| NodeDef
	//	| LinearizationDef
	//	| LibraryFnDef
	//	| RecordDef
	//	| NamedID;
	public AgreeGrammarAccess.NamedElementElements getNamedElementAccess() {
		return gaAgree.getNamedElementAccess();
	}
	
	public ParserRule getNamedElementRule() {
		return getNamedElementAccess().getRule();
	}

	//Element aadl2::Element:
	//	Expr
	//	| LinearizationInterval
	//	| Type
	//	| AgreeContract
	//	| super::SpecStatement
	//	| NodeStmt
	//	| NodeBodyExpr
	//	| EqStatement
	//	| InputStatement;
	public AgreeGrammarAccess.ElementElements getElementAccess() {
		return gaAgree.getElementAccess();
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//AgreeLibrary:
	//	{AgreeContractLibrary} contract=AgreeContract;
	public AgreeGrammarAccess.AgreeLibraryElements getAgreeLibraryAccess() {
		return gaAgree.getAgreeLibraryAccess();
	}
	
	public ParserRule getAgreeLibraryRule() {
		return getAgreeLibraryAccess().getRule();
	}

	//AgreeSubclause:
	//	{AgreeContractSubclause} contract=AgreeContract;
	public AgreeGrammarAccess.AgreeSubclauseElements getAgreeSubclauseAccess() {
		return gaAgree.getAgreeSubclauseAccess();
	}
	
	public ParserRule getAgreeSubclauseRule() {
		return getAgreeSubclauseAccess().getRule();
	}

	//AgreeContract Contract:
	//	{AgreeContract} specs+=super::SpecStatement*;
	public AgreeGrammarAccess.AgreeContractElements getAgreeContractAccess() {
		return gaAgree.getAgreeContractAccess();
	}
	
	public ParserRule getAgreeContractRule() {
		return getAgreeContractAccess().getRule();
	}

	//NamedSpecStatement:
	//	{AssumeStatement} 'assume' name=ID? str=STRING ':' (expr=Expr | pattern=PatternStatement) ';'
	//	| {GuaranteeStatement} 'guarantee' name=ID? str=STRING ':' (expr=Expr | pattern=PatternStatement) ';'
	//	| {AssertStatement} 'assert' (name=ID? str=STRING ':')? (expr=Expr | pattern=PatternStatement) ';'
	//	| {LemmaStatement} 'lemma' name=ID? str=STRING ':' (expr=Expr | pattern=PatternStatement) ';';
	public AgreeGrammarAccess.NamedSpecStatementElements getNamedSpecStatementAccess() {
		return gaAgree.getNamedSpecStatementAccess();
	}
	
	public ParserRule getNamedSpecStatementRule() {
		return getNamedSpecStatementAccess().getRule();
	}

	////The following are patterns from the CESAR RSL
	//PatternStatement:
	//	WheneverStatement
	//	| {AlwaysStatement} 'always' expr=Expr ';'
	//	| WhenStatement
	//	| RealTimeStatement;
	public AgreeGrammarAccess.PatternStatementElements getPatternStatementAccess() {
		return gaAgree.getPatternStatementAccess();
	}
	
	public ParserRule getPatternStatementRule() {
		return getPatternStatementAccess().getRule();
	}

	//WhenStatement:
	//	=> ({WhenHoldsStatement} 'when' condition=Expr 'holds') 'during'
	//	conditionInterval=TimeInterval event=Expr excl='exclusively'? 'occurs' ('during' eventInterval=TimeInterval)?
	//	| => ({WhenOccursStatment} 'when' condition=Expr 'occurs') times=Expr 'times' 'during' interval=TimeInterval
	//	excl='exclusively'? 'raises' event=Expr;
	public AgreeGrammarAccess.WhenStatementElements getWhenStatementAccess() {
		return gaAgree.getWhenStatementAccess();
	}
	
	public ParserRule getWhenStatementRule() {
		return getWhenStatementAccess().getRule();
	}

	//WheneverStatement:
	//	=> ({WheneverOccursStatement} 'whenever' cause=Expr 'occurs'
	//	effect=Expr excl='exclusively'? ('occur' | 'occurs')) ('during' interval=TimeInterval)?
	//	| => ({WheneverBecomesTrueStatement} 'whenever' cause=Expr 'becomes' 'true'
	//	effect=Expr excl='exclusively'? ('occur' | 'occurs')) ('during' interval=TimeInterval)?
	//	| => ({WheneverHoldsStatement} 'whenever' cause=Expr 'occurs'
	//	effect=Expr excl='exclusively'? 'holds') ('during' interval=TimeInterval)?
	//	| => ({WheneverImpliesStatement} 'whenever' cause=Expr 'occurs'
	//	lhs=Expr 'implies') rhs=Expr excl='exclusively'? ('during' interval=TimeInterval)?;
	public AgreeGrammarAccess.WheneverStatementElements getWheneverStatementAccess() {
		return gaAgree.getWheneverStatementAccess();
	}
	
	public ParserRule getWheneverStatementRule() {
		return getWheneverStatementAccess().getRule();
	}

	//RealTimeStatement:
	//	=> ({PeriodicStatement} 'condition' event=Expr 'occurs' 'each') period=Expr ('with' 'jitter' jitter=Expr)?
	//	| => ({SporadicStatement} 'condition' event=Expr 'occurs' 'sporadic') 'with' 'IAT' iat=Expr ('with' 'jitter'
	//	jitter=Expr)?;
	public AgreeGrammarAccess.RealTimeStatementElements getRealTimeStatementAccess() {
		return gaAgree.getRealTimeStatementAccess();
	}
	
	public ParserRule getRealTimeStatementRule() {
		return getRealTimeStatementAccess().getRule();
	}

	//TimeInterval:
	//	=> ({ClosedTimeInterval} '[' low=Expr ',' high=Expr ']') | => ({OpenLeftTimeInterval} '(' low=Expr ',' high=Expr ']')
	//	| => ({OpenRightTimeInterval} '[' low=Expr ',' high=Expr ')') | => ({OpenTimeInterval} '(' low=Expr ',' high=Expr
	//	')');
	public AgreeGrammarAccess.TimeIntervalElements getTimeIntervalAccess() {
		return gaAgree.getTimeIntervalAccess();
	}
	
	public ParserRule getTimeIntervalRule() {
		return getTimeIntervalAccess().getRule();
	}

	//SynchStatement:
	//	{SynchStatement} 'synchrony' ':' val=INTEGER_LIT (',' val2=INTEGER_LIT)? sim=('simult' | 'no_simult')? ';'
	//	| {MNSynchStatement} 'synchrony' ':' (comp1+=[aadl2::NamedElement] ',' comp2+=[aadl2::NamedElement] ':'
	//	max+=INTEGER_LIT ',' min+=INTEGER_LIT)+ ';'
	//	| {CalenStatement} 'calendar' ':' els+=[aadl2::NamedElement] ("," els+=[aadl2::NamedElement])* ';'
	//	| {AsynchStatement} 'synchrony' ':' 'asynchronous' ';'
	//	| {LatchedStatement} 'synchrony' ':' 'latched' ';';
	public AgreeGrammarAccess.SynchStatementElements getSynchStatementAccess() {
		return gaAgree.getSynchStatementAccess();
	}
	
	public ParserRule getSynchStatementRule() {
		return getSynchStatementAccess().getRule();
	}

	//OrderStatement:
	//	'ordering' ':' comps+=[aadl2::NamedElement] ("," comps+=[aadl2::NamedElement])* ';';
	public AgreeGrammarAccess.OrderStatementElements getOrderStatementAccess() {
		return gaAgree.getOrderStatementAccess();
	}
	
	public ParserRule getOrderStatementRule() {
		return getOrderStatementAccess().getRule();
	}

	//NamedAbstraction aadl2::NamedElement:
	//	Abstraction;
	public AgreeGrammarAccess.NamedAbstractionElements getNamedAbstractionAccess() {
		return gaAgree.getNamedAbstractionAccess();
	}
	
	public ParserRule getNamedAbstractionRule() {
		return getNamedAbstractionAccess().getRule();
	}

	//Abstraction:
	//	LinearizationDef
	//	| LibraryFnDef
	//	| FnDef
	//	| NodeDef;
	public AgreeGrammarAccess.AbstractionElements getAbstractionAccess() {
		return gaAgree.getAbstractionAccess();
	}
	
	public ParserRule getAbstractionRule() {
		return getAbstractionAccess().getRule();
	}

	//PropertyStatement:
	//	'property' name=ID '=' expr=Expr ';';
	public AgreeGrammarAccess.PropertyStatementElements getPropertyStatementAccess() {
		return gaAgree.getPropertyStatementAccess();
	}
	
	public ParserRule getPropertyStatementRule() {
		return getPropertyStatementAccess().getRule();
	}

	//ConstStatement:
	//	'const' name=ID ':' type=Type '=' expr=Expr ';';
	public AgreeGrammarAccess.ConstStatementElements getConstStatementAccess() {
		return gaAgree.getConstStatementAccess();
	}
	
	public ParserRule getConstStatementRule() {
		return getConstStatementAccess().getRule();
	}

	////this should really be an "Arg"
	//EqStatement:
	//	'eq' (lhs+=Arg (',' lhs+=Arg)*) ('=' expr=Expr)? ';';
	public AgreeGrammarAccess.EqStatementElements getEqStatementAccess() {
		return gaAgree.getEqStatementAccess();
	}
	
	public ParserRule getEqStatementRule() {
		return getEqStatementAccess().getRule();
	}

	//InputStatement:
	//	'agree_input' (lhs+=Arg (',' lhs+=Arg)*) ';';
	public AgreeGrammarAccess.InputStatementElements getInputStatementAccess() {
		return gaAgree.getInputStatementAccess();
	}
	
	public ParserRule getInputStatementRule() {
		return getInputStatementAccess().getRule();
	}

	//AssignStatement:
	//	'assign' id=[aadl2::NamedElement|QCPREF] '=' expr=Expr ';';
	public AgreeGrammarAccess.AssignStatementElements getAssignStatementAccess() {
		return gaAgree.getAssignStatementAccess();
	}
	
	public ParserRule getAssignStatementRule() {
		return getAssignStatementAccess().getRule();
	}

	//FnDef:
	//	'fun' name=ID '(' args+=Arg (',' args+=Arg)* ')' ':' type=Type '=' expr=Expr ';';
	public AgreeGrammarAccess.FnDefElements getFnDefAccess() {
		return gaAgree.getFnDefAccess();
	}
	
	public ParserRule getFnDefRule() {
		return getFnDefAccess().getRule();
	}

	//LibraryFnDef:
	//	'external' name=ID '(' args+=Arg (',' args+=Arg)* ')' ':' type=Type ';';
	public AgreeGrammarAccess.LibraryFnDefElements getLibraryFnDefAccess() {
		return gaAgree.getLibraryFnDefAccess();
	}
	
	public ParserRule getLibraryFnDefRule() {
		return getLibraryFnDefAccess().getRule();
	}

	//LinearizationDef:
	//	'linearization' name=ID '(' args+=Arg (',' args+=Arg)* ')'
	//	'over' '[' intervals+=LinearizationInterval (',' intervals+=LinearizationInterval)* ']' ('within' precision=Expr)?
	//	':' exprBody=Expr ';';
	public AgreeGrammarAccess.LinearizationDefElements getLinearizationDefAccess() {
		return gaAgree.getLinearizationDefAccess();
	}
	
	public ParserRule getLinearizationDefRule() {
		return getLinearizationDefAccess().getRule();
	}

	//LinearizationInterval:
	//	start=Expr '..' end=Expr;
	public AgreeGrammarAccess.LinearizationIntervalElements getLinearizationIntervalAccess() {
		return gaAgree.getLinearizationIntervalAccess();
	}
	
	public ParserRule getLinearizationIntervalRule() {
		return getLinearizationIntervalAccess().getRule();
	}

	//NodeDef:
	//	'node' name=ID '(' (args+=Arg (',' args+=Arg)*)? ')' 'returns'
	//	'(' (rets+=Arg (',' rets+=Arg)*)? ')' ';'
	//	nodeBody=NodeBodyExpr;
	public AgreeGrammarAccess.NodeDefElements getNodeDefAccess() {
		return gaAgree.getNodeDefAccess();
	}
	
	public ParserRule getNodeDefRule() {
		return getNodeDefAccess().getRule();
	}

	//NodeBodyExpr:
	//	('var' (locs+=Arg ';')+)?
	//	'let'
	//	stmts+=NodeStmt+
	//	'tel' ';';
	public AgreeGrammarAccess.NodeBodyExprElements getNodeBodyExprAccess() {
		return gaAgree.getNodeBodyExprAccess();
	}
	
	public ParserRule getNodeBodyExprRule() {
		return getNodeBodyExprAccess().getRule();
	}

	//NodeStmt:
	//	{NodeEq} lhs+=[Arg] (',' lhs+=[Arg])* '=' expr=Expr ';'
	//	| {NodeLemma} 'lemma' str=STRING ':' expr=Expr ';';
	public AgreeGrammarAccess.NodeStmtElements getNodeStmtAccess() {
		return gaAgree.getNodeStmtAccess();
	}
	
	public ParserRule getNodeStmtRule() {
		return getNodeStmtAccess().getRule();
	}

	//Arg:
	//	=> (name=ID ':' type=Type);
	public AgreeGrammarAccess.ArgElements getArgAccess() {
		return gaAgree.getArgAccess();
	}
	
	public ParserRule getArgRule() {
		return getArgAccess().getRule();
	}

	//Type:
	//	BaseType => ({ArrayType.stem=current} '[' size=INTEGER_LIT ']')*;
	public AgreeGrammarAccess.TypeElements getTypeAccess() {
		return gaAgree.getTypeAccess();
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//BaseType Type:
	//	{PrimType} name=primTypes ('[' lowNeg='-'? rangeLow=(INTEGER_LIT | REAL_LIT) ',' highNeg='-'? rangeHigh=(INTEGER_LIT
	//	| REAL_LIT) ']')?
	//	| DoubleDotRef;
	public AgreeGrammarAccess.BaseTypeElements getBaseTypeAccess() {
		return gaAgree.getBaseTypeAccess();
	}
	
	public ParserRule getBaseTypeRule() {
		return getBaseTypeAccess().getRule();
	}

	//primTypes:
	//	'real' | 'bool' | 'int';
	public AgreeGrammarAccess.PrimTypesElements getPrimTypesAccess() {
		return gaAgree.getPrimTypesAccess();
	}
	
	public ParserRule getPrimTypesRule() {
		return getPrimTypesAccess().getRule();
	}

	//RecordDef:
	//	'type' name=ID '=' 'struct' '{' (args+=Arg (',' args+=Arg)*) '}' ';';
	public AgreeGrammarAccess.RecordDefElements getRecordDefAccess() {
		return gaAgree.getRecordDefAccess();
	}
	
	public ParserRule getRecordDefRule() {
		return getRecordDefAccess().getRule();
	}

	//EnumStatement:
	//	'enum' name=ID '=' '{' enums+=NamedID (',' enums+=NamedID)* '}' ';';
	public AgreeGrammarAccess.EnumStatementElements getEnumStatementAccess() {
		return gaAgree.getEnumStatementAccess();
	}
	
	public ParserRule getEnumStatementRule() {
		return getEnumStatementAccess().getRule();
	}

	//Expr:
	//	ForallExpr;
	public AgreeGrammarAccess.ExprElements getExprAccess() {
		return gaAgree.getExprAccess();
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//ForallExpr Expr:
	//	{ForallExpr} 'forall' binding=NamedID 'in' array=Expr ',' expr=Expr
	//	| ExistsExpr;
	public AgreeGrammarAccess.ForallExprElements getForallExprAccess() {
		return gaAgree.getForallExprAccess();
	}
	
	public ParserRule getForallExprRule() {
		return getForallExprAccess().getRule();
	}

	//ExistsExpr Expr:
	//	{ExistsExpr} 'exists' binding=NamedID 'in' array=Expr ',' expr=Expr
	//	| FlatmapExpr;
	public AgreeGrammarAccess.ExistsExprElements getExistsExprAccess() {
		return gaAgree.getExistsExprAccess();
	}
	
	public ParserRule getExistsExprRule() {
		return getExistsExprAccess().getRule();
	}

	//FlatmapExpr Expr:
	//	{FlatmapExpr} 'flatmap' binding=NamedID 'in' array=Expr ',' expr=Expr
	//	| FoldLeftExpr;
	public AgreeGrammarAccess.FlatmapExprElements getFlatmapExprAccess() {
		return gaAgree.getFlatmapExprAccess();
	}
	
	public ParserRule getFlatmapExprRule() {
		return getFlatmapExprAccess().getRule();
	}

	//FoldLeftExpr Expr:
	//	{FoldLeftExpr} 'foldl' binding=NamedID 'in' array=Expr 'into' accumulator=NamedID '=' initial=Expr ',' expr=Expr
	//	| FoldRightExpr;
	public AgreeGrammarAccess.FoldLeftExprElements getFoldLeftExprAccess() {
		return gaAgree.getFoldLeftExprAccess();
	}
	
	public ParserRule getFoldLeftExprRule() {
		return getFoldLeftExprAccess().getRule();
	}

	//FoldRightExpr Expr:
	//	{FoldRightExpr} 'foldr' binding=NamedID 'in' array=Expr 'into' accumulator=NamedID '=' initial=Expr ',' expr=Expr
	//	| ArrowExpr;
	public AgreeGrammarAccess.FoldRightExprElements getFoldRightExprAccess() {
		return gaAgree.getFoldRightExprAccess();
	}
	
	public ParserRule getFoldRightExprRule() {
		return getFoldRightExprAccess().getRule();
	}

	//ArrowExpr Expr:
	//	ImpliesExpr (=> ({BinaryExpr.left=current} op='->') right=ArrowExpr)?;
	public AgreeGrammarAccess.ArrowExprElements getArrowExprAccess() {
		return gaAgree.getArrowExprAccess();
	}
	
	public ParserRule getArrowExprRule() {
		return getArrowExprAccess().getRule();
	}

	//ImpliesExpr Expr:
	//	EquivExpr (=> ({BinaryExpr.left=current} op='=>') right=ImpliesExpr)?;
	public AgreeGrammarAccess.ImpliesExprElements getImpliesExprAccess() {
		return gaAgree.getImpliesExprAccess();
	}
	
	public ParserRule getImpliesExprRule() {
		return getImpliesExprAccess().getRule();
	}

	//EquivExpr Expr:
	//	OrExpr (=> ({BinaryExpr.left=current} op='<=>') right=OrExpr)?;
	public AgreeGrammarAccess.EquivExprElements getEquivExprAccess() {
		return gaAgree.getEquivExprAccess();
	}
	
	public ParserRule getEquivExprRule() {
		return getEquivExprAccess().getRule();
	}

	//OrExpr Expr:
	//	AndExpr (=> ({BinaryExpr.left=current} op='or') right=AndExpr)*;
	public AgreeGrammarAccess.OrExprElements getOrExprAccess() {
		return gaAgree.getOrExprAccess();
	}
	
	public ParserRule getOrExprRule() {
		return getOrExprAccess().getRule();
	}

	//AndExpr Expr:
	//	RelateExpr (=> ({BinaryExpr.left=current} op='and') right=RelateExpr)*;
	public AgreeGrammarAccess.AndExprElements getAndExprAccess() {
		return gaAgree.getAndExprAccess();
	}
	
	public ParserRule getAndExprRule() {
		return getAndExprAccess().getRule();
	}

	//RelateOp:
	//	'<' | '<=' | '>' | '>=' | '=' | '<>' | '!=';
	public AgreeGrammarAccess.RelateOpElements getRelateOpAccess() {
		return gaAgree.getRelateOpAccess();
	}
	
	public ParserRule getRelateOpRule() {
		return getRelateOpAccess().getRule();
	}

	////todo remove `<>'
	//RelateExpr Expr:
	//	AddSubExpr (=> ({BinaryExpr.left=current} op=RelateOp) right=AddSubExpr)?;
	public AgreeGrammarAccess.RelateExprElements getRelateExprAccess() {
		return gaAgree.getRelateExprAccess();
	}
	
	public ParserRule getRelateExprRule() {
		return getRelateExprAccess().getRule();
	}

	//AddSubExpr Expr:
	//	MultDivExpr (=> ({BinaryExpr.left=current} op=('+' | '-')) right=MultDivExpr)*;
	public AgreeGrammarAccess.AddSubExprElements getAddSubExprAccess() {
		return gaAgree.getAddSubExprAccess();
	}
	
	public ParserRule getAddSubExprRule() {
		return getAddSubExprAccess().getRule();
	}

	//MultDivExpr Expr:
	//	PowerExpr (=> ({BinaryExpr.left=current} op=('*' | '/' | 'div' | 'mod')) right=PowerExpr)*;
	public AgreeGrammarAccess.MultDivExprElements getMultDivExprAccess() {
		return gaAgree.getMultDivExprAccess();
	}
	
	public ParserRule getMultDivExprRule() {
		return getMultDivExprAccess().getRule();
	}

	////todo remove div
	//PowerExpr Expr:
	//	UnaryExpr (=> ({BinaryExpr.left=current} op='^') right=UnaryExpr)*;
	public AgreeGrammarAccess.PowerExprElements getPowerExprAccess() {
		return gaAgree.getPowerExprAccess();
	}
	
	public ParserRule getPowerExprRule() {
		return getPowerExprAccess().getRule();
	}

	//UnaryExpr Expr:
	//	{UnaryExpr} op=('-' | 'not') expr=UnaryExpr
	//	| IfThenElseExpr;
	public AgreeGrammarAccess.UnaryExprElements getUnaryExprAccess() {
		return gaAgree.getUnaryExprAccess();
	}
	
	public ParserRule getUnaryExprRule() {
		return getUnaryExprAccess().getRule();
	}

	//IfThenElseExpr Expr:
	//	{IfThenElseExpr} 'if' a=Expr 'then' b=Expr 'else' c=Expr
	//	| PreDefFnExpr;
	public AgreeGrammarAccess.IfThenElseExprElements getIfThenElseExprAccess() {
		return gaAgree.getIfThenElseExprAccess();
	}
	
	public ParserRule getIfThenElseExprRule() {
		return getIfThenElseExprAccess().getRule();
	}

	//ComponentRef:
	//	{ThisRef} 'this' | DoubleDotRef;
	public AgreeGrammarAccess.ComponentRefElements getComponentRefAccess() {
		return gaAgree.getComponentRefAccess();
	}
	
	public ParserRule getComponentRefRule() {
		return getComponentRefAccess().getRule();
	}

	//PreDefFnExpr Expr:
	//	{PrevExpr} 'prev' '(' delay=Expr ',' init=Expr ')'
	//	| {GetPropertyExpr} 'Get_Property' '(' componentRef=ComponentRef ',' prop=[aadl2::NamedElement|QCLREF] ')'
	//	| ArrayUpdateExpr;
	public AgreeGrammarAccess.PreDefFnExprElements getPreDefFnExprAccess() {
		return gaAgree.getPreDefFnExprAccess();
	}
	
	public ParserRule getPreDefFnExprRule() {
		return getPreDefFnExprAccess().getRule();
	}

	//ArrayUpdateExpr Expr:
	//	RecordUpdateExpr (=> ({ArrayUpdateExpr.array=current}
	//	'[|' indices+=Expr ':=') valueExprs+=Expr (';' indices+=Expr ':=' valueExprs+=Expr)* '|]')?;
	public AgreeGrammarAccess.ArrayUpdateExprElements getArrayUpdateExprAccess() {
		return gaAgree.getArrayUpdateExprAccess();
	}
	
	public ParserRule getArrayUpdateExprRule() {
		return getArrayUpdateExprAccess().getRule();
	}

	//RecordUpdateExpr Expr:
	//	ArraySubExpr => ({RecordUpdateExpr.record=current} '{' key=[aadl2::NamedElement] ':=' expr=Expr '}')*;
	public AgreeGrammarAccess.RecordUpdateExprElements getRecordUpdateExprAccess() {
		return gaAgree.getRecordUpdateExprAccess();
	}
	
	public ParserRule getRecordUpdateExprRule() {
		return getRecordUpdateExprAccess().getRule();
	}

	//ArraySubExpr Expr:
	//	TagExpr => ({ArraySubExpr.expr=current} '[' index=Expr ']')*;
	public AgreeGrammarAccess.ArraySubExprElements getArraySubExprAccess() {
		return gaAgree.getArraySubExprAccess();
	}
	
	public ParserRule getArraySubExprRule() {
		return getArraySubExprAccess().getRule();
	}

	//TagExpr Expr:
	//	SelectionExpr ({TagExpr.stem=current} '.' tag=ReservedVarTag)?;
	public AgreeGrammarAccess.TagExprElements getTagExprAccess() {
		return gaAgree.getTagExprAccess();
	}
	
	public ParserRule getTagExprRule() {
		return getTagExprAccess().getRule();
	}

	//SelectionExpr Expr:
	//	TermExpr => ({SelectionExpr.target=current} '.' field=[aadl2::NamedElement])*;
	public AgreeGrammarAccess.SelectionExprElements getSelectionExprAccess() {
		return gaAgree.getSelectionExprAccess();
	}
	
	public ParserRule getSelectionExprRule() {
		return getSelectionExprAccess().getRule();
	}

	//TermExpr Expr:
	//	=> ({NamedElmExpr} elm=[aadl2::NamedElement|DCID]) | {TimeExpr} 'time'
	//	| {IndicesExpr} 'indices' '(' array=Expr ')'
	//	| => ({CallExpr} ref=DoubleDotRef '(') (args+=Expr (',' args+=Expr)*)? ')'
	//	| => ({RecordLitExpr} recordType=DoubleDotRef '{' args+=[aadl2::NamedElement] '=') argExpr+=Expr (';'
	//	args+=[aadl2::NamedElement] '=' argExpr+=Expr)* '}'
	//	| => ({EnumLitExpr} 'enum' '(') enumType=DoubleDotRef ',' value=ID ')'
	//	| ArrayLiteralExpr
	//	| {IntLitExpr} val=INTEGER_LIT
	//	| {PreExpr} 'pre' '(' expr=Expr ')'
	//	| {EventExpr} 'event' '(' port=Expr ')'
	//	| {LatchedExpr} 'latched' '(' expr=Expr ')'
	//	| {TimeOfExpr} 'timeof' '(' id=[aadl2::NamedElement] ')'
	//	| {TimeRiseExpr} 'timerise' '(' id=[aadl2::NamedElement] ')'
	//	| {TimeFallExpr} 'timefall' '(' id=[aadl2::NamedElement] ')'
	//	| {RealLitExpr} val=REAL_LIT
	//	| {BoolLitExpr} val=BooleanLiteral
	//	| {FloorCast} 'floor' '(' expr=Expr ')'
	//	| {RealCast} 'real' '(' expr=Expr ')'
	//	| '(' Expr ')';
	public AgreeGrammarAccess.TermExprElements getTermExprAccess() {
		return gaAgree.getTermExprAccess();
	}
	
	public ParserRule getTermExprRule() {
		return getTermExprAccess().getRule();
	}

	//ArrayLiteralExpr:
	//	=> ('[|' elems+=Expr '|]') |
	//	=> ('[|' elems+=Expr ',') elems+=Expr (',' elems+=Expr)* '|]';
	public AgreeGrammarAccess.ArrayLiteralExprElements getArrayLiteralExprAccess() {
		return gaAgree.getArrayLiteralExprAccess();
	}
	
	public ParserRule getArrayLiteralExprRule() {
		return getArrayLiteralExprAccess().getRule();
	}

	////ComplexExpr:
	////	(DoubleDotRef => ( {RecordExpr.record=current} '{' args+=[aadl2::NamedElement|ID] '=') argExpr+=Expr (';' args+=[aadl2::NamedElement|ID] '=' argExpr+=Expr)* '}') 
	////|	NestedDotID
	////	(=> ({FnCallExpr.fn=current} '(') (args+=Expr (',' args+=Expr)*)? ')')?
	////;
	//DoubleDotRef:
	//	elm=[aadl2::NamedElement|QCPREF];
	public AgreeGrammarAccess.DoubleDotRefElements getDoubleDotRefAccess() {
		return gaAgree.getDoubleDotRefAccess();
	}
	
	public ParserRule getDoubleDotRefRule() {
		return getDoubleDotRefAccess().getRule();
	}

	//QCPREF:
	//	(ID '::')* ID ('.' ID)?;
	public AgreeGrammarAccess.QCPREFElements getQCPREFAccess() {
		return gaAgree.getQCPREFAccess();
	}
	
	public ParserRule getQCPREFRule() {
		return getQCPREFAccess().getRule();
	}

	//DCID:
	//	(ID '::')* ID;
	public AgreeGrammarAccess.DCIDElements getDCIDAccess() {
		return gaAgree.getDCIDAccess();
	}
	
	public ParserRule getDCIDRule() {
		return getDCIDAccess().getRule();
	}

	//ReservedVarTag:
	//	'_REMOVE'
	//	| '_INSERT'
	//	| '_COUNT'
	//	| '_CLK';
	public AgreeGrammarAccess.ReservedVarTagElements getReservedVarTagAccess() {
		return gaAgree.getReservedVarTagAccess();
	}
	
	public ParserRule getReservedVarTagRule() {
		return getReservedVarTagAccess().getRule();
	}

	//NamedID:
	//	name=ID;
	public AgreeGrammarAccess.NamedIDElements getNamedIDAccess() {
		return gaAgree.getNamedIDAccess();
	}
	
	public ParserRule getNamedIDRule() {
		return getNamedIDAccess().getRule();
	}

	//JavaQualifiedName:
	//	ID ('.' ID)*;
	public AgreeGrammarAccess.JavaQualifiedNameElements getJavaQualifiedNameAccess() {
		return gaAgree.getJavaQualifiedNameAccess();
	}
	
	public ParserRule getJavaQualifiedNameRule() {
		return getJavaQualifiedNameAccess().getRule();
	}

	//PModel aadl2::Element:
	//	ContainedPropertyAssociation //| BasicPropertyAssociation | PropertyAssociation
	//;
	public PropertiesGrammarAccess.PModelElements getPModelAccess() {
		return gaProperties.getPModelAccess();
	}
	
	public ParserRule getPModelRule() {
		return getPModelAccess().getRule();
	}

	//// Properties
	//ContainedPropertyAssociation aadl2::PropertyAssociation:
	//	property=[aadl2::Property|QPREF] ('=>' | append?='+=>') constant?='constant'? (ownedValue+=OptionalModalPropertyValue
	//	(',' ownedValue+=OptionalModalPropertyValue)*) (AppliesToKeywords appliesTo+=ContainmentPath (','
	//	appliesTo+=ContainmentPath)*)? (InBindingKeywords '(' inBinding+=[aadl2::Classifier|QCREF] ')')?
	//	';';
	public PropertiesGrammarAccess.ContainedPropertyAssociationElements getContainedPropertyAssociationAccess() {
		return gaProperties.getContainedPropertyAssociationAccess();
	}
	
	public ParserRule getContainedPropertyAssociationRule() {
		return getContainedPropertyAssociationAccess().getRule();
	}

	//PropertyAssociation aadl2::PropertyAssociation:
	//	property=[aadl2::Property|QPREF] ('=>' | append?='+=>') constant?='constant'? (ownedValue+=OptionalModalPropertyValue
	//	(',' ownedValue+=OptionalModalPropertyValue)*) (InBindingKeywords '(' inBinding+=[aadl2::Classifier|QCREF] ')')?
	//	';';
	public PropertiesGrammarAccess.PropertyAssociationElements getPropertyAssociationAccess() {
		return gaProperties.getPropertyAssociationAccess();
	}
	
	public ParserRule getPropertyAssociationRule() {
		return getPropertyAssociationAccess().getRule();
	}

	//BasicPropertyAssociation aadl2::PropertyAssociation:
	//	property=[aadl2::Property|QPREF]
	//	'=>' ownedValue+=PropertyValue ';';
	public PropertiesGrammarAccess.BasicPropertyAssociationElements getBasicPropertyAssociationAccess() {
		return gaProperties.getBasicPropertyAssociationAccess();
	}
	
	public ParserRule getBasicPropertyAssociationRule() {
		return getBasicPropertyAssociationAccess().getRule();
	}

	//ContainmentPath aadl2::ContainedNamedElement:
	//	path=ContainmentPathElement
	//	//	( 'annex' containmentPathElement+=AnnexPath )?
	//;
	public PropertiesGrammarAccess.ContainmentPathElements getContainmentPathAccess() {
		return gaProperties.getContainmentPathAccess();
	}
	
	public ParserRule getContainmentPathRule() {
		return getContainmentPathAccess().getRule();
	}

	////AnnexPath returns aadl2::ContainmentPathElement:
	////	 namedElement=[aadl2::NamedElement|IDANNEXTEXT];
	//ModalPropertyValue aadl2::ModalPropertyValue:
	//	ownedValue=PropertyExpression
	//	InModesKeywords '('
	//	inMode+=[aadl2::Mode] (',' inMode+=[aadl2::Mode])*
	//	')';
	public PropertiesGrammarAccess.ModalPropertyValueElements getModalPropertyValueAccess() {
		return gaProperties.getModalPropertyValueAccess();
	}
	
	public ParserRule getModalPropertyValueRule() {
		return getModalPropertyValueAccess().getRule();
	}

	//OptionalModalPropertyValue aadl2::ModalPropertyValue:
	//	ownedValue=PropertyExpression (InModesKeywords '('
	//	inMode+=[aadl2::Mode] (',' inMode+=[aadl2::Mode])*
	//	')')?;
	public PropertiesGrammarAccess.OptionalModalPropertyValueElements getOptionalModalPropertyValueAccess() {
		return gaProperties.getOptionalModalPropertyValueAccess();
	}
	
	public ParserRule getOptionalModalPropertyValueRule() {
		return getOptionalModalPropertyValueAccess().getRule();
	}

	//// &&&&&&&&&& handling of in binding
	//PropertyValue aadl2::ModalPropertyValue:
	//	ownedValue=PropertyExpression;
	public PropertiesGrammarAccess.PropertyValueElements getPropertyValueAccess() {
		return gaProperties.getPropertyValueAccess();
	}
	
	public ParserRule getPropertyValueRule() {
		return getPropertyValueAccess().getRule();
	}

	//PropertyExpression aadl2::PropertyExpression:
	//	RecordTerm | ReferenceTerm | ComponentClassifierTerm
	//	| ComputedTerm | StringTerm | NumericRangeTerm
	//	| RealTerm | IntegerTerm
	//	| ListTerm
	//	| BooleanLiteral | LiteralorReferenceTerm;
	public PropertiesGrammarAccess.PropertyExpressionElements getPropertyExpressionAccess() {
		return gaProperties.getPropertyExpressionAccess();
	}
	
	public ParserRule getPropertyExpressionRule() {
		return getPropertyExpressionAccess().getRule();
	}

	//LiteralorReferenceTerm aadl2::NamedValue:
	//	namedValue=[aadl2::AbstractNamedValue|QPREF];
	public PropertiesGrammarAccess.LiteralorReferenceTermElements getLiteralorReferenceTermAccess() {
		return gaProperties.getLiteralorReferenceTermAccess();
	}
	
	public ParserRule getLiteralorReferenceTermRule() {
		return getLiteralorReferenceTermAccess().getRule();
	}

	//BooleanLiteral aadl2::BooleanLiteral:
	//	{aadl2::BooleanLiteral} (value?='true' | 'false');
	public PropertiesGrammarAccess.BooleanLiteralElements getBooleanLiteralAccess() {
		return gaProperties.getBooleanLiteralAccess();
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//ConstantValue aadl2::NamedValue:
	//	namedValue=[aadl2::PropertyConstant|QPREF];
	public PropertiesGrammarAccess.ConstantValueElements getConstantValueAccess() {
		return gaProperties.getConstantValueAccess();
	}
	
	public ParserRule getConstantValueRule() {
		return getConstantValueAccess().getRule();
	}

	//ReferenceTerm aadl2::ReferenceValue:
	//	'reference' '('
	//	path=ContainmentPathElement
	//	//	( 'annex' ID '{**' 
	//	//	containmentPathElement+=ContainmentPathElement
	//	//	( '.' containmentPathElement+=ContainmentPathElement)*
	//	//	'**}')?
	//	')';
	public PropertiesGrammarAccess.ReferenceTermElements getReferenceTermAccess() {
		return gaProperties.getReferenceTermAccess();
	}
	
	public ParserRule getReferenceTermRule() {
		return getReferenceTermAccess().getRule();
	}

	//RecordTerm aadl2::RecordValue:
	//	'['
	//	ownedFieldValue+=FieldPropertyAssociation+
	//	']';
	public PropertiesGrammarAccess.RecordTermElements getRecordTermAccess() {
		return gaProperties.getRecordTermAccess();
	}
	
	public ParserRule getRecordTermRule() {
		return getRecordTermAccess().getRule();
	}

	//OldRecordTerm aadl2::RecordValue:
	//	'('
	//	ownedFieldValue+=FieldPropertyAssociation+
	//	')';
	public PropertiesGrammarAccess.OldRecordTermElements getOldRecordTermAccess() {
		return gaProperties.getOldRecordTermAccess();
	}
	
	public ParserRule getOldRecordTermRule() {
		return getOldRecordTermAccess().getRule();
	}

	//ComputedTerm aadl2::ComputedValue:
	//	'compute' '('
	//	function=ID
	//	')';
	public PropertiesGrammarAccess.ComputedTermElements getComputedTermAccess() {
		return gaProperties.getComputedTermAccess();
	}
	
	public ParserRule getComputedTermRule() {
		return getComputedTermAccess().getRule();
	}

	//ComponentClassifierTerm aadl2::ClassifierValue:
	//	'classifier' '('
	//	classifier=[aadl2::ComponentClassifier|QCREF]
	//	')';
	public PropertiesGrammarAccess.ComponentClassifierTermElements getComponentClassifierTermAccess() {
		return gaProperties.getComponentClassifierTermAccess();
	}
	
	public ParserRule getComponentClassifierTermRule() {
		return getComponentClassifierTermAccess().getRule();
	}

	//ListTerm aadl2::ListValue:
	//	{aadl2::ListValue}
	//	'(' (ownedListElement+=PropertyExpression (',' ownedListElement+=PropertyExpression)*)?
	//	')';
	public PropertiesGrammarAccess.ListTermElements getListTermAccess() {
		return gaProperties.getListTermAccess();
	}
	
	public ParserRule getListTermRule() {
		return getListTermAccess().getRule();
	}

	//FieldPropertyAssociation aadl2::BasicPropertyAssociation:
	//	property=[aadl2::BasicProperty]
	//	'=>'
	//	ownedValue=PropertyExpression
	//	';';
	public PropertiesGrammarAccess.FieldPropertyAssociationElements getFieldPropertyAssociationAccess() {
		return gaProperties.getFieldPropertyAssociationAccess();
	}
	
	public ParserRule getFieldPropertyAssociationRule() {
		return getFieldPropertyAssociationAccess().getRule();
	}

	//// from AADL2
	//// need to add annex path element
	//ContainmentPathElement aadl2::ContainmentPathElement:
	//	(namedElement=[aadl2::NamedElement] arrayRange+=ArrayRange*) ('.' path=ContainmentPathElement)?
	//	//	 | 	 'annex' namedElement=[aadl2::NamedElement|ID]
	//;
	public PropertiesGrammarAccess.ContainmentPathElementElements getContainmentPathElementAccess() {
		return gaProperties.getContainmentPathElementAccess();
	}
	
	public ParserRule getContainmentPathElementRule() {
		return getContainmentPathElementAccess().getRule();
	}

	//ANNEXREF: // check what values are ok inside ** **
	//	'{' STAR STAR ID STAR STAR '}';
	public PropertiesGrammarAccess.ANNEXREFElements getANNEXREFAccess() {
		return gaProperties.getANNEXREFAccess();
	}
	
	public ParserRule getANNEXREFRule() {
		return getANNEXREFAccess().getRule();
	}

	//PlusMinus aadl2::OperationKind:
	//	'+' | '-';
	public PropertiesGrammarAccess.PlusMinusElements getPlusMinusAccess() {
		return gaProperties.getPlusMinusAccess();
	}
	
	public ParserRule getPlusMinusRule() {
		return getPlusMinusAccess().getRule();
	}

	//StringTerm aadl2::StringLiteral:
	//	value=NoQuoteString;
	public PropertiesGrammarAccess.StringTermElements getStringTermAccess() {
		return gaProperties.getStringTermAccess();
	}
	
	public ParserRule getStringTermRule() {
		return getStringTermAccess().getRule();
	}

	//NoQuoteString:
	//	STRING;
	public PropertiesGrammarAccess.NoQuoteStringElements getNoQuoteStringAccess() {
		return gaProperties.getNoQuoteStringAccess();
	}
	
	public ParserRule getNoQuoteStringRule() {
		return getNoQuoteStringAccess().getRule();
	}

	//ArrayRange aadl2::ArrayRange:
	//	{aadl2::ArrayRange}
	//	'[' lowerBound=INTVALUE ('..' upperBound=INTVALUE)?
	//	']';
	public PropertiesGrammarAccess.ArrayRangeElements getArrayRangeAccess() {
		return gaProperties.getArrayRangeAccess();
	}
	
	public ParserRule getArrayRangeRule() {
		return getArrayRangeAccess().getRule();
	}

	//SignedConstant aadl2::Operation:
	//	op=PlusMinus ownedPropertyExpression+=ConstantValue;
	public PropertiesGrammarAccess.SignedConstantElements getSignedConstantAccess() {
		return gaProperties.getSignedConstantAccess();
	}
	
	public ParserRule getSignedConstantRule() {
		return getSignedConstantAccess().getRule();
	}

	//IntegerTerm aadl2::IntegerLiteral:
	//	value=SignedInt unit=[aadl2::UnitLiteral]?;
	public PropertiesGrammarAccess.IntegerTermElements getIntegerTermAccess() {
		return gaProperties.getIntegerTermAccess();
	}
	
	public ParserRule getIntegerTermRule() {
		return getIntegerTermAccess().getRule();
	}

	//SignedInt aadl2::Integer:
	//	('+' | '-')? INTEGER_LIT;
	public PropertiesGrammarAccess.SignedIntElements getSignedIntAccess() {
		return gaProperties.getSignedIntAccess();
	}
	
	public ParserRule getSignedIntRule() {
		return getSignedIntAccess().getRule();
	}

	//RealTerm aadl2::RealLiteral:
	//	value=SignedReal unit=[aadl2::UnitLiteral]?;
	public PropertiesGrammarAccess.RealTermElements getRealTermAccess() {
		return gaProperties.getRealTermAccess();
	}
	
	public ParserRule getRealTermRule() {
		return getRealTermAccess().getRule();
	}

	//SignedReal aadl2::Real:
	//	('+' | '-')? REAL_LIT;
	public PropertiesGrammarAccess.SignedRealElements getSignedRealAccess() {
		return gaProperties.getSignedRealAccess();
	}
	
	public ParserRule getSignedRealRule() {
		return getSignedRealAccess().getRule();
	}

	//NumericRangeTerm aadl2::RangeValue:
	//	minimum=NumAlt //(RealTerm|IntegerTerm| SignedConstant | ConstantValue)  
	//	'..' maximum=NumAlt ('delta' delta=NumAlt //(RealTerm|IntegerTerm| SignedConstant | ConstantValue)
	//)?;
	public PropertiesGrammarAccess.NumericRangeTermElements getNumericRangeTermAccess() {
		return gaProperties.getNumericRangeTermAccess();
	}
	
	public ParserRule getNumericRangeTermRule() {
		return getNumericRangeTermAccess().getRule();
	}

	//NumAlt aadl2::PropertyExpression:
	//	RealTerm | IntegerTerm | SignedConstant | ConstantValue;
	public PropertiesGrammarAccess.NumAltElements getNumAltAccess() {
		return gaProperties.getNumAltAccess();
	}
	
	public ParserRule getNumAltRule() {
		return getNumAltAccess().getRule();
	}

	//AppliesToKeywords:
	//	'applies' 'to';
	public PropertiesGrammarAccess.AppliesToKeywordsElements getAppliesToKeywordsAccess() {
		return gaProperties.getAppliesToKeywordsAccess();
	}
	
	public ParserRule getAppliesToKeywordsRule() {
		return getAppliesToKeywordsAccess().getRule();
	}

	//InBindingKeywords:
	//	'in' 'binding';
	public PropertiesGrammarAccess.InBindingKeywordsElements getInBindingKeywordsAccess() {
		return gaProperties.getInBindingKeywordsAccess();
	}
	
	public ParserRule getInBindingKeywordsRule() {
		return getInBindingKeywordsAccess().getRule();
	}

	//InModesKeywords:
	//	'in' 'modes';
	public PropertiesGrammarAccess.InModesKeywordsElements getInModesKeywordsAccess() {
		return gaProperties.getInModesKeywordsAccess();
	}
	
	public ParserRule getInModesKeywordsRule() {
		return getInModesKeywordsAccess().getRule();
	}

	//terminal SL_COMMENT:
	//	'--' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaProperties.getSL_COMMENTRule();
	} 

	//INTVALUE aadl2::Integer:
	//	INTEGER_LIT //NUMERAL 	
	//;
	public PropertiesGrammarAccess.INTVALUEElements getINTVALUEAccess() {
		return gaProperties.getINTVALUEAccess();
	}
	
	public ParserRule getINTVALUERule() {
		return getINTVALUEAccess().getRule();
	}

	//terminal fragment EXPONENT:
	//	('e' | 'E') ('+' | '-')? DIGIT+;
	public TerminalRule getEXPONENTRule() {
		return gaProperties.getEXPONENTRule();
	} 

	//terminal fragment INT_EXPONENT:
	//	('e' | 'E') '+'? DIGIT+;
	public TerminalRule getINT_EXPONENTRule() {
		return gaProperties.getINT_EXPONENTRule();
	} 

	//terminal REAL_LIT:
	//	DIGIT+ ('_' DIGIT+)* ('.' DIGIT+ ('_' DIGIT+)* EXPONENT?);
	public TerminalRule getREAL_LITRule() {
		return gaProperties.getREAL_LITRule();
	} 

	//terminal INTEGER_LIT:
	//	DIGIT+ ('_' DIGIT+)* ('#' BASED_INTEGER '#' INT_EXPONENT? | INT_EXPONENT?);
	public TerminalRule getINTEGER_LITRule() {
		return gaProperties.getINTEGER_LITRule();
	} 

	//terminal fragment DIGIT:
	//	'0'..'9';
	public TerminalRule getDIGITRule() {
		return gaProperties.getDIGITRule();
	} 

	//terminal fragment EXTENDED_DIGIT:
	//	'0'..'9' | 'a'..'f' | 'A'..'F';
	public TerminalRule getEXTENDED_DIGITRule() {
		return gaProperties.getEXTENDED_DIGITRule();
	} 

	//terminal fragment BASED_INTEGER:
	//	EXTENDED_DIGIT ('_'? EXTENDED_DIGIT)*;
	public TerminalRule getBASED_INTEGERRule() {
		return gaProperties.getBASED_INTEGERRule();
	} 

	//QCLREF:
	//	ID '::' ID;
	public PropertiesGrammarAccess.QCLREFElements getQCLREFAccess() {
		return gaProperties.getQCLREFAccess();
	}
	
	public ParserRule getQCLREFRule() {
		return getQCLREFAccess().getRule();
	}

	//QPREF:
	//	ID ('::' ID)?;
	public PropertiesGrammarAccess.QPREFElements getQPREFAccess() {
		return gaProperties.getQPREFAccess();
	}
	
	public ParserRule getQPREFRule() {
		return getQPREFAccess().getRule();
	}

	//QCREF:
	//	(ID '::')* ID ('.' ID)?;
	public PropertiesGrammarAccess.QCREFElements getQCREFAccess() {
		return gaProperties.getQCREFAccess();
	}
	
	public ParserRule getQCREFRule() {
		return getQCREFAccess().getRule();
	}

	//STAR:
	//	'*';
	public PropertiesGrammarAccess.STARElements getSTARAccess() {
		return gaProperties.getSTARAccess();
	}
	
	public ParserRule getSTARRule() {
		return getSTARAccess().getRule();
	}

	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaProperties.getSTRINGRule();
	} 

	//terminal ID:
	//	('a'..'z'
	//	| 'A'..'Z') ('_'? ('a'..'z'
	//	| 'A'..'Z'
	//	| '0'..'9'))*;
	public TerminalRule getIDRule() {
		return gaProperties.getIDRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaProperties.getWSRule();
	} 
}
