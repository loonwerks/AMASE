/*
 * generated by Xtext
 */
package edu.umn.cs.crisys.safety.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import com.rockwellcollins.atc.agree.services.AgreeGrammarAccess;
import org.osate.xtext.aadl2.properties.services.PropertiesGrammarAccess;

@Singleton
public class SafetyGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AnnexLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.umn.cs.crisys.safety.Safety.AnnexLibrary");
		private final RuleCall cSafetyLibraryParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//@ Override //AnnexLibrary returns agree::AgreeLibrary:
		//AnnexLibrary aadl2::AnnexLibrary:
		//	SafetyLibrary;
		@Override public ParserRule getRule() { return rule; }

		//SafetyLibrary
		public RuleCall getSafetyLibraryParserRuleCall() { return cSafetyLibraryParserRuleCall; }
	}

	public class AnnexSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.umn.cs.crisys.safety.Safety.AnnexSubclause");
		private final RuleCall cSafetySubclauseParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//@ Override //AnnexSubclause returns agree::AgreeSubclause:
		//AnnexSubclause aadl2::AnnexSubclause:
		//	SafetySubclause;
		@Override public ParserRule getRule() { return rule; }

		//SafetySubclause
		public RuleCall getSafetySubclauseParserRuleCall() { return cSafetySubclauseParserRuleCall; }
	}

	public class SafetyLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.umn.cs.crisys.safety.Safety.SafetyLibrary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSafetyContractLibraryAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cContractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContractSafetyContractParserRuleCall_1_0 = (RuleCall)cContractAssignment_1.eContents().get(0);
		
		//SafetyLibrary:
		//	{SafetyContractLibrary} contract=SafetyContract;
		@Override public ParserRule getRule() { return rule; }

		//{SafetyContractLibrary} contract=SafetyContract
		public Group getGroup() { return cGroup; }

		//{SafetyContractLibrary}
		public Action getSafetyContractLibraryAction_0() { return cSafetyContractLibraryAction_0; }

		//contract=SafetyContract
		public Assignment getContractAssignment_1() { return cContractAssignment_1; }

		//SafetyContract
		public RuleCall getContractSafetyContractParserRuleCall_1_0() { return cContractSafetyContractParserRuleCall_1_0; }
	}

	public class SafetySubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.umn.cs.crisys.safety.Safety.SafetySubclause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSafetyContractSubclauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cContractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContractSafetyContractParserRuleCall_1_0 = (RuleCall)cContractAssignment_1.eContents().get(0);
		
		//SafetySubclause:
		//	{SafetyContractSubclause} contract=SafetyContract;
		@Override public ParserRule getRule() { return rule; }

		//{SafetyContractSubclause} contract=SafetyContract
		public Group getGroup() { return cGroup; }

		//{SafetyContractSubclause}
		public Action getSafetyContractSubclauseAction_0() { return cSafetyContractSubclauseAction_0; }

		//contract=SafetyContract
		public Assignment getContractAssignment_1() { return cContractAssignment_1; }

		//SafetyContract
		public RuleCall getContractSafetyContractParserRuleCall_1_0() { return cContractSafetyContractParserRuleCall_1_0; }
	}

	public class SafetyContractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.umn.cs.crisys.safety.Safety.SafetyContract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSafetyContractAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSpecsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSpecsSpecStatementParserRuleCall_1_0 = (RuleCall)cSpecsAssignment_1.eContents().get(0);
		
		//SafetyContract Contract:
		//	{SafetyContract} specs+=SpecStatement*;
		@Override public ParserRule getRule() { return rule; }

		//{SafetyContract} specs+=SpecStatement*
		public Group getGroup() { return cGroup; }

		//{SafetyContract}
		public Action getSafetyContractAction_0() { return cSafetyContractAction_0; }

		//specs+=SpecStatement*
		public Assignment getSpecsAssignment_1() { return cSpecsAssignment_1; }

		//SpecStatement
		public RuleCall getSpecsSpecStatementParserRuleCall_1_0() { return cSpecsSpecStatementParserRuleCall_1_0; }
	}

	public class SpecStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.umn.cs.crisys.safety.Safety.SpecStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFaultStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFaultKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStrAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStrSTRINGTerminalRuleCall_2_0 = (RuleCall)cStrAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFaultDefNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFaultDefNameExprParserRuleCall_4_0 = (RuleCall)cFaultDefNameAssignment_4.eContents().get(0);
		private final Assignment cFaultDefinitionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFaultDefinitionsFaultSubcomponentParserRuleCall_5_0 = (RuleCall)cFaultDefinitionsAssignment_5.eContents().get(0);
		
		//@ Override SpecStatement:
		//	{FaultStatement} 'fault' str=STRING ':' faultDefName=Expr
		//	faultDefinitions+=FaultSubcomponent*;
		@Override public ParserRule getRule() { return rule; }

		//{FaultStatement} 'fault' str=STRING ':' faultDefName=Expr faultDefinitions+=FaultSubcomponent*
		public Group getGroup() { return cGroup; }

		//{FaultStatement}
		public Action getFaultStatementAction_0() { return cFaultStatementAction_0; }

		//'fault'
		public Keyword getFaultKeyword_1() { return cFaultKeyword_1; }

		//str=STRING
		public Assignment getStrAssignment_2() { return cStrAssignment_2; }

		//STRING
		public RuleCall getStrSTRINGTerminalRuleCall_2_0() { return cStrSTRINGTerminalRuleCall_2_0; }

		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//faultDefName=Expr
		public Assignment getFaultDefNameAssignment_4() { return cFaultDefNameAssignment_4; }

		//Expr
		public RuleCall getFaultDefNameExprParserRuleCall_4_0() { return cFaultDefNameExprParserRuleCall_4_0; }

		//faultDefinitions+=FaultSubcomponent*
		public Assignment getFaultDefinitionsAssignment_5() { return cFaultDefinitionsAssignment_5; }

		//FaultSubcomponent
		public RuleCall getFaultDefinitionsFaultSubcomponentParserRuleCall_5_0() { return cFaultDefinitionsFaultSubcomponentParserRuleCall_5_0; }
	}

	public class FaultSubcomponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.umn.cs.crisys.safety.Safety.FaultSubcomponent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cInputStatementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cInputKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cIn_connAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cIn_connIDTerminalRuleCall_0_3_0 = (RuleCall)cIn_connAssignment_0_3.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cOut_connAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cOut_connIDTerminalRuleCall_0_5_0 = (RuleCall)cOut_connAssignment_0_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOutputStatementAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOutputKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cOut_connAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cOut_connIDTerminalRuleCall_1_3_0 = (RuleCall)cOut_connAssignment_1_3.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cNom_connAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cNom_connIDTerminalRuleCall_1_5_0 = (RuleCall)cNom_connAssignment_1_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cDurationStatementAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cDurationKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cColonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cTcAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cTcTemporalConstraintParserRuleCall_2_3_0 = (RuleCall)cTcAssignment_2_3.eContents().get(0);
		private final Assignment cIntervAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cIntervTimeIntervalParserRuleCall_2_4_0 = (RuleCall)cIntervAssignment_2_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cTriggerStatementAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cTriggerKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cColonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cCondAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cCondTriggerConditionParserRuleCall_3_3_0 = (RuleCall)cCondAssignment_3_3.eContents().get(0);
		private final Group cGroup_3_4 = (Group)cGroup_3.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Assignment cProbabilityAssignment_3_4_1 = (Assignment)cGroup_3_4.eContents().get(1);
		private final RuleCall cProbabilityREAL_LITTerminalRuleCall_3_4_1_0 = (RuleCall)cProbabilityAssignment_3_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_4_2 = (Keyword)cGroup_3_4.eContents().get(2);
		private final Keyword cSemicolonKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		private final RuleCall cSafetyEqStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//FaultSubcomponent:
		//	{InputStatement} 'input' ':' in_conn=ID '->' out_conn=ID ';'
		//	//{InputStatement} 'input' ':' in_connExpr=Expr '->' out_conn=ID ';' 
		//	| {OutputStatement} 'output' ':' out_conn=ID '->' nom_conn=ID ';'
		//	| {DurationStatement} 'duration' ':' tc=TemporalConstraint interv=TimeInterval ';'
		//	| {TriggerStatement} 'trigger' ':' cond=TriggerCondition ('[' probability=REAL_LIT ']')? ';'
		//	| SafetyEqStatement;
		@Override public ParserRule getRule() { return rule; }

		//{InputStatement} 'input' ':' in_conn=ID '->' out_conn=ID ';' //{InputStatement} 'input' ':' in_connExpr=Expr '->' out_conn=ID ';' 
		//| {OutputStatement} 'output' ':' out_conn=ID '->' nom_conn=ID ';' | {DurationStatement} 'duration' ':'
		//tc=TemporalConstraint interv=TimeInterval ';' | {TriggerStatement} 'trigger' ':' cond=TriggerCondition ('['
		//probability=REAL_LIT ']')? ';' | SafetyEqStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//{InputStatement} 'input' ':' in_conn=ID '->' out_conn=ID ';'
		public Group getGroup_0() { return cGroup_0; }

		//{InputStatement}
		public Action getInputStatementAction_0_0() { return cInputStatementAction_0_0; }

		//'input'
		public Keyword getInputKeyword_0_1() { return cInputKeyword_0_1; }

		//':'
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }

		//in_conn=ID
		public Assignment getIn_connAssignment_0_3() { return cIn_connAssignment_0_3; }

		//ID
		public RuleCall getIn_connIDTerminalRuleCall_0_3_0() { return cIn_connIDTerminalRuleCall_0_3_0; }

		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_4() { return cHyphenMinusGreaterThanSignKeyword_0_4; }

		//out_conn=ID
		public Assignment getOut_connAssignment_0_5() { return cOut_connAssignment_0_5; }

		//ID
		public RuleCall getOut_connIDTerminalRuleCall_0_5_0() { return cOut_connIDTerminalRuleCall_0_5_0; }

		//';'
		public Keyword getSemicolonKeyword_0_6() { return cSemicolonKeyword_0_6; }

		//{OutputStatement} 'output' ':' out_conn=ID '->' nom_conn=ID ';'
		public Group getGroup_1() { return cGroup_1; }

		//{OutputStatement}
		public Action getOutputStatementAction_1_0() { return cOutputStatementAction_1_0; }

		//'output'
		public Keyword getOutputKeyword_1_1() { return cOutputKeyword_1_1; }

		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//out_conn=ID
		public Assignment getOut_connAssignment_1_3() { return cOut_connAssignment_1_3; }

		//ID
		public RuleCall getOut_connIDTerminalRuleCall_1_3_0() { return cOut_connIDTerminalRuleCall_1_3_0; }

		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_4() { return cHyphenMinusGreaterThanSignKeyword_1_4; }

		//nom_conn=ID
		public Assignment getNom_connAssignment_1_5() { return cNom_connAssignment_1_5; }

		//ID
		public RuleCall getNom_connIDTerminalRuleCall_1_5_0() { return cNom_connIDTerminalRuleCall_1_5_0; }

		//';'
		public Keyword getSemicolonKeyword_1_6() { return cSemicolonKeyword_1_6; }

		//{DurationStatement} 'duration' ':' tc=TemporalConstraint interv=TimeInterval ';'
		public Group getGroup_2() { return cGroup_2; }

		//{DurationStatement}
		public Action getDurationStatementAction_2_0() { return cDurationStatementAction_2_0; }

		//'duration'
		public Keyword getDurationKeyword_2_1() { return cDurationKeyword_2_1; }

		//':'
		public Keyword getColonKeyword_2_2() { return cColonKeyword_2_2; }

		//tc=TemporalConstraint
		public Assignment getTcAssignment_2_3() { return cTcAssignment_2_3; }

		//TemporalConstraint
		public RuleCall getTcTemporalConstraintParserRuleCall_2_3_0() { return cTcTemporalConstraintParserRuleCall_2_3_0; }

		//interv=TimeInterval
		public Assignment getIntervAssignment_2_4() { return cIntervAssignment_2_4; }

		//TimeInterval
		public RuleCall getIntervTimeIntervalParserRuleCall_2_4_0() { return cIntervTimeIntervalParserRuleCall_2_4_0; }

		//';'
		public Keyword getSemicolonKeyword_2_5() { return cSemicolonKeyword_2_5; }

		//{TriggerStatement} 'trigger' ':' cond=TriggerCondition ('[' probability=REAL_LIT ']')? ';'
		public Group getGroup_3() { return cGroup_3; }

		//{TriggerStatement}
		public Action getTriggerStatementAction_3_0() { return cTriggerStatementAction_3_0; }

		//'trigger'
		public Keyword getTriggerKeyword_3_1() { return cTriggerKeyword_3_1; }

		//':'
		public Keyword getColonKeyword_3_2() { return cColonKeyword_3_2; }

		//cond=TriggerCondition
		public Assignment getCondAssignment_3_3() { return cCondAssignment_3_3; }

		//TriggerCondition
		public RuleCall getCondTriggerConditionParserRuleCall_3_3_0() { return cCondTriggerConditionParserRuleCall_3_3_0; }

		//('[' probability=REAL_LIT ']')?
		public Group getGroup_3_4() { return cGroup_3_4; }

		//'['
		public Keyword getLeftSquareBracketKeyword_3_4_0() { return cLeftSquareBracketKeyword_3_4_0; }

		//probability=REAL_LIT
		public Assignment getProbabilityAssignment_3_4_1() { return cProbabilityAssignment_3_4_1; }

		//REAL_LIT
		public RuleCall getProbabilityREAL_LITTerminalRuleCall_3_4_1_0() { return cProbabilityREAL_LITTerminalRuleCall_3_4_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_3_4_2() { return cRightSquareBracketKeyword_3_4_2; }

		//';'
		public Keyword getSemicolonKeyword_3_5() { return cSemicolonKeyword_3_5; }

		//SafetyEqStatement
		public RuleCall getSafetyEqStatementParserRuleCall_4() { return cSafetyEqStatementParserRuleCall_4; }
	}

	public class TemporalConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.umn.cs.crisys.safety.Safety.TemporalConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPermanentConstraintAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cPermanentKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cTransientConstraintAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cTransientKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//// Currently, these are represented as keywords. 
		//TemporalConstraint:
		//	{PermanentConstraint} 'permanent'
		//	| {TransientConstraint} 'transient';
		@Override public ParserRule getRule() { return rule; }

		//{PermanentConstraint} 'permanent' | {TransientConstraint} 'transient'
		public Alternatives getAlternatives() { return cAlternatives; }

		//{PermanentConstraint} 'permanent'
		public Group getGroup_0() { return cGroup_0; }

		//{PermanentConstraint}
		public Action getPermanentConstraintAction_0_0() { return cPermanentConstraintAction_0_0; }

		//'permanent'
		public Keyword getPermanentKeyword_0_1() { return cPermanentKeyword_0_1; }

		//{TransientConstraint} 'transient'
		public Group getGroup_1() { return cGroup_1; }

		//{TransientConstraint}
		public Action getTransientConstraintAction_1_0() { return cTransientConstraintAction_1_0; }

		//'transient'
		public Keyword getTransientKeyword_1_1() { return cTransientKeyword_1_1; }
	}

	public class TriggerConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.umn.cs.crisys.safety.Safety.TriggerCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cMustConditionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cMustKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cExprListAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cExprListExprParserRuleCall_0_3_0 = (RuleCall)cExprListAssignment_0_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cEnablerConditionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEnablerKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cExprListAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cExprListExprParserRuleCall_1_3_0 = (RuleCall)cExprListAssignment_1_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//// ' 
		//TriggerCondition:
		//	{MustCondition} 'must' '{' exprList+=Expr+ '}'
		//	| {EnablerCondition} 'enabler' '{' exprList+=Expr+ '}';
		@Override public ParserRule getRule() { return rule; }

		//{MustCondition} 'must' '{' exprList+=Expr+ '}' | {EnablerCondition} 'enabler' '{' exprList+=Expr+ '}'
		public Alternatives getAlternatives() { return cAlternatives; }

		//{MustCondition} 'must' '{' exprList+=Expr+ '}'
		public Group getGroup_0() { return cGroup_0; }

		//{MustCondition}
		public Action getMustConditionAction_0_0() { return cMustConditionAction_0_0; }

		//'must'
		public Keyword getMustKeyword_0_1() { return cMustKeyword_0_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_2() { return cLeftCurlyBracketKeyword_0_2; }

		//exprList+=Expr+
		public Assignment getExprListAssignment_0_3() { return cExprListAssignment_0_3; }

		//Expr
		public RuleCall getExprListExprParserRuleCall_0_3_0() { return cExprListExprParserRuleCall_0_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_0_4() { return cRightCurlyBracketKeyword_0_4; }

		//{EnablerCondition} 'enabler' '{' exprList+=Expr+ '}'
		public Group getGroup_1() { return cGroup_1; }

		//{EnablerCondition}
		public Action getEnablerConditionAction_1_0() { return cEnablerConditionAction_1_0; }

		//'enabler'
		public Keyword getEnablerKeyword_1_1() { return cEnablerKeyword_1_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_2() { return cLeftCurlyBracketKeyword_1_2; }

		//exprList+=Expr+
		public Assignment getExprListAssignment_1_3() { return cExprListAssignment_1_3; }

		//Expr
		public RuleCall getExprListExprParserRuleCall_1_3_0() { return cExprListExprParserRuleCall_1_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_1_4() { return cRightCurlyBracketKeyword_1_4; }
	}

	public class SafetyEqStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.umn.cs.crisys.safety.Safety.SafetyEqStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cEqValueAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cEqKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Assignment cLhsAssignment_0_2_0 = (Assignment)cGroup_0_2.eContents().get(0);
		private final RuleCall cLhsArgParserRuleCall_0_2_0_0 = (RuleCall)cLhsAssignment_0_2_0.eContents().get(0);
		private final Group cGroup_0_2_1 = (Group)cGroup_0_2.eContents().get(1);
		private final Keyword cCommaKeyword_0_2_1_0 = (Keyword)cGroup_0_2_1.eContents().get(0);
		private final Assignment cLhsAssignment_0_2_1_1 = (Assignment)cGroup_0_2_1.eContents().get(1);
		private final RuleCall cLhsArgParserRuleCall_0_2_1_1_0 = (RuleCall)cLhsAssignment_0_2_1_1.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cEqualsSignKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cExprAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_0_3_1_0 = (RuleCall)cExprAssignment_0_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIntervalEqAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cIntervaleqKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cLhs_intAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLhs_intIDTerminalRuleCall_1_2_0 = (RuleCall)cLhs_intAssignment_1_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cIntervAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cIntervTimeIntervalParserRuleCall_1_4_0 = (RuleCall)cIntervAssignment_1_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSetEqAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cSeteqKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cLhs_setAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cLhs_setIDTerminalRuleCall_2_2_0 = (RuleCall)cLhs_setAssignment_2_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cL1Assignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cL1INTEGER_LITTerminalRuleCall_2_5_0 = (RuleCall)cL1Assignment_2_5.eContents().get(0);
		private final Group cGroup_2_6 = (Group)cGroup_2.eContents().get(6);
		private final Keyword cCommaKeyword_2_6_0 = (Keyword)cGroup_2_6.eContents().get(0);
		private final Assignment cListAssignment_2_6_1 = (Assignment)cGroup_2_6.eContents().get(1);
		private final RuleCall cListINTEGER_LITTerminalRuleCall_2_6_1_0 = (RuleCall)cListAssignment_2_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_7 = (Keyword)cGroup_2.eContents().get(7);
		private final Keyword cSemicolonKeyword_2_8 = (Keyword)cGroup_2.eContents().get(8);
		
		//// An eq statement can be an agree eq statement ('eq'...) or 
		//// an interval or a set of discrete values.
		//// Add capability of integer range?
		//SafetyEqStatement:
		//	{EqValue} 'eq' (lhs+=Arg (',' lhs+=Arg)*) ('=' expr=Expr)? ';'
		//	| {IntervalEq} 'intervaleq' lhs_int=ID '=' interv=TimeInterval ';'
		//	| {SetEq} 'seteq' lhs_set=ID '=' '{' l1=INTEGER_LIT (',' list+=INTEGER_LIT)* '}' ';';
		@Override public ParserRule getRule() { return rule; }

		//{EqValue} 'eq' (lhs+=Arg (',' lhs+=Arg)*) ('=' expr=Expr)? ';' | {IntervalEq} 'intervaleq' lhs_int=ID '='
		//interv=TimeInterval ';' | {SetEq} 'seteq' lhs_set=ID '=' '{' l1=INTEGER_LIT (',' list+=INTEGER_LIT)* '}' ';'
		public Alternatives getAlternatives() { return cAlternatives; }

		//{EqValue} 'eq' (lhs+=Arg (',' lhs+=Arg)*) ('=' expr=Expr)? ';'
		public Group getGroup_0() { return cGroup_0; }

		//{EqValue}
		public Action getEqValueAction_0_0() { return cEqValueAction_0_0; }

		//'eq'
		public Keyword getEqKeyword_0_1() { return cEqKeyword_0_1; }

		//lhs+=Arg (',' lhs+=Arg)*
		public Group getGroup_0_2() { return cGroup_0_2; }

		//lhs+=Arg
		public Assignment getLhsAssignment_0_2_0() { return cLhsAssignment_0_2_0; }

		//Arg
		public RuleCall getLhsArgParserRuleCall_0_2_0_0() { return cLhsArgParserRuleCall_0_2_0_0; }

		//(',' lhs+=Arg)*
		public Group getGroup_0_2_1() { return cGroup_0_2_1; }

		//','
		public Keyword getCommaKeyword_0_2_1_0() { return cCommaKeyword_0_2_1_0; }

		//lhs+=Arg
		public Assignment getLhsAssignment_0_2_1_1() { return cLhsAssignment_0_2_1_1; }

		//Arg
		public RuleCall getLhsArgParserRuleCall_0_2_1_1_0() { return cLhsArgParserRuleCall_0_2_1_1_0; }

		//('=' expr=Expr)?
		public Group getGroup_0_3() { return cGroup_0_3; }

		//'='
		public Keyword getEqualsSignKeyword_0_3_0() { return cEqualsSignKeyword_0_3_0; }

		//expr=Expr
		public Assignment getExprAssignment_0_3_1() { return cExprAssignment_0_3_1; }

		//Expr
		public RuleCall getExprExprParserRuleCall_0_3_1_0() { return cExprExprParserRuleCall_0_3_1_0; }

		//';'
		public Keyword getSemicolonKeyword_0_4() { return cSemicolonKeyword_0_4; }

		//{IntervalEq} 'intervaleq' lhs_int=ID '=' interv=TimeInterval ';'
		public Group getGroup_1() { return cGroup_1; }

		//{IntervalEq}
		public Action getIntervalEqAction_1_0() { return cIntervalEqAction_1_0; }

		//'intervaleq'
		public Keyword getIntervaleqKeyword_1_1() { return cIntervaleqKeyword_1_1; }

		//lhs_int=ID
		public Assignment getLhs_intAssignment_1_2() { return cLhs_intAssignment_1_2; }

		//ID
		public RuleCall getLhs_intIDTerminalRuleCall_1_2_0() { return cLhs_intIDTerminalRuleCall_1_2_0; }

		//'='
		public Keyword getEqualsSignKeyword_1_3() { return cEqualsSignKeyword_1_3; }

		//interv=TimeInterval
		public Assignment getIntervAssignment_1_4() { return cIntervAssignment_1_4; }

		//TimeInterval
		public RuleCall getIntervTimeIntervalParserRuleCall_1_4_0() { return cIntervTimeIntervalParserRuleCall_1_4_0; }

		//';'
		public Keyword getSemicolonKeyword_1_5() { return cSemicolonKeyword_1_5; }

		//{SetEq} 'seteq' lhs_set=ID '=' '{' l1=INTEGER_LIT (',' list+=INTEGER_LIT)* '}' ';'
		public Group getGroup_2() { return cGroup_2; }

		//{SetEq}
		public Action getSetEqAction_2_0() { return cSetEqAction_2_0; }

		//'seteq'
		public Keyword getSeteqKeyword_2_1() { return cSeteqKeyword_2_1; }

		//lhs_set=ID
		public Assignment getLhs_setAssignment_2_2() { return cLhs_setAssignment_2_2; }

		//ID
		public RuleCall getLhs_setIDTerminalRuleCall_2_2_0() { return cLhs_setIDTerminalRuleCall_2_2_0; }

		//'='
		public Keyword getEqualsSignKeyword_2_3() { return cEqualsSignKeyword_2_3; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_4() { return cLeftCurlyBracketKeyword_2_4; }

		//l1=INTEGER_LIT
		public Assignment getL1Assignment_2_5() { return cL1Assignment_2_5; }

		//INTEGER_LIT
		public RuleCall getL1INTEGER_LITTerminalRuleCall_2_5_0() { return cL1INTEGER_LITTerminalRuleCall_2_5_0; }

		//(',' list+=INTEGER_LIT)*
		public Group getGroup_2_6() { return cGroup_2_6; }

		//','
		public Keyword getCommaKeyword_2_6_0() { return cCommaKeyword_2_6_0; }

		//list+=INTEGER_LIT
		public Assignment getListAssignment_2_6_1() { return cListAssignment_2_6_1; }

		//INTEGER_LIT
		public RuleCall getListINTEGER_LITTerminalRuleCall_2_6_1_0() { return cListINTEGER_LITTerminalRuleCall_2_6_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_2_7() { return cRightCurlyBracketKeyword_2_7; }

		//';'
		public Keyword getSemicolonKeyword_2_8() { return cSemicolonKeyword_2_8; }
	}
	
	
	private final AnnexLibraryElements pAnnexLibrary;
	private final AnnexSubclauseElements pAnnexSubclause;
	private final SafetyLibraryElements pSafetyLibrary;
	private final SafetySubclauseElements pSafetySubclause;
	private final SafetyContractElements pSafetyContract;
	private final SpecStatementElements pSpecStatement;
	private final FaultSubcomponentElements pFaultSubcomponent;
	private final TemporalConstraintElements pTemporalConstraint;
	private final TriggerConditionElements pTriggerCondition;
	private final SafetyEqStatementElements pSafetyEqStatement;
	
	private final Grammar grammar;

	private final AgreeGrammarAccess gaAgree;

	private final PropertiesGrammarAccess gaProperties;

	@Inject
	public SafetyGrammarAccess(GrammarProvider grammarProvider,
		AgreeGrammarAccess gaAgree,
		PropertiesGrammarAccess gaProperties) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaAgree = gaAgree;
		this.gaProperties = gaProperties;
		this.pAnnexLibrary = new AnnexLibraryElements();
		this.pAnnexSubclause = new AnnexSubclauseElements();
		this.pSafetyLibrary = new SafetyLibraryElements();
		this.pSafetySubclause = new SafetySubclauseElements();
		this.pSafetyContract = new SafetyContractElements();
		this.pSpecStatement = new SpecStatementElements();
		this.pFaultSubcomponent = new FaultSubcomponentElements();
		this.pTemporalConstraint = new TemporalConstraintElements();
		this.pTriggerCondition = new TriggerConditionElements();
		this.pSafetyEqStatement = new SafetyEqStatementElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.umn.cs.crisys.safety.Safety".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public AgreeGrammarAccess getAgreeGrammarAccess() {
		return gaAgree;
	}

	public PropertiesGrammarAccess getPropertiesGrammarAccess() {
		return gaProperties;
	}

	
	//@ Override //AnnexLibrary returns agree::AgreeLibrary:
	//AnnexLibrary aadl2::AnnexLibrary:
	//	SafetyLibrary;
	public AnnexLibraryElements getAnnexLibraryAccess() {
		return pAnnexLibrary;
	}
	
	public ParserRule getAnnexLibraryRule() {
		return getAnnexLibraryAccess().getRule();
	}

	//@ Override //AnnexSubclause returns agree::AgreeSubclause:
	//AnnexSubclause aadl2::AnnexSubclause:
	//	SafetySubclause;
	public AnnexSubclauseElements getAnnexSubclauseAccess() {
		return pAnnexSubclause;
	}
	
	public ParserRule getAnnexSubclauseRule() {
		return getAnnexSubclauseAccess().getRule();
	}

	//SafetyLibrary:
	//	{SafetyContractLibrary} contract=SafetyContract;
	public SafetyLibraryElements getSafetyLibraryAccess() {
		return pSafetyLibrary;
	}
	
	public ParserRule getSafetyLibraryRule() {
		return getSafetyLibraryAccess().getRule();
	}

	//SafetySubclause:
	//	{SafetyContractSubclause} contract=SafetyContract;
	public SafetySubclauseElements getSafetySubclauseAccess() {
		return pSafetySubclause;
	}
	
	public ParserRule getSafetySubclauseRule() {
		return getSafetySubclauseAccess().getRule();
	}

	//SafetyContract Contract:
	//	{SafetyContract} specs+=SpecStatement*;
	public SafetyContractElements getSafetyContractAccess() {
		return pSafetyContract;
	}
	
	public ParserRule getSafetyContractRule() {
		return getSafetyContractAccess().getRule();
	}

	//@ Override SpecStatement:
	//	{FaultStatement} 'fault' str=STRING ':' faultDefName=Expr
	//	faultDefinitions+=FaultSubcomponent*;
	public SpecStatementElements getSpecStatementAccess() {
		return pSpecStatement;
	}
	
	public ParserRule getSpecStatementRule() {
		return getSpecStatementAccess().getRule();
	}

	//FaultSubcomponent:
	//	{InputStatement} 'input' ':' in_conn=ID '->' out_conn=ID ';'
	//	//{InputStatement} 'input' ':' in_connExpr=Expr '->' out_conn=ID ';' 
	//	| {OutputStatement} 'output' ':' out_conn=ID '->' nom_conn=ID ';'
	//	| {DurationStatement} 'duration' ':' tc=TemporalConstraint interv=TimeInterval ';'
	//	| {TriggerStatement} 'trigger' ':' cond=TriggerCondition ('[' probability=REAL_LIT ']')? ';'
	//	| SafetyEqStatement;
	public FaultSubcomponentElements getFaultSubcomponentAccess() {
		return pFaultSubcomponent;
	}
	
	public ParserRule getFaultSubcomponentRule() {
		return getFaultSubcomponentAccess().getRule();
	}

	//// Currently, these are represented as keywords. 
	//TemporalConstraint:
	//	{PermanentConstraint} 'permanent'
	//	| {TransientConstraint} 'transient';
	public TemporalConstraintElements getTemporalConstraintAccess() {
		return pTemporalConstraint;
	}
	
	public ParserRule getTemporalConstraintRule() {
		return getTemporalConstraintAccess().getRule();
	}

	//// ' 
	//TriggerCondition:
	//	{MustCondition} 'must' '{' exprList+=Expr+ '}'
	//	| {EnablerCondition} 'enabler' '{' exprList+=Expr+ '}';
	public TriggerConditionElements getTriggerConditionAccess() {
		return pTriggerCondition;
	}
	
	public ParserRule getTriggerConditionRule() {
		return getTriggerConditionAccess().getRule();
	}

	//// An eq statement can be an agree eq statement ('eq'...) or 
	//// an interval or a set of discrete values.
	//// Add capability of integer range?
	//SafetyEqStatement:
	//	{EqValue} 'eq' (lhs+=Arg (',' lhs+=Arg)*) ('=' expr=Expr)? ';'
	//	| {IntervalEq} 'intervaleq' lhs_int=ID '=' interv=TimeInterval ';'
	//	| {SetEq} 'seteq' lhs_set=ID '=' '{' l1=INTEGER_LIT (',' list+=INTEGER_LIT)* '}' ';';
	public SafetyEqStatementElements getSafetyEqStatementAccess() {
		return pSafetyEqStatement;
	}
	
	public ParserRule getSafetyEqStatementRule() {
		return getSafetyEqStatementAccess().getRule();
	}

	//NamedElement aadl2::NamedElement:
	//	Arg
	//	| FnDefExpr
	//	| PropertyStatement
	//	| ConstStatement
	//	| EnumStatement
	//	| NodeDefExpr
	//	| LinearizationDefExpr
	//	| LibraryFnDefExpr
	//	| RecordDefExpr
	//	| NamedID;
	public AgreeGrammarAccess.NamedElementElements getNamedElementAccess() {
		return gaAgree.getNamedElementAccess();
	}
	
	public ParserRule getNamedElementRule() {
		return getNamedElementAccess().getRule();
	}

	//Element aadl2::Element:
	//	Expr
	//	| LinearizationInterval
	//	| Type
	//	| AgreeContract
	//	| super::SpecStatement
	//	| NodeStmt
	//	| NodeBodyExpr
	//	| EqStatement
	//	| InputStatement;
	public AgreeGrammarAccess.ElementElements getElementAccess() {
		return gaAgree.getElementAccess();
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//AgreeLibrary:
	//	{AgreeContractLibrary} contract=AgreeContract;
	public AgreeGrammarAccess.AgreeLibraryElements getAgreeLibraryAccess() {
		return gaAgree.getAgreeLibraryAccess();
	}
	
	public ParserRule getAgreeLibraryRule() {
		return getAgreeLibraryAccess().getRule();
	}

	//AgreeSubclause:
	//	{AgreeContractSubclause} contract=AgreeContract;
	public AgreeGrammarAccess.AgreeSubclauseElements getAgreeSubclauseAccess() {
		return gaAgree.getAgreeSubclauseAccess();
	}
	
	public ParserRule getAgreeSubclauseRule() {
		return getAgreeSubclauseAccess().getRule();
	}

	//AgreeContract Contract:
	//	{AgreeContract} specs+=super::SpecStatement*;
	public AgreeGrammarAccess.AgreeContractElements getAgreeContractAccess() {
		return gaAgree.getAgreeContractAccess();
	}
	
	public ParserRule getAgreeContractRule() {
		return getAgreeContractAccess().getRule();
	}

	////The following are patterns from the CESAR RSL
	//PatternStatement:
	//	WheneverStatement
	//	| {AlwaysStatement} 'always' expr=Expr ';'
	//	| WhenStatement
	//	| RealTimeStatement;
	public AgreeGrammarAccess.PatternStatementElements getPatternStatementAccess() {
		return gaAgree.getPatternStatementAccess();
	}
	
	public ParserRule getPatternStatementRule() {
		return getPatternStatementAccess().getRule();
	}

	//WhenStatement:
	//	=> ({WhenHoldsStatement} 'when' condition=Expr 'holds') 'during'
	//	conditionInterval=TimeInterval event=Expr excl='exclusively'? 'occurs' ('during' eventInterval=TimeInterval)?
	//	| => ({WhenOccursStatment} 'when' condition=Expr 'occurs') times=Expr 'times' 'during' interval=TimeInterval
	//	excl='exclusively'? 'raises' event=Expr;
	public AgreeGrammarAccess.WhenStatementElements getWhenStatementAccess() {
		return gaAgree.getWhenStatementAccess();
	}
	
	public ParserRule getWhenStatementRule() {
		return getWhenStatementAccess().getRule();
	}

	//WheneverStatement:
	//	=> ({WheneverOccursStatement} 'whenever' cause=Expr 'occurs'
	//	effect=Expr excl='exclusively'? ('occur' | 'occurs')) ('during' interval=TimeInterval)?
	//	| => ({WheneverBecomesTrueStatement} 'whenever' cause=Expr 'becomes' 'true'
	//	effect=Expr excl='exclusively'? ('occur' | 'occurs')) ('during' interval=TimeInterval)?
	//	| => ({WheneverHoldsStatement} 'whenever' cause=Expr 'occurs'
	//	effect=Expr excl='exclusively'? 'holds') ('during' interval=TimeInterval)?
	//	| => ({WheneverImpliesStatement} 'whenever' cause=Expr 'occurs'
	//	lhs=Expr 'implies') rhs=Expr excl='exclusively'? ('during' interval=TimeInterval)?;
	public AgreeGrammarAccess.WheneverStatementElements getWheneverStatementAccess() {
		return gaAgree.getWheneverStatementAccess();
	}
	
	public ParserRule getWheneverStatementRule() {
		return getWheneverStatementAccess().getRule();
	}

	//RealTimeStatement:
	//	=> ({PeriodicStatement} 'condition' event=Expr 'occurs' 'each') period=Expr ('with' 'jitter' jitter=Expr)?
	//	| => ({SporadicStatement} 'condition' event=Expr 'occurs' 'sporadic') 'with' 'IAT' iat=Expr ('with' 'jitter'
	//	jitter=Expr)?;
	public AgreeGrammarAccess.RealTimeStatementElements getRealTimeStatementAccess() {
		return gaAgree.getRealTimeStatementAccess();
	}
	
	public ParserRule getRealTimeStatementRule() {
		return getRealTimeStatementAccess().getRule();
	}

	//TimeInterval:
	//	=> ({ClosedTimeInterval} '[' low=Expr ',' high=Expr ']') | => ({OpenLeftTimeInterval} '(' low=Expr ',' high=Expr ']')
	//	| => ({OpenRightTimeInterval} '[' low=Expr ',' high=Expr ')') | => ({OpenTimeInterval} '(' low=Expr ',' high=Expr
	//	')');
	public AgreeGrammarAccess.TimeIntervalElements getTimeIntervalAccess() {
		return gaAgree.getTimeIntervalAccess();
	}
	
	public ParserRule getTimeIntervalRule() {
		return getTimeIntervalAccess().getRule();
	}

	//SynchStatement:
	//	{SynchStatement} 'synchrony' ':' val=INTEGER_LIT (',' val2=INTEGER_LIT)? sim=('simult' | 'no_simult')? ';'
	//	| {MNSynchStatement} 'synchrony' ':' (comp1+=[aadl2::NamedElement] ',' comp2+=[aadl2::NamedElement] ':'
	//	max+=INTEGER_LIT ',' min+=INTEGER_LIT)+ ';'
	//	| {CalenStatement} 'calendar' ':' els+=[aadl2::NamedElement] ("," els+=[aadl2::NamedElement])* ';'
	//	| {AsynchStatement} 'synchrony' ':' 'asynchronous' ';'
	//	| {LatchedStatement} 'synchrony' ':' 'latched' ';';
	public AgreeGrammarAccess.SynchStatementElements getSynchStatementAccess() {
		return gaAgree.getSynchStatementAccess();
	}
	
	public ParserRule getSynchStatementRule() {
		return getSynchStatementAccess().getRule();
	}

	//OrderStatement:
	//	'ordering' ':' comps+=[aadl2::NamedElement] ("," comps+=[aadl2::NamedElement])* ';';
	public AgreeGrammarAccess.OrderStatementElements getOrderStatementAccess() {
		return gaAgree.getOrderStatementAccess();
	}
	
	public ParserRule getOrderStatementRule() {
		return getOrderStatementAccess().getRule();
	}

	//NamedCallDef aadl2::NamedElement:
	//	CallDef;
	public AgreeGrammarAccess.NamedCallDefElements getNamedCallDefAccess() {
		return gaAgree.getNamedCallDefAccess();
	}
	
	public ParserRule getNamedCallDefRule() {
		return getNamedCallDefAccess().getRule();
	}

	//CallDef:
	//	LinearizationDefExpr
	//	| LibraryFnDefExpr
	//	| FnDefExpr
	//	| NodeDefExpr;
	public AgreeGrammarAccess.CallDefElements getCallDefAccess() {
		return gaAgree.getCallDefAccess();
	}
	
	public ParserRule getCallDefRule() {
		return getCallDefAccess().getRule();
	}

	//PropertyStatement:
	//	'property' name=ID '=' expr=Expr ';';
	public AgreeGrammarAccess.PropertyStatementElements getPropertyStatementAccess() {
		return gaAgree.getPropertyStatementAccess();
	}
	
	public ParserRule getPropertyStatementRule() {
		return getPropertyStatementAccess().getRule();
	}

	//ConstStatement:
	//	'const' name=ID ':' type=Type '=' expr=Expr ';';
	public AgreeGrammarAccess.ConstStatementElements getConstStatementAccess() {
		return gaAgree.getConstStatementAccess();
	}
	
	public ParserRule getConstStatementRule() {
		return getConstStatementAccess().getRule();
	}

	////this should really be an "Arg"
	//EnumStatement:
	//	'enum' name=ID '=' '{' enums+=NamedID (',' enums+=NamedID)* '}' ';';
	public AgreeGrammarAccess.EnumStatementElements getEnumStatementAccess() {
		return gaAgree.getEnumStatementAccess();
	}
	
	public ParserRule getEnumStatementRule() {
		return getEnumStatementAccess().getRule();
	}

	//EqStatement:
	//	'eq' (lhs+=Arg (',' lhs+=Arg)*) ('=' expr=Expr)? ';';
	public AgreeGrammarAccess.EqStatementElements getEqStatementAccess() {
		return gaAgree.getEqStatementAccess();
	}
	
	public ParserRule getEqStatementRule() {
		return getEqStatementAccess().getRule();
	}

	//InputStatement:
	//	'agree_input' (lhs+=Arg (',' lhs+=Arg)*) ';';
	public AgreeGrammarAccess.InputStatementElements getInputStatementAccess() {
		return gaAgree.getInputStatementAccess();
	}
	
	public ParserRule getInputStatementRule() {
		return getInputStatementAccess().getRule();
	}

	//AssignStatement:
	//	'assign' id=NestedDotID '=' expr=Expr ';';
	public AgreeGrammarAccess.AssignStatementElements getAssignStatementAccess() {
		return gaAgree.getAssignStatementAccess();
	}
	
	public ParserRule getAssignStatementRule() {
		return getAssignStatementAccess().getRule();
	}

	//FnDefExpr:
	//	'fun' name=ID '(' args+=Arg (',' args+=Arg)* ')' ':' type=Type '=' expr=Expr ';';
	public AgreeGrammarAccess.FnDefExprElements getFnDefExprAccess() {
		return gaAgree.getFnDefExprAccess();
	}
	
	public ParserRule getFnDefExprRule() {
		return getFnDefExprAccess().getRule();
	}

	//LibraryFnDefExpr:
	//	'external' name=ID '(' args+=Arg (',' args+=Arg)* ')' ':' type=Type ';';
	public AgreeGrammarAccess.LibraryFnDefExprElements getLibraryFnDefExprAccess() {
		return gaAgree.getLibraryFnDefExprAccess();
	}
	
	public ParserRule getLibraryFnDefExprRule() {
		return getLibraryFnDefExprAccess().getRule();
	}

	//LinearizationDefExpr:
	//	'linearization' name=ID '(' args+=Arg (',' args+=Arg)* ')'
	//	'over' '[' intervals+=LinearizationInterval (',' intervals+=LinearizationInterval)* ']' ('within' precision=Expr)? ':'
	//	exprBody=Expr ';';
	public AgreeGrammarAccess.LinearizationDefExprElements getLinearizationDefExprAccess() {
		return gaAgree.getLinearizationDefExprAccess();
	}
	
	public ParserRule getLinearizationDefExprRule() {
		return getLinearizationDefExprAccess().getRule();
	}

	//LinearizationInterval:
	//	start=Expr '..' end=Expr;
	public AgreeGrammarAccess.LinearizationIntervalElements getLinearizationIntervalAccess() {
		return gaAgree.getLinearizationIntervalAccess();
	}
	
	public ParserRule getLinearizationIntervalRule() {
		return getLinearizationIntervalAccess().getRule();
	}

	//NodeDefExpr:
	//	'node' name=ID '(' (args+=Arg (',' args+=Arg)*)? ')' 'returns'
	//	'(' (rets+=Arg (',' rets+=Arg)*)? ')' ';'
	//	nodeBody=NodeBodyExpr;
	public AgreeGrammarAccess.NodeDefExprElements getNodeDefExprAccess() {
		return gaAgree.getNodeDefExprAccess();
	}
	
	public ParserRule getNodeDefExprRule() {
		return getNodeDefExprAccess().getRule();
	}

	//NodeBodyExpr:
	//	('var' (locs+=Arg ';')+)?
	//	'let'
	//	stmts+=NodeStmt+
	//	'tel' ';';
	public AgreeGrammarAccess.NodeBodyExprElements getNodeBodyExprAccess() {
		return gaAgree.getNodeBodyExprAccess();
	}
	
	public ParserRule getNodeBodyExprRule() {
		return getNodeBodyExprAccess().getRule();
	}

	//NodeStmt:
	//	{NodeEq} lhs+=[Arg] (',' lhs+=[Arg])* '=' expr=Expr ';'
	//	| {NodeLemma} 'lemma' str=STRING ':' expr=Expr ';';
	public AgreeGrammarAccess.NodeStmtElements getNodeStmtAccess() {
		return gaAgree.getNodeStmtAccess();
	}
	
	public ParserRule getNodeStmtRule() {
		return getNodeStmtAccess().getRule();
	}

	//Arg:
	//	name=ID ':' type=Type;
	public AgreeGrammarAccess.ArgElements getArgAccess() {
		return gaAgree.getArgAccess();
	}
	
	public ParserRule getArgRule() {
		return getArgAccess().getRule();
	}

	//Type:
	//	{PrimType} string=primTypes ('[' lowNeg='-'? rangeLow=(INTEGER_LIT | REAL_LIT) ',' highNeg='-'? rangeHigh=(INTEGER_LIT
	//	| REAL_LIT) ']')?
	//	| {RecordType} record=NestedDotID;
	public AgreeGrammarAccess.TypeElements getTypeAccess() {
		return gaAgree.getTypeAccess();
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//primTypes:
	//	'real' | 'bool' | 'int';
	public AgreeGrammarAccess.PrimTypesElements getPrimTypesAccess() {
		return gaAgree.getPrimTypesAccess();
	}
	
	public ParserRule getPrimTypesRule() {
		return getPrimTypesAccess().getRule();
	}

	//RecordDefExpr:
	//	'type' name=ID '=' 'struct' '{' (args+=Arg (',' args+=Arg)*) '}' ';';
	public AgreeGrammarAccess.RecordDefExprElements getRecordDefExprAccess() {
		return gaAgree.getRecordDefExprAccess();
	}
	
	public ParserRule getRecordDefExprRule() {
		return getRecordDefExprAccess().getRule();
	}

	//Expr:
	//	ArrowExpr;
	public AgreeGrammarAccess.ExprElements getExprAccess() {
		return gaAgree.getExprAccess();
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//ArrowExpr Expr:
	//	ImpliesExpr (=> ({BinaryExpr.left=current} op='->') right=ArrowExpr)?;
	public AgreeGrammarAccess.ArrowExprElements getArrowExprAccess() {
		return gaAgree.getArrowExprAccess();
	}
	
	public ParserRule getArrowExprRule() {
		return getArrowExprAccess().getRule();
	}

	//ImpliesExpr Expr:
	//	EquivExpr (=> ({BinaryExpr.left=current} op='=>') right=ImpliesExpr)?;
	public AgreeGrammarAccess.ImpliesExprElements getImpliesExprAccess() {
		return gaAgree.getImpliesExprAccess();
	}
	
	public ParserRule getImpliesExprRule() {
		return getImpliesExprAccess().getRule();
	}

	//EquivExpr Expr:
	//	OrExpr (=> ({BinaryExpr.left=current} op='<=>') right=OrExpr)?;
	public AgreeGrammarAccess.EquivExprElements getEquivExprAccess() {
		return gaAgree.getEquivExprAccess();
	}
	
	public ParserRule getEquivExprRule() {
		return getEquivExprAccess().getRule();
	}

	//OrExpr Expr:
	//	AndExpr (=> ({BinaryExpr.left=current} op='or') right=AndExpr)*;
	public AgreeGrammarAccess.OrExprElements getOrExprAccess() {
		return gaAgree.getOrExprAccess();
	}
	
	public ParserRule getOrExprRule() {
		return getOrExprAccess().getRule();
	}

	//AndExpr Expr:
	//	RelateExpr (=> ({BinaryExpr.left=current} op='and') right=RelateExpr)*;
	public AgreeGrammarAccess.AndExprElements getAndExprAccess() {
		return gaAgree.getAndExprAccess();
	}
	
	public ParserRule getAndExprRule() {
		return getAndExprAccess().getRule();
	}

	//RelateOp:
	//	'<' | '<=' | '>' | '>=' | '=' | '<>' | '!=';
	public AgreeGrammarAccess.RelateOpElements getRelateOpAccess() {
		return gaAgree.getRelateOpAccess();
	}
	
	public ParserRule getRelateOpRule() {
		return getRelateOpAccess().getRule();
	}

	////todo remove `<>'
	//RelateExpr Expr:
	//	AddSubExpr (=> ({BinaryExpr.left=current} op=RelateOp) right=AddSubExpr)?;
	public AgreeGrammarAccess.RelateExprElements getRelateExprAccess() {
		return gaAgree.getRelateExprAccess();
	}
	
	public ParserRule getRelateExprRule() {
		return getRelateExprAccess().getRule();
	}

	//AddSubExpr Expr:
	//	MultDivExpr (=> ({BinaryExpr.left=current} op=('+' | '-')) right=MultDivExpr)*;
	public AgreeGrammarAccess.AddSubExprElements getAddSubExprAccess() {
		return gaAgree.getAddSubExprAccess();
	}
	
	public ParserRule getAddSubExprRule() {
		return getAddSubExprAccess().getRule();
	}

	//MultDivExpr Expr:
	//	PowerExpr (=> ({BinaryExpr.left=current} op=('*' | '/' | 'div' | 'mod')) right=PowerExpr)*;
	public AgreeGrammarAccess.MultDivExprElements getMultDivExprAccess() {
		return gaAgree.getMultDivExprAccess();
	}
	
	public ParserRule getMultDivExprRule() {
		return getMultDivExprAccess().getRule();
	}

	////todo remove div
	//PowerExpr Expr:
	//	UnaryExpr (=> ({BinaryExpr.left=current} op='^') right=UnaryExpr)*;
	public AgreeGrammarAccess.PowerExprElements getPowerExprAccess() {
		return gaAgree.getPowerExprAccess();
	}
	
	public ParserRule getPowerExprRule() {
		return getPowerExprAccess().getRule();
	}

	//UnaryExpr Expr:
	//	{UnaryExpr} op=('-' | 'not') expr=UnaryExpr
	//	| IfThenElseExpr;
	public AgreeGrammarAccess.UnaryExprElements getUnaryExprAccess() {
		return gaAgree.getUnaryExprAccess();
	}
	
	public ParserRule getUnaryExprRule() {
		return getUnaryExprAccess().getRule();
	}

	//IfThenElseExpr Expr:
	//	{IfThenElseExpr} 'if' a=Expr 'then' b=Expr 'else' c=Expr
	//	| PreDefFnExpr;
	public AgreeGrammarAccess.IfThenElseExprElements getIfThenElseExprAccess() {
		return gaAgree.getIfThenElseExprAccess();
	}
	
	public ParserRule getIfThenElseExprRule() {
		return getIfThenElseExprAccess().getRule();
	}

	//PreDefFnExpr Expr:
	//	{PrevExpr} 'prev' '(' delay=Expr ',' init=Expr ')'
	//	| {GetPropertyExpr} 'Get_Property' '(' component=Expr ',' prop=[aadl2::NamedElement|QCLREF] ')'
	//	| RecordUpdateExpr;
	public AgreeGrammarAccess.PreDefFnExprElements getPreDefFnExprAccess() {
		return gaAgree.getPreDefFnExprAccess();
	}
	
	public ParserRule getPreDefFnExprRule() {
		return getPreDefFnExprAccess().getRule();
	}

	//RecordUpdateExpr Expr:
	//	TermExpr => ({RecordUpdateExpr.record=current} ('{' args+=[aadl2::NamedElement] ':=' argExpr+=Expr '}')+)?;
	public AgreeGrammarAccess.RecordUpdateExprElements getRecordUpdateExprAccess() {
		return gaAgree.getRecordUpdateExprAccess();
	}
	
	public ParserRule getRecordUpdateExprRule() {
		return getRecordUpdateExprAccess().getRule();
	}

	//TermExpr Expr:
	//	{TimeExpr} 'time'
	//	| ComplexExpr
	//	| {IntLitExpr} val=INTEGER_LIT
	//	| {PreExpr} 'pre' '(' expr=Expr ')'
	//	| {EventExpr} 'event' '(' id=NestedDotID ')'
	//	| {LatchedExpr} 'latched' '(' expr=Expr ')'
	//	| {TimeOfExpr} 'timeof' '(' id=NestedDotID ')'
	//	| {TimeRiseExpr} 'timerise' '(' id=NestedDotID ')'
	//	| {TimeFallExpr} 'timefall' '(' id=NestedDotID ')'
	//	| {RealLitExpr} val=REAL_LIT
	//	| {BoolLitExpr} val=BooleanLiteral
	//	| {ThisExpr} 'this' ('.' subThis=NestedDotID)?
	//	| {FloorCast} 'floor' '(' expr=Expr ')'
	//	| {RealCast} 'real' '(' expr=Expr ')'
	//	| '(' Expr ')';
	public AgreeGrammarAccess.TermExprElements getTermExprAccess() {
		return gaAgree.getTermExprAccess();
	}
	
	public ParserRule getTermExprRule() {
		return getTermExprAccess().getRule();
	}

	//ComplexExpr:
	//	NestedDotID (=> ({FnCallExpr.fn=current} '(') (args+=Expr (',' args+=Expr)*)? ')'
	//	| => ({RecordExpr.record=current} '{' args+=[aadl2::NamedElement] '=') argExpr+=Expr (';' args+=[aadl2::NamedElement]
	//	'=' argExpr+=Expr)* '}')?;
	public AgreeGrammarAccess.ComplexExprElements getComplexExprAccess() {
		return gaAgree.getComplexExprAccess();
	}
	
	public ParserRule getComplexExprRule() {
		return getComplexExprAccess().getRule();
	}

	//NestedDotID:
	//	base=[aadl2::NamedElement|QCPREF] => ('.' (tag=ReservedVarTag | sub=NestedDotID))?;
	public AgreeGrammarAccess.NestedDotIDElements getNestedDotIDAccess() {
		return gaAgree.getNestedDotIDAccess();
	}
	
	public ParserRule getNestedDotIDRule() {
		return getNestedDotIDAccess().getRule();
	}

	//QCPREF:
	//	=> (ID '::') ID => ('.' ID)?
	//	| ID;
	public AgreeGrammarAccess.QCPREFElements getQCPREFAccess() {
		return gaAgree.getQCPREFAccess();
	}
	
	public ParserRule getQCPREFRule() {
		return getQCPREFAccess().getRule();
	}

	//ReservedVarTag:
	//	'_REMOVE'
	//	| '_INSERT'
	//	| '_COUNT'
	//	| '_CLK';
	public AgreeGrammarAccess.ReservedVarTagElements getReservedVarTagAccess() {
		return gaAgree.getReservedVarTagAccess();
	}
	
	public ParserRule getReservedVarTagRule() {
		return getReservedVarTagAccess().getRule();
	}

	//NamedID:
	//	name=ID;
	public AgreeGrammarAccess.NamedIDElements getNamedIDAccess() {
		return gaAgree.getNamedIDAccess();
	}
	
	public ParserRule getNamedIDRule() {
		return getNamedIDAccess().getRule();
	}

	//JavaQualifiedName:
	//	ID ('.' ID)*;
	public AgreeGrammarAccess.JavaQualifiedNameElements getJavaQualifiedNameAccess() {
		return gaAgree.getJavaQualifiedNameAccess();
	}
	
	public ParserRule getJavaQualifiedNameRule() {
		return getJavaQualifiedNameAccess().getRule();
	}

	//PModel aadl2::Element:
	//	ContainedPropertyAssociation //| BasicPropertyAssociation | PropertyAssociation
	//;
	public PropertiesGrammarAccess.PModelElements getPModelAccess() {
		return gaProperties.getPModelAccess();
	}
	
	public ParserRule getPModelRule() {
		return getPModelAccess().getRule();
	}

	//// Properties
	//ContainedPropertyAssociation aadl2::PropertyAssociation:
	//	property=[aadl2::Property|QPREF] ('=>' | append?='+=>') constant?='constant'? (ownedValue+=OptionalModalPropertyValue
	//	(',' ownedValue+=OptionalModalPropertyValue)*) ('applies' 'to' appliesTo+=ContainmentPath (','
	//	appliesTo+=ContainmentPath)*)? ('in' 'binding' '(' inBinding+=[aadl2::Classifier|QCREF] ')')?
	//	';';
	public PropertiesGrammarAccess.ContainedPropertyAssociationElements getContainedPropertyAssociationAccess() {
		return gaProperties.getContainedPropertyAssociationAccess();
	}
	
	public ParserRule getContainedPropertyAssociationRule() {
		return getContainedPropertyAssociationAccess().getRule();
	}

	//PropertyAssociation aadl2::PropertyAssociation:
	//	property=[aadl2::Property|QPREF] ('=>' | append?='+=>') constant?='constant'? (ownedValue+=OptionalModalPropertyValue
	//	(',' ownedValue+=OptionalModalPropertyValue)*) ('in' 'binding' '(' inBinding+=[aadl2::Classifier|QCREF] ')')?
	//	';';
	public PropertiesGrammarAccess.PropertyAssociationElements getPropertyAssociationAccess() {
		return gaProperties.getPropertyAssociationAccess();
	}
	
	public ParserRule getPropertyAssociationRule() {
		return getPropertyAssociationAccess().getRule();
	}

	//BasicPropertyAssociation aadl2::PropertyAssociation:
	//	property=[aadl2::Property|QPREF]
	//	'=>' ownedValue+=PropertyValue ';';
	public PropertiesGrammarAccess.BasicPropertyAssociationElements getBasicPropertyAssociationAccess() {
		return gaProperties.getBasicPropertyAssociationAccess();
	}
	
	public ParserRule getBasicPropertyAssociationRule() {
		return getBasicPropertyAssociationAccess().getRule();
	}

	//ContainmentPath aadl2::ContainedNamedElement:
	//	path=ContainmentPathElement
	//	//	( 'annex' containmentPathElement+=AnnexPath )?
	//;
	public PropertiesGrammarAccess.ContainmentPathElements getContainmentPathAccess() {
		return gaProperties.getContainmentPathAccess();
	}
	
	public ParserRule getContainmentPathRule() {
		return getContainmentPathAccess().getRule();
	}

	////AnnexPath returns aadl2::ContainmentPathElement:
	////	 namedElement=[aadl2::NamedElement|IDANNEXTEXT];
	//ModalPropertyValue aadl2::ModalPropertyValue:
	//	ownedValue=PropertyExpression
	//	'in' 'modes' '('
	//	inMode+=[aadl2::Mode] (',' inMode+=[aadl2::Mode])*
	//	')';
	public PropertiesGrammarAccess.ModalPropertyValueElements getModalPropertyValueAccess() {
		return gaProperties.getModalPropertyValueAccess();
	}
	
	public ParserRule getModalPropertyValueRule() {
		return getModalPropertyValueAccess().getRule();
	}

	//OptionalModalPropertyValue aadl2::ModalPropertyValue:
	//	ownedValue=PropertyExpression ('in' 'modes' '('
	//	inMode+=[aadl2::Mode] (',' inMode+=[aadl2::Mode])*
	//	')')?;
	public PropertiesGrammarAccess.OptionalModalPropertyValueElements getOptionalModalPropertyValueAccess() {
		return gaProperties.getOptionalModalPropertyValueAccess();
	}
	
	public ParserRule getOptionalModalPropertyValueRule() {
		return getOptionalModalPropertyValueAccess().getRule();
	}

	//// &&&&&&&&&& handling of in binding
	//PropertyValue aadl2::ModalPropertyValue:
	//	ownedValue=PropertyExpression;
	public PropertiesGrammarAccess.PropertyValueElements getPropertyValueAccess() {
		return gaProperties.getPropertyValueAccess();
	}
	
	public ParserRule getPropertyValueRule() {
		return getPropertyValueAccess().getRule();
	}

	//PropertyExpression aadl2::PropertyExpression:
	//	RecordTerm | ReferenceTerm | ComponentClassifierTerm
	//	| ComputedTerm | StringTerm | NumericRangeTerm
	//	| RealTerm | IntegerTerm
	//	| ListTerm
	//	| BooleanLiteral | LiteralorReferenceTerm;
	public PropertiesGrammarAccess.PropertyExpressionElements getPropertyExpressionAccess() {
		return gaProperties.getPropertyExpressionAccess();
	}
	
	public ParserRule getPropertyExpressionRule() {
		return getPropertyExpressionAccess().getRule();
	}

	//LiteralorReferenceTerm aadl2::NamedValue:
	//	namedValue=[aadl2::AbstractNamedValue|QPREF];
	public PropertiesGrammarAccess.LiteralorReferenceTermElements getLiteralorReferenceTermAccess() {
		return gaProperties.getLiteralorReferenceTermAccess();
	}
	
	public ParserRule getLiteralorReferenceTermRule() {
		return getLiteralorReferenceTermAccess().getRule();
	}

	//BooleanLiteral aadl2::BooleanLiteral:
	//	{aadl2::BooleanLiteral} (value?='true' | 'false');
	public PropertiesGrammarAccess.BooleanLiteralElements getBooleanLiteralAccess() {
		return gaProperties.getBooleanLiteralAccess();
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//ConstantValue aadl2::NamedValue:
	//	namedValue=[aadl2::PropertyConstant|QPREF];
	public PropertiesGrammarAccess.ConstantValueElements getConstantValueAccess() {
		return gaProperties.getConstantValueAccess();
	}
	
	public ParserRule getConstantValueRule() {
		return getConstantValueAccess().getRule();
	}

	//ReferenceTerm aadl2::ReferenceValue:
	//	'reference' '('
	//	path=ContainmentPathElement
	//	//	( 'annex' ID '{**' 
	//	//	containmentPathElement+=ContainmentPathElement
	//	//	( '.' containmentPathElement+=ContainmentPathElement)*
	//	//	'**}')?
	//	')';
	public PropertiesGrammarAccess.ReferenceTermElements getReferenceTermAccess() {
		return gaProperties.getReferenceTermAccess();
	}
	
	public ParserRule getReferenceTermRule() {
		return getReferenceTermAccess().getRule();
	}

	//RecordTerm aadl2::RecordValue:
	//	'['
	//	ownedFieldValue+=FieldPropertyAssociation+
	//	']';
	public PropertiesGrammarAccess.RecordTermElements getRecordTermAccess() {
		return gaProperties.getRecordTermAccess();
	}
	
	public ParserRule getRecordTermRule() {
		return getRecordTermAccess().getRule();
	}

	//OldRecordTerm aadl2::RecordValue:
	//	'('
	//	ownedFieldValue+=FieldPropertyAssociation+
	//	')';
	public PropertiesGrammarAccess.OldRecordTermElements getOldRecordTermAccess() {
		return gaProperties.getOldRecordTermAccess();
	}
	
	public ParserRule getOldRecordTermRule() {
		return getOldRecordTermAccess().getRule();
	}

	//ComputedTerm aadl2::ComputedValue:
	//	'compute' '('
	//	function=ID
	//	')';
	public PropertiesGrammarAccess.ComputedTermElements getComputedTermAccess() {
		return gaProperties.getComputedTermAccess();
	}
	
	public ParserRule getComputedTermRule() {
		return getComputedTermAccess().getRule();
	}

	//ComponentClassifierTerm aadl2::ClassifierValue:
	//	'classifier' '('
	//	classifier=[aadl2::ComponentClassifier|QCREF]
	//	')';
	public PropertiesGrammarAccess.ComponentClassifierTermElements getComponentClassifierTermAccess() {
		return gaProperties.getComponentClassifierTermAccess();
	}
	
	public ParserRule getComponentClassifierTermRule() {
		return getComponentClassifierTermAccess().getRule();
	}

	//ListTerm aadl2::ListValue:
	//	{aadl2::ListValue}
	//	'(' (ownedListElement+=PropertyExpression (',' ownedListElement+=PropertyExpression)*)?
	//	')';
	public PropertiesGrammarAccess.ListTermElements getListTermAccess() {
		return gaProperties.getListTermAccess();
	}
	
	public ParserRule getListTermRule() {
		return getListTermAccess().getRule();
	}

	//FieldPropertyAssociation aadl2::BasicPropertyAssociation:
	//	property=[aadl2::BasicProperty]
	//	'=>'
	//	ownedValue=PropertyExpression
	//	';';
	public PropertiesGrammarAccess.FieldPropertyAssociationElements getFieldPropertyAssociationAccess() {
		return gaProperties.getFieldPropertyAssociationAccess();
	}
	
	public ParserRule getFieldPropertyAssociationRule() {
		return getFieldPropertyAssociationAccess().getRule();
	}

	//// from AADL2
	//// need to add annex path element
	//ContainmentPathElement aadl2::ContainmentPathElement:
	//	(namedElement=[aadl2::NamedElement] arrayRange+=ArrayRange*) ('.' path=ContainmentPathElement)?
	//	//	 | 	 'annex' namedElement=[aadl2::NamedElement|ID]
	//;
	public PropertiesGrammarAccess.ContainmentPathElementElements getContainmentPathElementAccess() {
		return gaProperties.getContainmentPathElementAccess();
	}
	
	public ParserRule getContainmentPathElementRule() {
		return getContainmentPathElementAccess().getRule();
	}

	//ANNEXREF: // check what values are ok inside ** **
	//	'{' STAR STAR ID STAR STAR '}';
	public PropertiesGrammarAccess.ANNEXREFElements getANNEXREFAccess() {
		return gaProperties.getANNEXREFAccess();
	}
	
	public ParserRule getANNEXREFRule() {
		return getANNEXREFAccess().getRule();
	}

	//PlusMinus aadl2::OperationKind:
	//	'+' | '-';
	public PropertiesGrammarAccess.PlusMinusElements getPlusMinusAccess() {
		return gaProperties.getPlusMinusAccess();
	}
	
	public ParserRule getPlusMinusRule() {
		return getPlusMinusAccess().getRule();
	}

	//StringTerm aadl2::StringLiteral:
	//	value=NoQuoteString;
	public PropertiesGrammarAccess.StringTermElements getStringTermAccess() {
		return gaProperties.getStringTermAccess();
	}
	
	public ParserRule getStringTermRule() {
		return getStringTermAccess().getRule();
	}

	//NoQuoteString:
	//	STRING;
	public PropertiesGrammarAccess.NoQuoteStringElements getNoQuoteStringAccess() {
		return gaProperties.getNoQuoteStringAccess();
	}
	
	public ParserRule getNoQuoteStringRule() {
		return getNoQuoteStringAccess().getRule();
	}

	//ArrayRange aadl2::ArrayRange:
	//	{aadl2::ArrayRange}
	//	'[' lowerBound=INTVALUE ('..' upperBound=INTVALUE)?
	//	']';
	public PropertiesGrammarAccess.ArrayRangeElements getArrayRangeAccess() {
		return gaProperties.getArrayRangeAccess();
	}
	
	public ParserRule getArrayRangeRule() {
		return getArrayRangeAccess().getRule();
	}

	//SignedConstant aadl2::Operation:
	//	op=PlusMinus ownedPropertyExpression+=ConstantValue;
	public PropertiesGrammarAccess.SignedConstantElements getSignedConstantAccess() {
		return gaProperties.getSignedConstantAccess();
	}
	
	public ParserRule getSignedConstantRule() {
		return getSignedConstantAccess().getRule();
	}

	//IntegerTerm aadl2::IntegerLiteral:
	//	value=SignedInt unit=[aadl2::UnitLiteral]?;
	public PropertiesGrammarAccess.IntegerTermElements getIntegerTermAccess() {
		return gaProperties.getIntegerTermAccess();
	}
	
	public ParserRule getIntegerTermRule() {
		return getIntegerTermAccess().getRule();
	}

	//SignedInt aadl2::Integer:
	//	('+' | '-')? INTEGER_LIT;
	public PropertiesGrammarAccess.SignedIntElements getSignedIntAccess() {
		return gaProperties.getSignedIntAccess();
	}
	
	public ParserRule getSignedIntRule() {
		return getSignedIntAccess().getRule();
	}

	//RealTerm aadl2::RealLiteral:
	//	value=SignedReal unit=[aadl2::UnitLiteral]?;
	public PropertiesGrammarAccess.RealTermElements getRealTermAccess() {
		return gaProperties.getRealTermAccess();
	}
	
	public ParserRule getRealTermRule() {
		return getRealTermAccess().getRule();
	}

	//SignedReal aadl2::Real:
	//	('+' | '-')? REAL_LIT;
	public PropertiesGrammarAccess.SignedRealElements getSignedRealAccess() {
		return gaProperties.getSignedRealAccess();
	}
	
	public ParserRule getSignedRealRule() {
		return getSignedRealAccess().getRule();
	}

	//NumericRangeTerm aadl2::RangeValue:
	//	minimum=NumAlt //(RealTerm|IntegerTerm| SignedConstant | ConstantValue)  
	//	'..' maximum=NumAlt ('delta' delta=NumAlt //(RealTerm|IntegerTerm| SignedConstant | ConstantValue)
	//)?;
	public PropertiesGrammarAccess.NumericRangeTermElements getNumericRangeTermAccess() {
		return gaProperties.getNumericRangeTermAccess();
	}
	
	public ParserRule getNumericRangeTermRule() {
		return getNumericRangeTermAccess().getRule();
	}

	//NumAlt aadl2::PropertyExpression:
	//	RealTerm | IntegerTerm | SignedConstant | ConstantValue;
	public PropertiesGrammarAccess.NumAltElements getNumAltAccess() {
		return gaProperties.getNumAltAccess();
	}
	
	public ParserRule getNumAltRule() {
		return getNumAltAccess().getRule();
	}

	//terminal SL_COMMENT:
	//	'--' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaProperties.getSL_COMMENTRule();
	} 

	//INTVALUE aadl2::Integer:
	//	INTEGER_LIT //NUMERAL 	
	//;
	public PropertiesGrammarAccess.INTVALUEElements getINTVALUEAccess() {
		return gaProperties.getINTVALUEAccess();
	}
	
	public ParserRule getINTVALUERule() {
		return getINTVALUEAccess().getRule();
	}

	//terminal fragment EXPONENT:
	//	('e' | 'E') ('+' | '-')? DIGIT+;
	public TerminalRule getEXPONENTRule() {
		return gaProperties.getEXPONENTRule();
	} 

	//terminal fragment INT_EXPONENT:
	//	('e' | 'E') '+'? DIGIT+;
	public TerminalRule getINT_EXPONENTRule() {
		return gaProperties.getINT_EXPONENTRule();
	} 

	//terminal REAL_LIT:
	//	DIGIT+ ('_' DIGIT+)* ('.' DIGIT+ ('_' DIGIT+)* EXPONENT?);
	public TerminalRule getREAL_LITRule() {
		return gaProperties.getREAL_LITRule();
	} 

	//terminal INTEGER_LIT:
	//	DIGIT+ ('_' DIGIT+)* ('#' BASED_INTEGER '#' INT_EXPONENT? | INT_EXPONENT?);
	public TerminalRule getINTEGER_LITRule() {
		return gaProperties.getINTEGER_LITRule();
	} 

	//terminal fragment DIGIT:
	//	'0'..'9';
	public TerminalRule getDIGITRule() {
		return gaProperties.getDIGITRule();
	} 

	//terminal fragment EXTENDED_DIGIT:
	//	'0'..'9' | 'a'..'f' | 'A'..'F';
	public TerminalRule getEXTENDED_DIGITRule() {
		return gaProperties.getEXTENDED_DIGITRule();
	} 

	//terminal fragment BASED_INTEGER:
	//	EXTENDED_DIGIT ('_'? EXTENDED_DIGIT)*;
	public TerminalRule getBASED_INTEGERRule() {
		return gaProperties.getBASED_INTEGERRule();
	} 

	//QCLREF:
	//	ID '::' ID;
	public PropertiesGrammarAccess.QCLREFElements getQCLREFAccess() {
		return gaProperties.getQCLREFAccess();
	}
	
	public ParserRule getQCLREFRule() {
		return getQCLREFAccess().getRule();
	}

	//QPREF:
	//	ID ('::' ID)?;
	public PropertiesGrammarAccess.QPREFElements getQPREFAccess() {
		return gaProperties.getQPREFAccess();
	}
	
	public ParserRule getQPREFRule() {
		return getQPREFAccess().getRule();
	}

	//QCREF:
	//	(ID '::')* ID ('.' ID)?;
	public PropertiesGrammarAccess.QCREFElements getQCREFAccess() {
		return gaProperties.getQCREFAccess();
	}
	
	public ParserRule getQCREFRule() {
		return getQCREFAccess().getRule();
	}

	//STAR:
	//	'*';
	public PropertiesGrammarAccess.STARElements getSTARAccess() {
		return gaProperties.getSTARAccess();
	}
	
	public ParserRule getSTARRule() {
		return getSTARAccess().getRule();
	}

	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaProperties.getSTRINGRule();
	} 

	//terminal ID:
	//	('a'..'z'
	//	| 'A'..'Z') ('_'? ('a'..'z'
	//	| 'A'..'Z'
	//	| '0'..'9'))*;
	public TerminalRule getIDRule() {
		return gaProperties.getIDRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaProperties.getWSRule();
	} 
}
