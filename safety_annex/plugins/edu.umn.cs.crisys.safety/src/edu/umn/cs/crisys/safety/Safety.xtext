grammar edu.umn.cs.crisys.safety.Safety with com.rockwellcollins.atc.agree.Agree

generate safety "http://www.xtext.org/example/safety/Safety"

import "http://aadl.info/AADL/2.0" as aadl2

 
@Override
AnnexLibrary returns AnnexLibrary:
	SafetyLibrary;

@Override
AnnexSubclause returns AnnexSubclause:
	SafetySubclause;

SafetyLibrary:
	{SafetyContractLibrary} contract=SafetyContract;

SafetySubclause:
	{SafetyContractSubclause} contract=SafetyContract;

SafetyContract returns Contract:
	{SafetyContract} (specs+=SpecStatement)*;

ElementSafety returns aadl2::Element:
	SafetyEqStatement
	| Expr
	| FaultSubcomponent
;

@Override 
SpecStatement: {FaultStatement} 'fault' (str=STRING)? ':'  faultDefName=NestedDotID  
			'{' faultDefinitions+=(FaultSubcomponent)* '}' ;

	

FaultSubcomponent returns FaultSubcomponent: 
	{InputStatement} 'inputs' ':' fault_in+=ID '<-' nom_conn+=Expr
							(','fault_in+=ID '<-' nom_conn+=Expr)*';' 
	
	| {OutputStatement} 'outputs' ':' nom_conn+=NestedDotID '<-' fault_out+=ID 
							(','nom_conn+=NestedDotID '<-' fault_out+=ID)*';'
	
 	| {DurationStatement} 'duration' ':' tc=TemporalConstraint (interv=Interval)? ';'  
 	| {TriggerStatement} 'trigger' ':' cond=TriggerCondition  ('['probability=REAL_LIT ']')? ';'
	| SafetyEqStatement ;

	 
TemporalConstraint:
	{PermanentConstraint} 'permanent' 
	| {TransientConstraint} 'transient'
;

TriggerCondition:
	{MustCondition}'must' '{' exprList+=(Expr) ("," exprList+=(Expr))* '}'  
  | {EnablerCondition} 'enabler' '{' exprList+=(Expr) ("," exprList+=(Expr))*  '}'  
;
	
SafetyEqStatement:
	{EqValue} 'eq' (lhs+=Arg (',' lhs+=Arg)*) ('=' expr=Expr)? ';'
	| {IntervalEq} 'interval' lhs_int=ID '=' interv=Interval ';'
    | {SetEq} 'set' lhs_set=ID '=' '{'l1=Expr (',' list+=Expr)* '}' ';'
    | {RangeEq} 'range' lhs_range=ID '=' '{'l1=Expr ',' l2=Expr '}' ';'
;

Interval:
	=>({ClosedInterval} '[' low=Expr ',' high=Expr ']')
|   =>({OpenLeftInterval} '(' low=Expr ',' high=Expr']')
|   =>({OpenRightInterval} '[' low=Expr ',' high=Expr ')')
|   =>({OpenInterval} '(' low=Expr ',' high=Expr ')') 	
;

