/*
 * generated by Xtext
 */
package edu.umn.cs.crisys.safety.validation;

import static com.rockwellcollins.atc.agree.validation.AgreeType.BOOL;

import java.util.Map;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.validation.Check;
import org.osate.aadl2.AadlPackage;
import org.osate.aadl2.AnnexLibrary;
import org.osate.aadl2.NamedElement;

import com.rockwellcollins.atc.agree.agree.Expr;
import com.rockwellcollins.atc.agree.agree.IntLitExpr;
import com.rockwellcollins.atc.agree.agree.NestedDotID;
import com.rockwellcollins.atc.agree.agree.NodeDefExpr;
import com.rockwellcollins.atc.agree.agree.RealLitExpr;
import com.rockwellcollins.atc.agree.validation.AgreeType;

import edu.umn.cs.crisys.safety.safety.DurationStatement;
import edu.umn.cs.crisys.safety.safety.EqValue;
import edu.umn.cs.crisys.safety.safety.FaultStatement;
import edu.umn.cs.crisys.safety.safety.InputStatement;
import edu.umn.cs.crisys.safety.safety.Interval;
import edu.umn.cs.crisys.safety.safety.IntervalEq;
import edu.umn.cs.crisys.safety.safety.OutputStatement;
import edu.umn.cs.crisys.safety.safety.SafetyPackage;
import edu.umn.cs.crisys.safety.safety.SetEq;
import edu.umn.cs.crisys.safety.safety.TriggerCondition;
import edu.umn.cs.crisys.safety.safety.TriggerStatement;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class SafetyJavaValidator extends AbstractSafetyJavaValidator {
	
	/*
	 * (non-Javadoc)
	 * @see com.rockwellcollins.atc.agree.validation.AgreeJavaValidator#isResponsible(java.util.Map, org.eclipse.emf.ecore.EObject)
	 */
	protected boolean isResponsible(Map<Object, Object> context, EObject eObject) {
		return (eObject.eClass().getEPackage() == SafetyPackage.eINSTANCE) || eObject instanceof AadlPackage;
	}

	@Check
	/*
	 * Puts out a warning if the fault description is an empty string. 
	 * The description is optional, but shouldn't be ""
	 * 
	 * Checks that the nested dot id used as the fault name is a valid
	 * node definition. 
	 */
	public void checkFaultSpecStmt(FaultStatement specStmt){
		
		NestedDotID nodeName = specStmt.getFaultDefName();
		
		// Check on fault description
		if(specStmt.getStr().isEmpty()) {
			warning(specStmt, "Fault description is optional, but should "
					+ "not be an empty string.");
		}
		
		// Check that the nested dot id (fault node name) is a valid node definition
		NamedElement finalNodeName = getFinalNestId(nodeName);
		if(!(finalNodeName instanceof NodeDefExpr)){
			error(nodeName, "The fault name must be a valid node definition.");
		}
		
	}
	
	
	/* Input Statements
	 * 
	 */
	@Check
	public void checkInput(InputStatement inputStmt){
		//Expr inConn = inputStmt.getIn_conn();
		//Arg outConn = inputStmt.getOut_conn();
		
		// TODO: Check that input connection is a valid aadl name
		
//		if(inConn==null){
//			error(inConn, "Input connection cannot be null");
//		}
		
		//checkArg(outConn);
		
	}
	
	/* Output Statements
	 * 
	 */
	@Check
	public void checkOutput(OutputStatement outputStmt, InputStatement inputStmt){
		/*
		 * input: inputConnection (Expr), inFaultOutConn (Arg)
		 * output: faultOutConn (NamedElement), nominalOutConn (Expr)
		 */
		//NamedElement faultOutConn = outputStmt.getOut_conn();
		Expr nominalOutConn = outputStmt.getNom_conn();
		//Arg inFaultOutConn = inputStmt.getOut_conn();
		
//		if(!(faultOutConn.getName().equals(inFaultOutConn.getName()))){
//			error(faultOutConn, "The fault output must refer to the fault output argument"
//					+ " defined in input statement.");
//		}
		
	}
	
	/*
	 * Check Duration: 
	 * Checks for valid integer interval, 
	 * that the lower and upper integers in the interval are not constants.
	 */
	@Check
	public void checkDuration(DurationStatement durationStmt){
		
		// Check for valid integer interval
		Interval interval = durationStmt.getInterv();
		Expr lower = interval.getLow();
	    Expr higher = interval.getHigh();
	    
	    // Lower value is integer valued literal and not a const
	    if(!(lower instanceof IntLitExpr || isConst(lower))){
	        error(lower, "Lower interval must be an integer valued literal.");
	    }
	    
	    // Higher value is integer valued literal
	    if(!(higher instanceof IntLitExpr || isConst(higher))){
            error(higher, "Higher interval must be an integer valued literal.");
        }
		
	}
	
	
	/*
	 *  Trigger Statements:
	 *  Calls helper function to check trigger condition.
	 *  
	 *  Make sure probability statement is a valid probability 
	 *  (real number between 0 and 1 inclusive)
	 */
	@Check
	public void checkTriggerStatement(TriggerStatement triggerStmt){
		
		// First check the trigger condition
		checkTriggerCondition(triggerStmt.getCond());
		
		// Check the optional probability expression
		if(triggerStmt.getProbability() != null ){
			
			// Check for non-real valued probability
			// Try casting string to double, catch exceptions to print out error
			double result = 0;
			try{
				result = Double.parseDouble(triggerStmt.getProbability());
			} catch(NullPointerException npe){
				error(triggerStmt, "Valid real number required");
			} catch(NumberFormatException nfe){
				error(triggerStmt, "Valid real number required");
			}
			
			// Now check to make sure it's a valid probability (btwn 0 and 1 inclusive)
			if((result < 0) || (result > 1)){
				error(triggerStmt, "Probability must be between 0 and 1 inclusive");
			}	
		}
	}
	
	/*
	 * Trigger Condition: 
	 * Checks nonempty list and only boolean values in expression list
	 */
	@Check
	public void checkTriggerCondition(TriggerCondition tc){
		if(tc != null){
			
			// Make sure expression list for trigger conditions is nonempty
			EList<Expr> exprList = tc.getExprList();
			if(exprList.isEmpty()) {
				error(tc, "Trigger condition list cannot be empty.");
			}
			
			// For each expression in the list, make sure they are all of type boolean
			for(Expr expr : exprList){
				if (expr != null) {
		            AgreeType exprType = getAgreeType(expr);
		            if (!matches(BOOL, exprType)) {
		                error(tc, "Expression for trigger condition is of type '" + exprType.toString()
		                        + "' but must be of type 'bool'");
		            }
		        }
			}
		}
	}
	
	
	/*
	 *  EqStatements: 
	 *  Make sure you are within a fault statement. 
	 */
	@Check
	public void checkEqStatement(EqValue eqStmt){
		
		// Check to make sure we are within a fault statement
		AnnexLibrary library = EcoreUtil2.getContainerOfType(eqStmt, AnnexLibrary.class);
		if (library != null) {
			error(eqStmt, "Equation statments are only allowed in fault statements.");
		}
	}
	
	/*
	 * IntervalEqStatements:
	 * Check the time interval consists of both integer or both real literal values. 
	 * 
	 */
	@Check
	public void checkIntervalEqStatement(IntervalEq intervalEq){
		
		// Check valid real OR integer interval
		
		Interval interval = intervalEq.getInterv();
		Expr lower = interval.getLow();
	    Expr higher = interval.getHigh();
	    
	    // Both must be real or both must be integer
	    if(!((lower instanceof IntLitExpr && higher instanceof IntLitExpr)|| (lower instanceof RealLitExpr && higher instanceof RealLitExpr))){
	    	error(intervalEq, "Lower and higher interval values must be both real or both integer.");
	    }
	    
	    // Neither can be constants
	    if(isConst(lower) || isConst(higher)){
	    	error(intervalEq, "Lower and higher interval values must be real or integer valued literals.");
	    }
	}
	
	/*
	 * SetEqStatements:
	 * Check the set eq statements for empty set or non-integer values
	 */
	@Check
	public void checkSetEqStatement(SetEq setEq){
		
		if(setEq.getList().isEmpty()){
			error(setEq, "Set cannot be empty.");
		}
		
		// Try casting string to integer, catch exceptions to print out error
		Integer result = 0;
		try{
			result = Integer.parseInt(setEq.getL1());
		} catch(NullPointerException npe){
			error(setEq, "Valid integer required in set");
		} catch(NumberFormatException nfe){
			error(setEq, "Valid integer required in set");
		}
		
		// Now iterate through list making sure all integers are valid
		for(String item: setEq.getList()){
			try{
				result = Integer.parseInt(item);
			} catch(NullPointerException npe){
				error(setEq, "Valid integer required in set");
			} catch(NumberFormatException nfe){
				error(setEq, "Valid integer required in set");
			}
		}
	}
	

}
