package ControlSystem
public
with bscu;
with Base_Types;
	
	system ControlSystem
		features
			-- Inputs
			power_1 : in data port Base_Types::Boolean;
			power_2 : in data port Base_Types::Boolean;
			ground_speed : in data port Base_Types::Integer;
			
			elec_pedal_pos_L : in data port Base_Types::Boolean;
			elec_pedal_pos_R : in data port Base_Types::Boolean;
			
			wheel_rolling_1 : in data port Base_Types::Boolean;
			wheel_rolling_2 : in data port Base_Types::Boolean;
			wheel_rolling_3 : in data port Base_Types::Boolean;
			wheel_rolling_4 : in data port Base_Types::Boolean;
			
			-- Outputs
			brake_as_cmd_1 : out data port Base_Types::Boolean;
			brake_as_cmd_2 : out data port Base_Types::Boolean;
			brake_as_cmd_3 : out data port Base_Types::Boolean;
			brake_as_cmd_4 : out data port Base_Types::Boolean;
			
			as_cmd_pair_1_3 : out data port Base_Types::Boolean;
			as_cmd_pair_2_4 : out data port Base_Types::Boolean;
			
			system_validity : out data port Base_Types::Boolean;
				
			annex agree {**
				assume "(ControlSystem) Ground speed always greater than zero." : 
					(ground_speed >= 0) and (ground_speed <= 10);
				
				
				-- Properties for control system
				
				-- Ground speed positive, system valid
				property SPEED = ground_speed > 0; 
				property VALID = system_validity;
				property power = power_1 or power_2; 
				
				-- When one of the wheels in a pair is not rolling
				property PAIR_NOT_ROLLING_13 = not wheel_rolling_1 or not wheel_rolling_3;
				property PAIR_NOT_ROLLING_24 = not wheel_rolling_2 or not wheel_rolling_4;
				
				-- Valid antiskid command pair with system validity
				property VALIDPAIR_13 = as_cmd_pair_1_3 and system_validity;
				property VALIDPAIR_24 = as_cmd_pair_2_4 and system_validity;
				
				-- Brake antiskid commanded for a pair
				property BRAKE_AS_COMMANDED_13 = brake_as_cmd_1 and brake_as_cmd_3;
				property BRAKE_AS_COMMANDED_24 = brake_as_cmd_2 and brake_as_cmd_4;				
						
				guarantee "(ctrl system) 1 Expected antiskid behavior pair 1,5: Valid system and ground speed and either wheel is not rolling
						  if and only if antiskid is commanded to the pair." :
						  true -> ((as_cmd_pair_1_3 = (power and SPEED and PAIR_NOT_ROLLING_13)) or (as_cmd_pair_1_3 = false));
						  
				guarantee "(ctrl system) Expected antiskid behavior pair 2,6: Valid system and ground speed and either wheel is not rolling
						  if and only if antiskid is commanded to the pair." :
						  true -> ((as_cmd_pair_2_4 = (power and SPEED and PAIR_NOT_ROLLING_24)) or (as_cmd_pair_2_4 = false));
				
				guarantee "(ctrl system) Valid antiskid command to the pair implies that one of the brake antiskid commands are not true." :
					true -> ((VALIDPAIR_13 => not BRAKE_AS_COMMANDED_13) 
							and (VALIDPAIR_24 => not BRAKE_AS_COMMANDED_24));
				
				
				guarantee "(ctrl system) If system is valid and we have brake antiskid commanded at each wheel, 
							then we do not use the antiskid backup command." :
							true -> (((BRAKE_AS_COMMANDED_13 and VALID) => not as_cmd_pair_1_3)
								and ((BRAKE_AS_COMMANDED_24 and VALID) => not as_cmd_pair_2_4));
				
				guarantee " (ctrl system) Brake antiskid command behavior (wheel 1): Brake antiskid is commanded to the wheel only when 
							Pedal pressed, system valid, and either speed and rolling wheel or no speed." :
							true -> (((VALID and power and elec_pedal_pos_L) and ((SPEED and wheel_rolling_1) or (not SPEED))) <=> brake_as_cmd_1);
							
				guarantee " (ctrl system) Brake antiskid command behavior (wheel 2): Brake antiskid is commanded to the wheel only when 
							Pedal pressed, system valid, and either speed and rolling wheel or no speed." :
							true -> (((VALID and power and elec_pedal_pos_R) and ((SPEED and wheel_rolling_2) or (not SPEED))) <=> brake_as_cmd_2);
				
				guarantee " (ctrl system) Brake antiskid command behavior (wheel 3): Brake antiskid is commanded to the wheel only when 
							Pedal pressed, system valid, and either speed and rolling wheel or no speed." :
							true -> (((VALID and power and elec_pedal_pos_L) and ((SPEED and wheel_rolling_3) or (not SPEED))) <=> brake_as_cmd_3);
				
				guarantee " (ctrl system) Brake antiskid command behavior (wheel 4): Brake antiskid is commanded to the wheel only when 
							Pedal pressed, system valid, and either speed and rolling wheel or no speed." :
							true -> (((VALID and power and elec_pedal_pos_R) and ((SPEED and wheel_rolling_4) or (not SPEED))) <=> brake_as_cmd_4);
							
			**};
				
	end ControlSystem;
	
	system implementation ControlSystem.inst 
		subcomponents
			bscu: system BSCU::BSCU.inst; 
			
		connections
			sys_valid : port bscu.system_validity -> system_validity;
			
			brake_as_1 : port bscu.brake_as_cmd_1 -> brake_as_cmd_1;
			brake_as_2 : port bscu.brake_as_cmd_2 -> brake_as_cmd_2;
			brake_as_3 : port bscu.brake_as_cmd_3 -> brake_as_cmd_3;
			brake_as_4 : port bscu.brake_as_cmd_4 -> brake_as_cmd_4;
			
			as_pair_1_5 : port bscu.as_cmd_pair_1_3 -> as_cmd_pair_1_3;
			as_pair_2_6 : port bscu.as_cmd_pair_2_4 -> as_cmd_pair_2_4; 
			
			wheel_rolling_to_bscu_1 : port wheel_rolling_1 -> bscu.wheel_rolling_1;
			wheel_rolling_to_bscu_2 : port wheel_rolling_2 -> bscu.wheel_rolling_2;
			wheel_rolling_to_bscu_3 : port wheel_rolling_3 -> bscu.wheel_rolling_3;
			wheel_rolling_to_bscu_4 : port wheel_rolling_4 -> bscu.wheel_rolling_4;
		    
		    elec_pedal_pos_L_to_bscu : port elec_pedal_pos_L -> bscu.elec_pedal_pos_L;
		    elec_pedal_pos_R_to_bscu : port elec_pedal_pos_R -> bscu.elec_pedal_pos_R;
			
			speed_to_bscu : port ground_speed -> bscu.ground_speed;
			
			power1_to_bscu : port power_1 -> bscu.power_1;
			power2_to_bscu : port power_2 -> bscu.power_2;
			
--	annex safety{**
--	  	analyze : max 1 fault
--	  	--analyze : probability 1.0E-7
--	  
--   **};	
--   
         annex safety{**
	  analyze : max 1 fault 
   **};
	end ControlSystem.inst;
	


end ControlSystem;
