package Channel
public
with Base_Types;
with CommandSystem;
with MonitorSystem;

	system Channel
		features
			-- Inputs
			power : in data port Base_Types::Boolean;
			ground_speed : in data port Base_Types::Integer;
			
			elec_pedal_pos_L : in data port Base_Types::Boolean;
			elec_pedal_pos_R : in data port Base_Types::Boolean;
			
			wheel_rolling_1 : in data port Base_Types::Boolean;
			wheel_rolling_2 : in data port Base_Types::Boolean;
			wheel_rolling_3 : in data port Base_Types::Boolean;
			wheel_rolling_4 : in data port Base_Types::Boolean;
			
			-- Outputs
			brake_as_cmd_1 : out data port Base_Types::Boolean;
			brake_as_cmd_2 : out data port Base_Types::Boolean;
			brake_as_cmd_3 : out data port Base_Types::Boolean;
			brake_as_cmd_4 : out data port Base_Types::Boolean;
			as_cmd_pair_1_3 : out data port Base_Types::Boolean;
			as_cmd_pair_2_4 : out data port Base_Types::Boolean;
			system_validity : out data port Base_Types::Boolean;
			
			annex agree {**
				assume "(ChannelSystem) Ground speed always greater than zero." : 
					(ground_speed >= 0) and (ground_speed <= 10);
			
				-- Properties 
				property SPEED = ground_speed > 0;
				-- When one of the wheels in a pair is not rolling
				property PAIR_NOT_ROLLING_13 = not wheel_rolling_1 or not wheel_rolling_3;
				property PAIR_NOT_ROLLING_24 = not wheel_rolling_2 or not wheel_rolling_4;				
				property VALID = system_validity;
				
				guarantee "(Channel) Antiskid command to pair 1,3: Alternate AS command is true if and only if
							we have power, ground speed is positive, and one of the two wheels is not rolling." :
							true -> (power and SPEED and PAIR_NOT_ROLLING_13) <=> as_cmd_pair_1_3; 
							
				guarantee "(Channel) Antiskid command to pair 2,4: Alternate AS command is true if and only if
							we have power, ground speed is positive, and one of the two wheels is not rolling." :
							true -> (power and SPEED and PAIR_NOT_ROLLING_24) <=> as_cmd_pair_2_4;
					
				guarantee " (Channel) Brake antiskid command behavior (wheel 1): Brake antiskid is commanded to the wheel only when 
							Pedal pressed, system valid, and either speed and rolling wheel or no speed." :
							true -> (((power and elec_pedal_pos_L) and ((SPEED and wheel_rolling_1) or (not SPEED))) <=> brake_as_cmd_1);
							
				guarantee " (Channel) Brake antiskid command behavior (wheel 2): Brake antiskid is commanded to the wheel only when 
							Pedal pressed, system valid, and either speed and rolling wheel or no speed." :
							true -> (((power and elec_pedal_pos_R) and ((SPEED and wheel_rolling_2) or (not SPEED))) <=> brake_as_cmd_2);
				
				guarantee " (Channel) Brake antiskid command behavior (wheel 3): Brake antiskid is commanded to the wheel only when 
							Pedal pressed, system valid, and either speed and rolling wheel or no speed." :
							true -> (((power and elec_pedal_pos_L) and ((SPEED and wheel_rolling_3) or (not SPEED))) <=> brake_as_cmd_3);
				
				guarantee " (Channel) Brake antiskid command behavior (wheel 4): Brake antiskid is commanded to the wheel only when 
							Pedal pressed, system valid, and either speed and rolling wheel or no speed." :
							true -> (((power and elec_pedal_pos_R) and ((SPEED and wheel_rolling_4) or (not SPEED))) <=> brake_as_cmd_4);
							
				
				
				
				-- If there is no power coming in, channel validity should be false... 
				guarantee "(Channel) If there is no power source, validity should be false." :
						true -> (not power => not system_validity);	
				
				
				
				
			**};
			
	end Channel;
	
	system implementation Channel.inst
		subcomponents 
			monitor_sys : system MonitorSystem::MonitorSystem;
			command_sys : system CommandSystem::CommandSystem.inst;
			
		connections
			sys_valid : port monitor_sys.bscu_validity -> system_validity;
			
			brake_as_1 : port command_sys.brake_as_cmd_1 -> brake_as_cmd_1;
			brake_as_2 : port command_sys.brake_as_cmd_2 -> brake_as_cmd_2;
			brake_as_3 : port command_sys.brake_as_cmd_3 -> brake_as_cmd_3;
			brake_as_4 : port command_sys.brake_as_cmd_4 -> brake_as_cmd_4;
			
			as_pair_1_3 : port command_sys.as_cmd_pair_1_3 -> as_cmd_pair_1_3;
			as_pair_2_4 : port command_sys.as_cmd_pair_2_4 -> as_cmd_pair_2_4;
			
			-- Connections to monitor system
			monitor_power : port power -> monitor_sys.power;
			monitor_L_pedal : port elec_pedal_pos_L -> monitor_sys.elec_pedal_pos_L;
			monitor_R_pedal : port elec_pedal_pos_R -> monitor_sys.elec_pedal_pos_R;
			monitor_ground_speed : port ground_speed -> monitor_sys.ground_speed;
			monitor_wheel_rolling_1 : port wheel_rolling_1 -> monitor_sys.wheel_rolling_1;
			monitor_wheel_rolling_2 : port wheel_rolling_2 -> monitor_sys.wheel_rolling_2;
			monitor_wheel_rolling_3 : port wheel_rolling_3 -> monitor_sys.wheel_rolling_3;
			monitor_wheel_rolling_4 : port wheel_rolling_4 -> monitor_sys.wheel_rolling_4;
			
			brake_as_1_monitor : port command_sys.brake_as_cmd_1 -> monitor_sys.brake_as_cmd_1;
			brake_as_2_monitor : port command_sys.brake_as_cmd_2 -> monitor_sys.brake_as_cmd_2;
			brake_as_3_monitor : port command_sys.brake_as_cmd_3 -> monitor_sys.brake_as_cmd_3; 
			brake_as_4_monitor : port command_sys.brake_as_cmd_4 -> monitor_sys.brake_as_cmd_4;
			
			as_pair_1_5_monitor : port command_sys.as_cmd_pair_1_3 -> monitor_sys.as_cmd_pair_1_3;
			as_pair_2_6_monitor : port command_sys.as_cmd_pair_2_4 -> monitor_sys.as_cmd_pair_2_4;
			
			-- Connections to command system
			command_power : port power -> command_sys.power;
			command_L_pedal : port elec_pedal_pos_L -> command_sys.elec_pedal_pos_L;
			command_R_pedal : port elec_pedal_pos_R -> command_sys.elec_pedal_pos_R;
			command_ground_speed : port ground_speed -> command_sys.ground_speed;
			command_wheel_rolling_1 : port wheel_rolling_1 -> command_sys.wheel_rolling_1;
			command_wheel_rolling_2 : port wheel_rolling_2 -> command_sys.wheel_rolling_2;
			command_wheel_rolling_3 : port wheel_rolling_3 -> command_sys.wheel_rolling_3;
			command_wheel_rolling_4 : port wheel_rolling_4 -> command_sys.wheel_rolling_4;
		
      annex safety{**
	  analyze : max 1 fault 
   **};
		

	end Channel.inst;
end Channel;