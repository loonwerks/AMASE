package MonitorSystem
public
with Base_Types;

	system MonitorSystem
		features
			-- Inputs
			power : in data port Base_Types::Boolean; 
			ground_speed : in data port Base_Types::Integer;
			
			elec_pedal_pos_L : in data port Base_Types::Boolean;
			elec_pedal_pos_R : in data port Base_Types::Boolean; 
			
			wheel_rolling_1 : in data port Base_Types::Boolean;
			wheel_rolling_2 : in data port Base_Types::Boolean;  
			wheel_rolling_3 : in data port Base_Types::Boolean;
			wheel_rolling_4 : in data port Base_Types::Boolean;
			
			brake_as_cmd_1 : in data port Base_Types::Boolean;
			brake_as_cmd_2 : in data port Base_Types::Boolean;
			brake_as_cmd_3 : in data port Base_Types::Boolean;
			brake_as_cmd_4 : in data port Base_Types::Boolean;
			
			as_cmd_pair_1_3 : in data port Base_Types::Boolean; 
			as_cmd_pair_2_4 : in data port Base_Types::Boolean;
			
			-- Output
			bscu_validity : out data port Base_Types::Boolean;
		
		annex agree {** 
			
			assume "(MonitorSystem) Ground speed always greater than zero." : 
					(ground_speed >= 0) and (ground_speed <= 10);
			

			-- BSCU Validity
			property SPEED = ground_speed > 0;
			property PAIR_ROLL_13 = wheel_rolling_1 and wheel_rolling_3;
			property PAIR_ROLL_24 = wheel_rolling_2 and wheel_rolling_4;
			
			guarantee "(MonitorSystem) 1 BSCU valid contract." : 
					true -> (bscu_validity <=>
						  (power) 
					  and ((elec_pedal_pos_L and ((SPEED and wheel_rolling_1) or (not SPEED))) <=> brake_as_cmd_1)
					  and ((elec_pedal_pos_R and ((SPEED and wheel_rolling_2) or (not SPEED))) <=> brake_as_cmd_2)
					  and ((elec_pedal_pos_L and ((SPEED and wheel_rolling_3) or (not SPEED))) <=> brake_as_cmd_3)
					  and ((elec_pedal_pos_R and ((SPEED and wheel_rolling_4) or (not SPEED))) <=> brake_as_cmd_4))
					  and ((SPEED and (not PAIR_ROLL_13)) <=> as_cmd_pair_1_3)
					  and ((SPEED and (not PAIR_ROLL_24)) <=> as_cmd_pair_2_4);
			
			
			guarantee "(MonitorSystem) If we have no power, bscu is not valid":
					true -> (not power => not bscu_validity);
										
		**}	;
		
		annex safety {**
			fault MonitorSystem_ErroneousData "(MonitorSystem) Inverted boolean fault: sys validity incorrect." : faults.inverted_fail {
				inputs: val_in <- bscu_validity; 
				outputs: bscu_validity <- val_out;    
        		probability: 8.0E-7 ;
				duration: permanent;
			}
			
		**};
	end MonitorSystem;
	
	system implementation MonitorSystem.inst
		
	end MonitorSystem.inst;
end MonitorSystem;