package AlternateBrakeSystem 
public
with MeterValve;
with Base_Types;

	system AlternateBrakeSystem
		features
			-- Inputs
			hyd_pressure_in : in data port Base_Types::Integer; 
			mech_pedal_pos_L : in data port Base_Types::Boolean;
			mech_pedal_pos_R : in data port Base_Types::Boolean;
			as_cmd_pair_1_3 : in data port Base_Types::Boolean; 
			as_cmd_pair_2_4 : in data port Base_Types::Boolean;
			
			false_to_mv : in data port Base_Types::Boolean;
			
			-- Outputs (to meter valves and antiskid shutoff valves)
			hyd_pressure_out1 : out data port Base_Types::Integer;
			hyd_pressure_out2 : out data port Base_Types::Integer;
			
			annex agree {**
				
				assume "Pressure input from 0 to 10 inclusive" : true -> (hyd_pressure_in >= 0 and hyd_pressure_in <= 10);
				
				assume "False is passed to meter valves for elec_cmd" :
					true -> (false_to_mv = false);
					
				guarantee "(AlternateBrakeSystem) Pair 1,3: The hyd pressure output is positive if and only if
							pedal position is true, antiskid is not commanded for the pair, and hyd pressure is positive." :
							true -> (hyd_pressure_out1 > 0 <=> (mech_pedal_pos_L and hyd_pressure_in > 0 and (not as_cmd_pair_1_3)));
							
				guarantee "(AlternateBrakeSystem) Pair 2,4: The hyd pressure output is positive if and only if
							pedal position is true, antiskid is not commanded for the pair, and hyd pressure is positive." :
							true -> (hyd_pressure_out2 > 0 <=> (mech_pedal_pos_R and hyd_pressure_in > 0 and (not as_cmd_pair_2_4)));
							
				
			**};
			
	end AlternateBrakeSystem;
	
	system implementation AlternateBrakeSystem.inst
		subcomponents
			mv1 : system MeterValve::MeterValve;
			mv2 : system MeterValve::MeterValve;
			antiskid_shutoff_valve_1 : system AntiskidShutoffValve;
			antiskid_shutoff_valve_2 : system AntiskidShutoffValve;
			
		connections
			-- To as_shutoff valves
			antiskid_cmd_to_1_3 : port as_cmd_pair_1_3 -> antiskid_shutoff_valve_1.antiskid_cmd;
			antiskid_cmd_to_2_4 : port as_cmd_pair_2_4 -> antiskid_shutoff_valve_2.antiskid_cmd;
			
			-- Pressure to shutoff valves
			antiskid_pressure_1 : port hyd_pressure_in -> antiskid_shutoff_valve_1.hyd_pressure_in;
			antiskid_pressure_2 : port hyd_pressure_in -> antiskid_shutoff_valve_2.hyd_pressure_in;
			
			-- Pedal pos to meter valves
			pedal_pos_to_mv1_L : port mech_pedal_pos_L -> mv1.mech_cmd;
			pedal_pos_to_mv2_R : port mech_pedal_pos_L -> mv2.mech_cmd;
			
			-- pressure to mvs
			pressure_to_mv_1 : port antiskid_shutoff_valve_1.hyd_pressure_out -> mv1.hyd_pressure_in;
			pressure_to_mv_2 : port antiskid_shutoff_valve_2.hyd_pressure_out -> mv2.hyd_pressure_in;
			
			-- Outputs
			hyd_press_out_1 : port mv1.hyd_pressure_out -> hyd_pressure_out1;
			hyd_press_out_2 : port mv2.hyd_pressure_out -> hyd_pressure_out2;
			
			-- elec cmd in meter valves is always false for alt system
			false_to_mv_1 : port false_to_mv -> mv1.elec_cmd;
			false_to_mv_2 : port false_to_mv -> mv2.elec_cmd;
			

		annex safety{**
	
		analyze : max 2 fault
		**}	;		
	end AlternateBrakeSystem.inst;

	
	system AntiskidShutoffValve
		features
			-- Inputs (from alternate system)
			antiskid_cmd : in data port Base_Types::Boolean;
			hyd_pressure_in : in data port Base_Types::Integer;
			
			-- Outputs 
			-- pressure out goes to meter valve
			hyd_pressure_out : out data port Base_Types::Integer;
			
			annex agree {**
				
				guarantee "(AntiskidShutoffValve) If pressure in is zero and antiskid commanded then hyd pressure out is zero.
							And if hyd pressure in is positive and antiskid is not commanded, then pressure out is positive and equal
							to the hyd pressure in." :
							
							true -> (
								if ((hyd_pressure_in = 0) or antiskid_cmd) then (hyd_pressure_out = 0)
									else (hyd_pressure_out = hyd_pressure_in)
								);
							
				guarantee "(AntiskidShutoff) Output from 0 to 10" : true -> (hyd_pressure_out <= 10 and hyd_pressure_out >= 0);			
			
				-- used for nondeterministic range in fault analysis
				eq low : int = 0;
				eq high : int = 10;
				eq rangeval : int;
			
			**};
			
			
			
			
		
	end AntiskidShutoffValve;
	
	
	system implementation AntiskidShutoffValve.inst
	
		annex agree{**
			assert(low <= rangeval and rangeval <= high);
		**};
		
		annex safety {**

			fault AntiskidShutoffValve_FailedOpen "(AntiskidShutoff) Stuck open fault.": faults.fail_to {
				inputs: val_in <- hyd_pressure_out, alt_val <- hyd_pressure_in;     
				outputs: hyd_pressure_out <- val_out;    
        		probability: 3.25E-6 ;
				duration: permanent;
			}
			
			fault AntiskidShutoffValve_FailedClosed "(AntiskidShutoff) Stuck closed fault." : faults.fail_to {
				inputs: val_in <- hyd_pressure_out, alt_val <- 0; 
				outputs: hyd_pressure_out <- val_out;    
        		probability: 3.25E-6 ;
				duration: permanent;
			}
			
			fault AntiskidShutoffValve_FailedLastPosition "(AntiskidShutoff) Stuck at last position fault." : faults.fail_to {
				inputs: val_in <- hyd_pressure_out, alt_val <- pre(hyd_pressure_out); 
				outputs: hyd_pressure_out <- val_out;    
        		probability: 3.25E-6 ;
				duration: permanent;
			}
			
			fault AntiskidShutoffValve_FailedRandomPosition "(AntiskidShutoff) Stuck at nondeterministic fault." : faults.fail_to {
				inputs: val_in <- hyd_pressure_out, alt_val <- rangeval; 
				outputs: hyd_pressure_out <- val_out;    
        		probability: 3.25E-6 ;
				duration: permanent;
			}
			
	**};
	end AntiskidShutoffValve.inst;
	
end AlternateBrakeSystem;