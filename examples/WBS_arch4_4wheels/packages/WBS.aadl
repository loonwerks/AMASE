package WBS
public
with ControlSystem;
with PhysicalSystem;
with Base_Types;
with sensor;
	
	system WBS
		features
			-- Inputs
			mechanical_pedal_pos_R : in data port Base_Types::Boolean;
			mechanical_pedal_pos_L : in data port Base_Types::Boolean;
			
			power1 : in data port Base_Types::Boolean;
			power2 : in data port Base_Types::Boolean;
			
			pump_power1 : in data port Base_Types::Boolean;
			pump_power2 : in data port Base_Types::Boolean;
			
			ground_speed : in data port Base_Types::Integer;
			
			hyd_supply1 : in data port Base_Types::Integer;
			hyd_supply2 : in data port Base_Types::Integer;
			
			
			
			-- Outputs
			accum_pressure_display : out data port Base_Types::Integer;
			
			wheel_braking_force1 : out data port Base_Types::Integer;
			wheel_braking_force2 : out data port Base_Types::Integer;
			wheel_braking_force3 : out data port Base_Types::Integer;
			wheel_braking_force4 : out data port Base_Types::Integer;
			
			-- enumerated types : {stopped, rolling}
			wheel_status1 : out data port Base_Types::Boolean;
			wheel_status2 : out data port Base_Types::Boolean;
			wheel_status3 : out data port Base_Types::Boolean;
			wheel_status4 : out data port Base_Types::Boolean;
			
			green_pressure_in_selector_valve : out data port Base_Types::Integer;
			system_validity : out data port Base_Types::Boolean;
	
		annex agree {**
			assume "(WBS) Hydraulic supply and ground speed is bounded from 0 to 10 inclusive." :
					(hyd_supply1 > -1 and hyd_supply1 < 11) and (hyd_supply2 > -1 and hyd_supply2 < 11)
					and (ground_speed > -1 and ground_speed < 11);
					
		-- Properties
		-- All power is supplied
		property POWER = power1 and power2 and pump_power1 and pump_power2;
		-- Hydraulic fluid is at it's max value (10)
		property HYD_PRESSURE_MAX = (hyd_supply1 = 10) and (hyd_supply2 = 10);
		-- Speed is positive
		property SPEED = ground_speed > 0;
		-- wheel rolling
		property W1ROLL = wheel_status1;
		property W2ROLL = wheel_status2;
		property W3ROLL = wheel_status3;
		property W4ROLL = wheel_status4;
	
		**};
	
	end WBS;
	
	system implementation WBS.inst
		subcomponents
			phys_sys : system PhysicalSystem::PhysicalSystem.inst;
			ctrl_sys : system ControlSystem::ControlSystem.inst;
			
			-- Wheel sensors
			wheel_sensor1 : system Sensor::Sensor;
			wheel_sensor2 : system Sensor::Sensor;
			wheel_sensor3 : system Sensor::Sensor;
			wheel_sensor4 : system Sensor::Sensor;
			
			-- Pedal sensors
			pedal_sensor_L : system Sensor::SensorPedalPosition;
			pedal_sensor_R : system Sensor::SensorPedalPosition;
			
		-- Connections 
		connections
			 
			-- Inputs to control system
			
			-- Ground speed
			ground_speed_ctrl : port ground_speed -> ctrl_sys.ground_speed;
			-- power to control
			power_control_1 : port power1 -> ctrl_sys.power_1; 
			power_control_2 : port power2 -> ctrl_sys.power_2;  
			
			-- from pedal sensor to control system
			pedal_sensor_out_L : port pedal_sensor_L.elec_pedal_pos -> ctrl_sys.elec_pedal_pos_L;
			pedal_sensor_out_R : port pedal_sensor_R.elec_pedal_pos -> ctrl_sys.elec_pedal_pos_R;
			
			-- from sensor to ctrl_system
			wheel_status_sensor_out_1 : port wheel_sensor1.wheel_rolling -> ctrl_sys.wheel_rolling_1;
			wheel_status_sensor_out_2 : port wheel_sensor2.wheel_rolling -> ctrl_sys.wheel_rolling_2;
			wheel_status_sensor_out_3 : port wheel_sensor3.wheel_rolling -> ctrl_sys.wheel_rolling_3;
			wheel_status_sensor_out_4 : port wheel_sensor4.wheel_rolling -> ctrl_sys.wheel_rolling_4;
			
			-------------------------------------------------------------------------------------
			-- Inputs to physical system
			  
			-- ground speed 
			ground_speed_phys : port ground_speed -> phys_sys.ground_speed;
			
			-- power to physical pumps 
			power_pump_1 : port power1 -> phys_sys.pump_power1;
			power_pump_2 : port power2 -> phys_sys.pump_power2;
			
			-- hydraulic supply to phys system 
			hyd_supply_1 : port hyd_supply1 -> phys_sys.hyd_supply1;
			hyd_supply_2 : port hyd_supply2 -> phys_sys.hyd_supply2;
			
			-- system validity
			sys_valid : port ctrl_sys.system_validity -> phys_sys.system_validity;
			
			-- brake antiskid commands
			brake_antiskid_1 : port ctrl_sys.brake_as_cmd_1 -> phys_sys.brake_as_cmd_1;
			brake_antiskid_2 : port ctrl_sys.brake_as_cmd_2 -> phys_sys.brake_as_cmd_2;
			brake_antiskid_3 : port ctrl_sys.brake_as_cmd_3 -> phys_sys.brake_as_cmd_3;
			brake_antiskid_4 : port ctrl_sys.brake_as_cmd_4 -> phys_sys.brake_as_cmd_4;
			
			-- antiskid command pairs
			antiskid_pair1 : port ctrl_sys.as_cmd_pair_1_3 -> phys_sys.as_cmd_pair_1_3;
			antiskid_pair2 : port ctrl_sys.as_cmd_pair_2_4 -> phys_sys.as_cmd_pair_2_4;
			
			-- mechanical pedal position
			mech_pedal_position_L : port mechanical_pedal_pos_L -> phys_sys.mech_pedal_pos_L;
			mech_pedal_position_R : port mechanical_pedal_pos_R -> phys_sys.mech_pedal_pos_R;
			---------------------------------------------------------------------------------	
		
			 
			-- Sensor connections
			-- From phys_system to wheel sensor
			wheel_status_sensor_in_1 : port phys_sys.wheel_status1 -> wheel_sensor1.wheel_status;
			wheel_status_sensor_in_2 : port phys_sys.wheel_status2 -> wheel_sensor2.wheel_status;
			wheel_status_sensor_in_3 : port phys_sys.wheel_status3 -> wheel_sensor3.wheel_status;
			wheel_status_sensor_in_4 : port phys_sys.wheel_status4 -> wheel_sensor4.wheel_status;
			
		
			-- from wbs to pedal sensor 
			-----------------------------------------------------------------------------------
			pedal_sensor_in_L : port mechanical_pedal_pos_L -> pedal_sensor_L.mech_pedal_pos;
			pedal_sensor_in_R : port mechanical_pedal_pos_R -> pedal_sensor_R.mech_pedal_pos;
			
			-- To get accumulator pressure display from phys_sys
			accum_pressure_display_in: port phys_sys.accum_pressure_display_in -> accum_pressure_display;
			
			-- Get green pressure display
			green_pressure_in_display : port phys_sys.green_pressure_in_selec_valve -> green_pressure_in_selector_valve;
			
			-- Get control system validity
			control_sys_valid : port ctrl_sys.system_validity -> system_validity;
			
			-- Get wheel_braking_force from phys_sys
			brake_force_1 : port phys_sys.wheel_braking_force1 -> wheel_braking_force1;
			brake_force_2 : port phys_sys.wheel_braking_force2 -> wheel_braking_force2;
			brake_force_3 : port phys_sys.wheel_braking_force3 -> wheel_braking_force3;
			brake_force_4 : port phys_sys.wheel_braking_force4 -> wheel_braking_force4;
			
			-- Get the wheel status from phys_sys
			wheel_status_1 : port phys_sys.wheel_status1 -> wheel_status1;
			wheel_status_2 : port phys_sys.wheel_status2 -> wheel_status2;
			wheel_status_3 : port phys_sys.wheel_status3 -> wheel_status3;
			wheel_status_4 : port phys_sys.wheel_status4 -> wheel_status4;
	
	
	annex agree {**
			
		
--		--------------------------------------------------------------------------------------------------------------
--		-- S18-WBS-R-0321 TOP LEVEL CONTRACT REQUIRED: USES BOTH PHYS AND CNTRL SYSTEM INFO
--		--------------------------------------------------------------------------------------------------------------
--		-- Loss of all wheel braking (unannunciated or annunciated) during landing or RTO shall be less than 5E-7 per flight.
--		--------------------------------------------------------------------------------------------------------------
		lemma "(S18-WBS-R-0321) Never loss of all wheel braking" :
			(true -> (not ((((((((((mechanical_pedal_pos_L and mechanical_pedal_pos_R) and (ground_speed > 0)) and (not (((ctrl_sys.brake_as_cmd_1 and ((green_pressure_in_selector_valve > 0) and system_validity)) or ((mechanical_pedal_pos_L and (not ctrl_sys.as_cmd_pair_1_3)) and ((green_pressure_in_selector_valve = 0) or (not system_validity)))) => (wheel_braking_force1 > 0)))) 
				and (not (((ctrl_sys.brake_as_cmd_2 and ((green_pressure_in_selector_valve > 0) and system_validity)) or ((mechanical_pedal_pos_R and (not ctrl_sys.as_cmd_pair_2_4)) and ((green_pressure_in_selector_valve = 0) or (not system_validity)))) => (wheel_braking_force2 > 0)))) 
				and (not (((ctrl_sys.brake_as_cmd_3 and ((green_pressure_in_selector_valve > 0) and system_validity)) or ((mechanical_pedal_pos_L and (not ctrl_sys.as_cmd_pair_1_3)) and ((green_pressure_in_selector_valve = 0) or (not system_validity)))) => (wheel_braking_force3 > 0)))) 
				and (not (((ctrl_sys.brake_as_cmd_4 and ((green_pressure_in_selector_valve > 0) and system_validity)) or ((mechanical_pedal_pos_R and (not ctrl_sys.as_cmd_pair_2_4)) and ((green_pressure_in_selector_valve = 0) or (not system_validity)))) => (wheel_braking_force4 > 0))))))))));
		
		--------------------------------------------------------------------------------------------------------------
		-- S18-WBS-R-0322-left(-right)
		-- Asymmetrical left and right braking. 
		-- (AIR6110) Asymmetrical loss of wheel braking coupled with loss of rudder or nose wheel steering 
		-- during landing shall be less than 5E-7 per flight. 
		--------------------------------------------------------------------------------------------------------------
		lemma "(S18-WBS-R-0322-left) Asymmetrical left braking." :
			(true -> ((((((ctrl_sys.brake_as_cmd_1 and ((green_pressure_in_selector_valve > 0) and system_validity))or ((mechanical_pedal_pos_L and (not ctrl_sys.as_cmd_pair_1_3)) and ((green_pressure_in_selector_valve = 0) or (not system_validity)))) => (wheel_braking_force1 > 0)) 
				and (((ctrl_sys.brake_as_cmd_3 and ((green_pressure_in_selector_valve > 0) and system_validity)) or ((mechanical_pedal_pos_L and (not ctrl_sys.as_cmd_pair_1_3)) and ((green_pressure_in_selector_valve = 0) or (not system_validity)))) => (wheel_braking_force3 > 0))))));

		lemma "(S18-WBS-R-0322-right) Asymmetrical right braking" :
			(true -> ((((((ctrl_sys.brake_as_cmd_2 and ((green_pressure_in_selector_valve > 0) and system_validity)) or ((mechanical_pedal_pos_R and (not ctrl_sys.as_cmd_pair_2_4)) and ((green_pressure_in_selector_valve = 0) or (not system_validity)))) => (wheel_braking_force2 > 0)) 
				and (((ctrl_sys.brake_as_cmd_4 and ((green_pressure_in_selector_valve > 0) and system_validity)) or ((mechanical_pedal_pos_R and (not ctrl_sys.as_cmd_pair_2_4)) and ((green_pressure_in_selector_valve = 0) or (not system_validity)))) => (wheel_braking_force4 > 0))))));
			
			
			
		----------------------------------------------------------------------------------------------------------
		--(S18-WBS-0323) Never inadvertent braking with all wheels locked
		-- This is just an AND of all 8 contracts S18-WBS-0325
		----------------------------------------------------------------------------------------------------------
		lemma "(S18-WBS-0323) Never inadvertent braking with all wheels locked." :
			(true -> (not(POWER) or (not HYD_PRESSURE_MAX) or (mechanical_pedal_pos_L) or (not SPEED) or (wheel_braking_force1 <= 0) or (not W1ROLL))
				 and (not(POWER) or (not HYD_PRESSURE_MAX) or (mechanical_pedal_pos_R) or (not SPEED) or (wheel_braking_force2 <= 0) or (not W2ROLL))
				 and (not(POWER) or (not HYD_PRESSURE_MAX) or (mechanical_pedal_pos_L) or (not SPEED) or (wheel_braking_force3 <= 0) or (not W3ROLL))
				 and (not(POWER) or (not HYD_PRESSURE_MAX) or (mechanical_pedal_pos_R) or (not SPEED) or (wheel_braking_force4 <= 0) or (not W4ROLL))
			);
		
		----------------------------------------------------------------------------------------------------------
		--(S18-WBS-0324) Never inadvertent braking of all wheels
		--    LTLSPEC NAME never_inadvertent_braking_of_all_wheels_norm_guarantee := ( G 
		--		(((((power_1 & power_2) & pump_power_1) & pump_power_2) & hydraulic_supply_1 = 10) & hydraulic_supply_2 = 10
		-- ->  G !(((!mechanical_pedal_pos_L & !mechanical_pedal_pos_R) & (((((((wheel_braking_force_1 > 0 & wheel_braking_force_2 > 0) & wheel_braking_force_3 > 0) & wheel_braking_force_4 > 0) & wheel_braking_force_5 > 0) & wheel_braking_force_6 > 0) & wheel_braking_force_7 > 0) & wheel_braking_force_8 > 0)) & ground_speed > 0)
		----------------------------------------------------------------------------------------------------------
		
		lemma "(S18-WBS-0324) Never inadvertent braking of all wheels." :
			(true -> (not(POWER) or (not HYD_PRESSURE_MAX) or (mechanical_pedal_pos_L) or (mechanical_pedal_pos_R)
				                or (not SPEED)
				                or (wheel_braking_force1 <= 0) or (wheel_braking_force2 <= 0)
				                or (wheel_braking_force3 <= 0) or (wheel_braking_force4 <= 0)));	
		
	
		----------------------------------------------------------------------------------------------------------
		--(S18-WBS-0325) Never inadvertent braking of wheel X
		----------------------------------------------------------------------------------------------------------
		
		property ALL_WHEELS_BRAKE = phys_sys.wheel_braking_force1 > 0 
								    and phys_sys.wheel_braking_force2 > 0 
									and phys_sys.wheel_braking_force3 > 0 
									and phys_sys.wheel_braking_force4 > 0 ; 
					
		property ALL_WHEELS_STOPPED = not phys_sys.wheel_status1 
									  and not phys_sys.wheel_status2
									  and not phys_sys.wheel_status3
									  and not phys_sys.wheel_status4;
									  							  
		property BRAKE_AS_NOT_COMMANDED = not phys_sys.brake_as_cmd_1 
										  and not phys_sys.brake_as_cmd_2 
										  and not phys_sys.brake_as_cmd_3 
										  and not phys_sys.brake_as_cmd_4 ;
										  
		property PEDALS_NOT_PRESSED = not phys_sys.mech_pedal_pos_L 
									  and not phys_sys.mech_pedal_pos_R;
			
			
		lemma "(S18-WBS-0325) Never inadvertent braking of wheel 1" :
					true -> (not(POWER)
						or (not HYD_PRESSURE_MAX) 
						or (mechanical_pedal_pos_L) 
						or (not SPEED) 
						or (wheel_braking_force1 <= 0) 
						or (not W1ROLL));
		
		
		lemma "(S18-WBS-0325) Never inadvertent braking of wheel 2" :
					true -> (not(POWER)
						or (not HYD_PRESSURE_MAX) 
						or (mechanical_pedal_pos_R 
						or (not SPEED) 
						or (wheel_braking_force2 <= 0) 
						or (not W2ROLL)));
					
		lemma "(S18-WBS-0325) Never inadvertent braking of wheel 3" :
					true -> (not(POWER)
						or (not HYD_PRESSURE_MAX) 
						or (mechanical_pedal_pos_L 
						or (not SPEED) 
						or (wheel_braking_force3 <= 0) 
						or (not W3ROLL)));
					
		lemma "(S18-WBS-0325) Never inadvertent braking of wheel 4" :
					true -> (not(POWER)
						or (not HYD_PRESSURE_MAX) 
						or (mechanical_pedal_pos_R 
						or (not SPEED) 
						or (wheel_braking_force4 <= 0) 
						or (not W4ROLL)));		
		
	 
		 
		
		
		
	**};
	
--   annex safety{**
--	  
--	  analyze : probability 1.0E-9 
--	  --analyze : max 1 fault 
--	  --propagate_from: {Pump_HW_Fault@phys_sys.green_hyd_pump} to {HydPump_FailedOff@phys_sys.blue_hyd_pump};
--	  
--   **};
   
   annex safety{**
	  analyze : max 1 fault
	  --analyze : probability 1.0E-9 
   **};
   
end WBS.inst;




end WBS;