package WheelPairCommandSystem
public
with Base_Types;

	system WheelPairCommandSystem
		features
			-- Inputs
			power : in data port Base_Types::Boolean;
			ground_speed : in data port Base_Types::Integer;
			elec_pedal_pos : in data port Base_Types::Boolean;
			wheel_rolling_1 : in data port Base_Types::Boolean;
			wheel_rolling_2 : in data port Base_Types::Boolean;
			
			-- Outputs
			brake_as_cmd_1 : out data port Base_Types::Boolean;
			brake_as_cmd_2 : out data port Base_Types::Boolean;
			as_cmd_out : out data port Base_Types::Boolean;
			
		annex agree {**
			assume "(WheelPairCommandSystem) Ground speed always greater than zero." :  
					(ground_speed >= 0) and (ground_speed <= 10);
			
    		--	    LTLSPEC NAME commands_creation_norm_guarantee := (TRUE ->  G 
			-- (((((power & ground_speed > 0) & (!wheel_rolling_1 | !wheel_rolling_2)) <-> as_cmd_out) 
			--  & (((power & electrical_pedal_pos) & ((ground_speed > 0 & wheel_rolling_1) | ground_speed = 0)) <-> brake_as_cmd_out_1)) 
			--  & (((power & electrical_pedal_pos) & ((ground_speed > 0 & wheel_rolling_2) | ground_speed = 0)) <-> brake_as_cmd_out_2))); 
    		
    		property AS_CMD_OUT = ((power and ground_speed > 0) and (not wheel_rolling_1 or not wheel_rolling_2)) <=> as_cmd_out;
    		property BRAKE_AS_1 = ((power and elec_pedal_pos) and ((ground_speed > 0 and wheel_rolling_1) or ground_speed = 0)) <=> brake_as_cmd_1;
    		property BRAKE_AS_2 = ((power and elec_pedal_pos) and ((ground_speed > 0 and wheel_rolling_2) or ground_speed = 0)) <=> brake_as_cmd_2;
    		
    		guarantee "(WheelPairCommandSystem) 1 Assign antiskid command and brake commands according to input values." :
						true -> AS_CMD_OUT;
						
			guarantee "(WheelPairCommandSystem) 2 Assign antiskid command and brake commands according to input values." :
						true -> BRAKE_AS_1;
						
			guarantee "(WheelPairCommandSystem) 3 Assign antiskid command and brake commands according to input values." :
						true -> BRAKE_AS_2;
			
		**};	 
	end WheelPairCommandSystem;
	
	system implementation WheelPairCommandSystem.inst
		subcomponents
			alternate_command_calculator : system AlternateCommandCalculator;
			normal_command_calculator_1 : system NormalCommandCalculator;
			normal_command_calculator_2 : system NormalCommandCalculator;
			antiskid_command_facility_1 : system AntiSkidCommandFacility;
			antiskid_command_facility_2 : system AntiSkidCommandFacility;
			brake_command_facility : system BrakeCommandFacility;
			
		connections
		
			-- Inputs to alternate command calculator
			power_to_alt_calc : port power -> alternate_command_calculator.power;
			as_cmd_fac_1 : port antiskid_command_facility_1.as_cmd -> alternate_command_calculator.as_cmd_1;
			as_cmd_fac_2 : port antiskid_command_facility_2.as_cmd -> alternate_command_calculator.as_cmd_2;
			
			-- Inputs to normal command calc 1
			power_to_norm_calc_1 : port power -> normal_command_calculator_1.power;  
			brake_cmd_to_norm_calc_1 : port brake_command_facility.brake_cmd -> normal_command_calculator_1.brake_cmd;
			as_cmd_fac_1_to_norm_calc_1 : port antiskid_command_facility_1.as_cmd -> normal_command_calculator_1.as_cmd;
			
			-- Inputs to normal command calc 2
			power_to_norm_calc_2 : port power -> normal_command_calculator_2.power; 
			brake_cmd_to_norm_calc_2 : port brake_command_facility.brake_cmd -> normal_command_calculator_2.brake_cmd;
			as_cmd_fac_2_to_norm_calc_2 : port antiskid_command_facility_2.as_cmd -> normal_command_calculator_2.as_cmd;
			
			-- Inputs to as command facility 1
			power_to_as_facility_1 : port power -> antiskid_command_facility_1.power;
			ground_speed_to_as_facility_1 : port ground_speed -> antiskid_command_facility_1.ground_speed;
			wheel_rolling_1_to_as_facility_1 : port wheel_rolling_1 -> antiskid_command_facility_1.wheel_rolling;
			
			-- Inputs to as command facility 2
			power_to_as_facility_2 : port power -> antiskid_command_facility_2.power;
			ground_speed_to_as_facility_2 : port ground_speed -> antiskid_command_facility_2.ground_speed;
			wheel_rolling_1_to_as_facility_2 : port wheel_rolling_2 -> antiskid_command_facility_2.wheel_rolling;
			
			-- Inputs to brake command facility
			pedal_pos_to_brake_facility : port elec_pedal_pos -> brake_command_facility.electrical_pedal_pos;
			power_to_brake_facility : port power -> brake_command_facility.power;
			
			
			-- Heading out of this component
			as_cmd_out_from_alt_calc : port alternate_command_calculator.as_cmd_out -> as_cmd_out;
			brake_as_cmd_1_from_norm_calc_1 : port normal_command_calculator_1.brake_as_cmd -> brake_as_cmd_1;
			brake_as_cmd_2_from_norm_calc_2 : port normal_command_calculator_2.brake_as_cmd -> brake_as_cmd_2;
			
		
		
	end WheelPairCommandSystem.inst;
	
	
	
	system AlternateCommandCalculator
		features 
			--Inputs
			power : in data port Base_Types::Boolean;
			as_cmd_1 : in data port Base_Types::Boolean;
			as_cmd_2 : in data port Base_Types::Boolean;
			
			-- Outputs
			as_cmd_out : out data port Base_Types::Boolean;
			
		annex agree {**
			
    		-- alternate_command_computation_norm_guarantee := (TRUE ->  G ((power & (as_cmd_in_1 | as_cmd_in_2)) <-> as_cmd_out));
			guarantee "(AlternateCommandCalculator) Antiskid command is true if and only if power and either one of the antiskid inputs is true." :
						true -> (power and (as_cmd_1 or as_cmd_2)) <=> as_cmd_out;
			
		**};
		annex safety {**
			fault AlternateCommandCalculator_ErroneousData "(AlternateCommandCalculator) Inverted boolean fault." : faults.inverted_fail {
				inputs: val_in <- as_cmd_out; 
				outputs: as_cmd_out <- val_out;    
        		probability: 9.0E-6 ;
				duration: permanent;
			}
			
		**};
	end AlternateCommandCalculator;
	
	system implementation AlternateCommandCalculator.inst
		
	end AlternateCommandCalculator.inst;
	
	
	
	system NormalCommandCalculator
		features 
			--Inputs
			power : in data port Base_Types::Boolean;
			brake_cmd : in data port Base_Types::Boolean;
			as_cmd : in data port Base_Types::Boolean; 
			
			-- Outputs
			brake_as_cmd : out data port Base_Types::Boolean;
		
		annex agree {**
			
   			--  normal_command_computation_norm_guarantee := (TRUE ->  G (((power & brake_cmd) & !as_cmd) <-> brake_as_cmd));
			guarantee "(NormalCommandCalculator) Brake command is true if and only if power, brake_cmd, and not antiskid." :
						true -> (power and brake_cmd and not as_cmd) <=> brake_as_cmd;
			
		**};
		
		annex safety {**
			fault NormalCommandCalculator_ErroneousData "(NormalCommandCalculator) Inverted boolean fault." : faults.inverted_fail {
				inputs: val_in <- brake_as_cmd; 
				outputs: brake_as_cmd <- val_out;    
        		probability: 9.0E-6 ;
				duration: permanent;
			}
			
		**};	
	end NormalCommandCalculator;
	
	system implementation NormalCommandCalculator.inst
		
	end NormalCommandCalculator.inst;
	
	
	
	system AntiskidCommandFacility
		features
			-- Inputs
			wheel_rolling : in data port Base_Types::Boolean;
			power : in data port Base_Types::Boolean;
			ground_speed : in data port Base_Types::Integer;
			
			-- Output
			as_cmd : out data port Base_Types::Boolean;
		
		annex agree {**
			
			-- as_command_creation_norm_guarantee := (TRUE ->  G (((power & ground_speed > 0) & !wheel_rolling) <-> as_cmd));
			guarantee "(AntiskidCommandFacility) antiskid command is true if and only if power, wheel not rolling, and ground speed is positive." :
						true -> (power and ground_speed > 0 and not wheel_rolling) <=> as_cmd;
			
		**};
		
		annex safety {**
			fault AntiskidCommandFacility_ErroneousData "(AntiskidCommandFacility) Inverted boolean fault." : faults.inverted_fail {
				inputs: val_in <- as_cmd; 
				outputs: as_cmd <- val_out;    
        		probability: 9.0E-6 ;
				duration: permanent;
			}
			
		**};
	end AntiskidCommandFacility;
	
	system implementation AntiskidCommandFacility.inst
		
	end AntiskidCommandFacility.inst;
	
	
	
	system BrakeCommandFacility
		features
			-- Inputs
			electrical_pedal_pos : in data port Base_Types::Boolean;
			power : in data port Base_Types::Boolean;
			-- Output
			brake_cmd : out data port Base_Types::Boolean;
		
		annex agree {**
			
			-- brake_command_creation_norm_guarantee := (TRUE ->  G ((power & electrical_pedal_pos) <-> brake_cmd));
			guarantee "(BrakeCommandFacility) brake command output is equivalent to power and elec_pedal_position.":
						true -> (power and electrical_pedal_pos) <=> brake_cmd;
			
		**}	;
		
		annex safety {**
			fault BrakeCommandFacility_ErroneousData "(BrakeCommandFacility) Inverted boolean fault." : faults.inverted_fail {
				inputs: val_in <- brake_cmd; 
				outputs: brake_cmd <- val_out;    
        		probability: 9.0E-6 ;
				duration: permanent;
			}
			
		**};
	end BrakeCommandFacility;
	
	system implementation BrakeCommandFacility.inst
		
	end BrakeCommandFacility.inst;
end WheelPairCommandSystem;