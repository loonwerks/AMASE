package HydraulicPump
public
with Base_Types;

	system HydraulicPump
		features
			-- Inputs
			power : in data port Base_Types::Boolean;
			hyd_supply : in data port Base_Types::Integer;
			-- Output
			hyd_pressure_out : out data port Base_Types::Integer;
		
		annex agree {**
			assume "Pressure input from 0 to 10 inclusive" : true -> (hyd_supply >= 0 and hyd_supply <= 10);
			
			guarantee "(HydraulicPump) Hyd pressure out first step" :
						(hyd_pressure_out = 0) -> true;
			
			-- supply_hydraulic_norm_guarantee := (TRUE -> ( G 
			-- 		((power & hydraulic_supply > 0) -> hyd_pressure_out > 0) 
			-- 	&  G ((!power | hydraulic_supply = 0) -> hyd_pressure_out = 0)));
			guarantee "(HydraulicPump) If we have power and hydraulic sypply, then pressure out is positive, else it is zero." :
						true -> (
							if (power and hyd_supply > 0) then (hyd_pressure_out = hyd_supply)
								else (hyd_pressure_out = 0)
						);
			
		**};
		
		
		-- Fault defined as "Fail off" 
		annex safety {**
			fault HydPump_FailedOff "(HydraulicPump) Stuck off fault." : faults.fail_to {
				inputs: val_in <- hyd_pressure_out, alt_val <- 0; 
				outputs: hyd_pressure_out <- val_out;    
        		probability: 3.0E-5 ;
				duration: permanent;
			}
			
			
--		HW_fault Pump_HW_Fault "Colocated pump failure": {
--			probability: 1.0E-5;
--			duration: permanent;
--		}
			
		**};
	end HydraulicPump;
	
	system implementation HydraulicPump.inst
	end HydraulicPump.inst;
	
	
	
end HydraulicPump;