package CommandSystem
public
with WheelPairCommandSystem;
with Base_Types;

	system CommandSystem
		features
			-- Inputs
			power : in data port Base_Types::Boolean;
			ground_speed : in data port Base_Types::Integer;
			elec_pedal_pos_L : in data port Base_Types::Boolean;
			elec_pedal_pos_R : in data port Base_Types::Boolean;
			wheel_rolling_1 : in data port Base_Types::Boolean;
			wheel_rolling_2 : in data port Base_Types::Boolean;
			wheel_rolling_3 : in data port Base_Types::Boolean;
			wheel_rolling_4 : in data port Base_Types::Boolean;
			wheel_rolling_5 : in data port Base_Types::Boolean;
			wheel_rolling_6 : in data port Base_Types::Boolean;
			wheel_rolling_7 : in data port Base_Types::Boolean;
			wheel_rolling_8 : in data port Base_Types::Boolean;
			
			-- Outputs
			brake_as_cmd_1 : out data port Base_Types::Boolean;
			brake_as_cmd_2 : out data port Base_Types::Boolean;
			brake_as_cmd_3 : out data port Base_Types::Boolean;
			brake_as_cmd_4 : out data port Base_Types::Boolean;
			brake_as_cmd_5 : out data port Base_Types::Boolean;
			brake_as_cmd_6 : out data port Base_Types::Boolean;
			brake_as_cmd_7 : out data port Base_Types::Boolean;
			brake_as_cmd_8 : out data port Base_Types::Boolean;
			as_cmd_pair_1_5 : out data port Base_Types::Boolean;
			as_cmd_pair_2_6 : out data port Base_Types::Boolean;
			as_cmd_pair_3_7 : out data port Base_Types::Boolean;
			as_cmd_pair_4_8 : out data port Base_Types::Boolean;
		
		annex agree {**
			assume "(CommandSystem) Ground speed always greater than zero." : 
					(ground_speed >= 0) and (ground_speed <= 10);
			
			-- command_creation_alternate_1_norm_guarantee := (TRUE ->  
			-- 		G (((power & ground_speed > 0) & (!wheel_rolling_1 | !wheel_rolling_5)) <-> as_cmd_pair_1_5));
			guarantee "(CommandSystem) Pair 1,5: Create alternate commands based on power, grond speed and wheel rolling status" :
				true -> as_cmd_pair_1_5 <=> (power and ground_speed > 0 and (not wheel_rolling_1 or not wheel_rolling_5));
				
			guarantee "(CommandSystem) Pair 2,6: Create alternate commands based on power, grond speed and wheel rolling status" :
				true -> as_cmd_pair_2_6 <=> (power and ground_speed > 0 and (not wheel_rolling_2 or not wheel_rolling_6));
				
			guarantee "(CommandSystem) Pair 3,7: Create alternate commands based on power, grond speed and wheel rolling status" :
				true -> as_cmd_pair_3_7 <=> (power and ground_speed > 0 and (not wheel_rolling_3 or not wheel_rolling_7));
				
			guarantee "(CommandSystem) Pair 4,8: Create alternate commands based on power, grond speed and wheel rolling status" :
				true -> as_cmd_pair_4_8 <=> (power and ground_speed > 0 and (not wheel_rolling_4 or not wheel_rolling_8));
				
			--  command_creation_normal_1_norm_guarantee := (TRUE ->  
			--     		G (((power & electrical_pedal_pos_L) & ((ground_speed > 0 & wheel_rolling_1) | ground_speed = 0)) <-> brake_as_cmd_1)
			guarantee "(CommandSystem) Wheel 1: brake command to wheel one based on power, pedal, speed, and wheel rolling status." :
						true -> ((power and elec_pedal_pos_L and ((ground_speed > 0 and wheel_rolling_1) or ground_speed = 0))	
									<=> brake_as_cmd_1);
			
			
			guarantee "(CommandSystem) Wheel 2: brake command to wheel one based on power, pedal, speed, and wheel rolling status." :
						true -> ((power and elec_pedal_pos_L and ((ground_speed > 0 and wheel_rolling_2) or ground_speed = 0))	
									<=> brake_as_cmd_2);
			
			guarantee "(CommandSystem) Wheel 3: brake command to wheel one based on power, pedal, speed, and wheel rolling status." :
						true -> ((power and elec_pedal_pos_R and ((ground_speed > 0 and wheel_rolling_3) or ground_speed = 0))	
									<=> brake_as_cmd_3);
			
			guarantee "(CommandSystem) Wheel 4: brake command to wheel one based on power, pedal, speed, and wheel rolling status." :
						true -> ((power and elec_pedal_pos_R and ((ground_speed > 0 and wheel_rolling_4) or ground_speed = 0))	
									<=> brake_as_cmd_4);
			
			guarantee "(CommandSystem) Wheel 5: brake command to wheel one based on power, pedal, speed, and wheel rolling status." :
						true -> ((power and elec_pedal_pos_L and ((ground_speed > 0 and wheel_rolling_5) or ground_speed = 0))	
									<=> brake_as_cmd_5);
			
			guarantee "(CommandSystem) Wheel 6: brake command to wheel one based on power, pedal, speed, and wheel rolling status." :
						true -> ((power and elec_pedal_pos_L and ((ground_speed > 0 and wheel_rolling_6) or ground_speed = 0))	
									<=> brake_as_cmd_6);
			
			guarantee "(CommandSystem) Wheel 7: brake command to wheel one based on power, pedal, speed, and wheel rolling status." :
						true -> ((power and elec_pedal_pos_R and ((ground_speed > 0 and wheel_rolling_7) or ground_speed = 0))	
									<=> brake_as_cmd_7);
			
			guarantee "(CommandSystem) Wheel 8: brake command to wheel one based on power, pedal, speed, and wheel rolling status." :
						true -> ((power and elec_pedal_pos_R and ((ground_speed > 0 and wheel_rolling_8) or ground_speed = 0))	
									<=> brake_as_cmd_8);
			
		**};
		
	end CommandSystem;
	
	system implementation CommandSystem.inst
		subcomponents
			w1_w5_cmd_sys : system WheelPairCommandSystem::WheelPairCommandSystem.inst;
			w2_w6_cmd_sys : system WheelPairCommandSystem::WheelPairCommandSystem.inst;
			w3_w7_cmd_sys : system WheelPairCommandSystem::WheelPairCommandSystem.inst;
			w4_w8_cmd_sys : system WheelPairCommandSystem::WheelPairCommandSystem.inst;
		
		connections
			-- connect the wheel pair command system to the outputs leaving 
			-- this command system
			brake_as_1 : port w1_w5_cmd_sys.brake_as_cmd_1 -> brake_as_cmd_1;
			brake_as_5 : port w1_w5_cmd_sys.brake_as_cmd_2 -> brake_as_cmd_5;
			as_pair_1_5 : port 	w1_w5_cmd_sys.as_cmd_out -> as_cmd_pair_1_5;
			brake_as_2 : port w2_w6_cmd_sys.brake_as_cmd_1 -> brake_as_cmd_2;
			brake_as_6 : port w2_w6_cmd_sys.brake_as_cmd_2 -> brake_as_cmd_6;
			as_pair_2_6 : port 	w2_w6_cmd_sys.as_cmd_out -> as_cmd_pair_2_6;
			brake_as_3 : port w3_w7_cmd_sys.brake_as_cmd_1 -> brake_as_cmd_3;
			brake_as_7 : port w3_w7_cmd_sys.brake_as_cmd_2 -> brake_as_cmd_7;
			as_pair_3_7 : port 	w3_w7_cmd_sys.as_cmd_out -> as_cmd_pair_3_7;
			brake_as_4 : port w4_w8_cmd_sys.brake_as_cmd_1 -> brake_as_cmd_4;
			brake_as_8 : port w4_w8_cmd_sys.brake_as_cmd_2 -> brake_as_cmd_8;
			as_pair_4_8 : port 	w4_w8_cmd_sys.as_cmd_out -> as_cmd_pair_4_8;
			
			-- Send power to the wheel pair systems
			power_1_5 : port power -> w1_w5_cmd_sys.power;
			power_2_6 : port power -> w2_w6_cmd_sys.power;
			power_3_7 : port power -> w3_w7_cmd_sys.power;
			power_4_8 : port power -> w4_w8_cmd_sys.power;
			
			-- Groundspeed
			ground_speed_1_5 : port ground_speed -> w1_w5_cmd_sys.ground_speed;
			ground_speed_2_6 : port ground_speed -> w2_w6_cmd_sys.ground_speed;
			ground_speed_3_7 : port ground_speed -> w3_w7_cmd_sys.ground_speed;
			ground_speed_4_8 : port ground_speed -> w4_w8_cmd_sys.ground_speed;
			
			-- Pedal
			-- L goes to 1_5 and 2_6
			-- R goes to 3_7 and 4_8
			elec_pedal_pos_L_1_5 : port elec_pedal_pos_L -> w1_w5_cmd_sys.elec_pedal_pos;
			elec_pedal_pos_L_2_6 : port elec_pedal_pos_L -> w2_w6_cmd_sys.elec_pedal_pos;
			elec_pedal_pos_R_3_7 : port elec_pedal_pos_R -> w3_w7_cmd_sys.elec_pedal_pos;
			elec_pedal_pos_R_4_8 : port elec_pedal_pos_R -> w4_w8_cmd_sys.elec_pedal_pos; 
			
			wheel_1_roll : port wheel_rolling_1 -> w1_w5_cmd_sys.wheel_rolling_1;
			wheel_5_roll : port wheel_rolling_5 -> w1_w5_cmd_sys.wheel_rolling_2;
			
			wheel_2_roll : port wheel_rolling_2 -> w2_w6_cmd_sys.wheel_rolling_1;
			wheel_6_roll : port wheel_rolling_6 -> w2_w6_cmd_sys.wheel_rolling_2;
			
			wheel_3_roll : port wheel_rolling_3 -> w3_w7_cmd_sys.wheel_rolling_1;
			wheel_7_roll : port wheel_rolling_7 -> w3_w7_cmd_sys.wheel_rolling_2;
			
			wheel_4_roll : port wheel_rolling_4 -> w4_w8_cmd_sys.wheel_rolling_1;
			wheel_8_roll : port wheel_rolling_8 -> w4_w8_cmd_sys.wheel_rolling_2;
	
		annex safety{**
	
		analyze : max 1 fault
		-- MWW: END HACK!
		-- ---------------------------------------------------------------------------	
		**}	;	
	end CommandSystem.inst;
	
	

end CommandSystem;