package wbs

public

with bscu;
with communication;
with valves;
with wheel;
with pump;
with power;
with pedals;
-- with ARP4761;
-- with EMV2;


 
--
--  Dummy component for the wheel brake system.
--
system wbs
	annex agree {**
		guarantee "silly" : true;
	**};
	

end wbs;

system implementation wbs.generic
subcomponents
	-- Pedal subsystem
	pedals			: system pedals::pedals;

	-- Power subsystem
	power      		: system power::power.generic;
	
    --  The two pumps at the top of the diagram
	blue_pump  		: system pump::pump;
	green_pump 		: system pump::pump;
	
	--  The accumulator pump
	accumulator		: system pump::pump;
	
	--  The selector subsystem
	selector   		: system valves::selector;
	bscu       		: system bscu::bscu.generic; 

    -- The accumulator subsystem (new)
    accumulator_valve		: system valves::accumulator_valve;
    
    -- The wheel
	wheel      		: system wheel::wheel;
	
	-- Annunciation device
	annunciation 	: device communication::annunciation.i;
connections
    --accu_to_sel: port accumulator.pressure_output -> selector.accumulator_input ;
	power1     : bus access bscu.pwr1 <-> power.line1;
	power2     : bus access power.line2 <-> bscu.pwr2;
	pedal1     : port pedals.signal1 -> bscu.pedal1;
	pedal2     : port pedals.signal2 -> bscu.pedal2;
--annex EMV2 {
--	-- The WBS system has the following error states:
--	-- Operational
--	-- AnnunciatedTotalBrakingLoss
--	-- UnannunciatedTotalBrakingLoss
--	-- PartialBrakingLoss
--	-- AsymmetricLoss
--	-- InadvertentBrake
--	use types error_library;
--	use behavior error_library::wbs;
--
--	composite error behavior
--	states
----		[blue_pump.Failed and green_pump.Failed and bscu.Failed and accumulator.Failed]-> Failed;
--				[bscu.Failed and accumulator.Failed and annunciation.Failed]-> AnnunciatedBrakingLoss;
--		[blue_pump.Failed and green_pump.Failed and accumulator.Failed and annunciation.Failed]-> AnnunciatedBrakingLoss;
--		[bscu.Failed and accumulator.Failed and annunciation.Failed]-> UnannunciatedBrakingLoss;
--		[blue_pump.Failed and green_pump.Failed and accumulator.Failed and annunciation.Failed]-> UnannunciatedBrakingLoss;
--	end composite;
--	
--	properties
--		EMV2::Severity => ARP4761::Hazardous applies to AnnunciatedBrakingLoss,UnannunciatedBrakingLoss;
--		EMV2::Likelihood => ARP4761::ExtremelyImprobable applies to AnnunciatedBrakingLoss,UnannunciatedBrakingLoss;
--		EMV2::Hazards => 
--			([	crossreference => "AIR6110 page 35 figure 17";
--				failure => "Crew detect the failure when the brakes are operated (unanunciated) or select an appropaite landing spot (annunciated)";
--				phases => ("Landing","RTO");
--				description => "Total Loss of Wheel Braking";
--				comment => "Reference to crew procedures for loss of normal and reserve modes";
--			])
--			applies to AnnunciatedBrakingLoss,UnannunciatedBrakingLoss;
--			
--		EMV2::Severity => ARP4761::Hazardous applies to PartialBrakingLoss;
--		EMV2::Likelihood => ARP4761::ExtremelyImprobable applies to PartialBrakingLoss;
--		EMV2::Hazards => 
--			([	crossreference => "AIR6110 page 35 figure 17";
--				failure => "Crew detects the failure when brakes are used. Use available wheel braking, spoilers and thrust reverses to decelerate.";
--				phases => ("Landing","RTO");
--				description => "Partial Symmetrical Loss of Wheel Braking";
--				comment => "Additional study required to determine classification";
--			])
--			applies to PartialBrakingLoss;
--
--		EMV2::Severity => ARP4761::Catastrophic applies to AsymmetricLoss;
--		EMV2::Likelihood => ARP4761::ExtremelyImprobable applies to AsymmetricLoss;
--		EMV2::Hazards => 
--			([	crossreference => "AIR6110 page 36 figure 17";
--				failure => "Partial Symmetrical Loss of Wheel Braking";
--				phases => ("Landing","RTO");
--				severity => ARP4761::Catastrophic;
--				likelihood => ARP4761::ExtremelyImprobable;
--				description => "Asymmetrical Loss of Wheel Braking";
--				comment => "Decrease in braking performance. Tendency to veer off the runway.";
--			])
--			applies to AsymmetricLoss;
--			
--
--		EMV2::Severity => ARP4761::Catastrophic  applies to InadvertentBrake;
--		EMV2::Likelihood => ARP4761::ExtremelyImprobable applies to InadvertentBrake;
--		EMV2::Hazards => 
--			([	crossreference => "AIR6110 page 37 figure 17";
--				failure => "Inadvertent wheel brake application";
--				phases => ("Takeoff");
--				description => "Undetected inadvertent wheel brake on one wheel without locking the wheel.";
--				comment => "Crew cannot detect the failure by the asymmetry which is very small. Brake temperature can reach very high temperature.";
--			])
--			applies to InadvertentBrake;**};
end wbs.generic;



--  Basic/naive version that abstracts all the valves with
--  a selector_subsystem. This selector subsystem hide
--  the physical logic behind the selector, shutoff and meter/anti-skid
--  valves.
system implementation wbs.basic extends wbs.generic
	subcomponents	bscu : refined to system bscu::bscu.basic;
	--  The selector subsystem
	selector   : refined to system valves::selector_basic{Classifier_Substitution_Rule => Type_Extension;};
	wheel      : refined to system wheel::wheel_one_input.i{Classifier_Substitution_Rule => Type_Extension;};
connections 
	blue_to_selector    : port blue_pump.pressure_output -> selector.blue_input; 
	green_to_selector   : port green_pump.pressure_output -> selector.green_input;
	
	bscu_sel_to_selector : port bscu.Select_Alternate -> selector.Select_Alternate;
	bscu_cmdnor_to_selector : port bscu.cmd_nor -> selector.cmd_nor;
	bscu_cmdalt_to_selector : port bscu.cmd_alt -> selector.cmd_alt;
	
	selector_to_wheel   : port selector.output -> wheel.input;
end wbs.basic;


--
--  Version with more details of the implementation, showing detail
--  about the hydraulic system.
-- 
system implementation wbs.federated
	subcomponents
	-- Pedal subsystem
	pedals			: system pedals::pedals;
	-- Power subsystem
	power      		: system power::power.generic;
    --  The two pumps at the top of the diagram
	blue_pump  		: system pump::pump;
	green_pump 		: system pump::pump;
	--  The accumulator pump
	accumulator		: system pump::pump;
	bscu 			: system bscu::bscu.federated;
	
	-- Annunciation device
	annunciation 	: device communication::annunciation.i;
	selector   : system valves::selector_detailed;
	shutoff    : system valves::boolean_shutoff;
	green_skid : system valves::cmd_shutoff; 
	blue_skid  : system valves::cmd_shutoff; 
	wheel      : system wheel::wheel_two_inputs;
	accumulator_valve : system valves::accumulator_valve;
	
	 
connections 
	pedal1     : port pedals.signal1 -> bscu.pedal1;
	pedal2     : port pedals.signal2 -> bscu.pedal2;
    --  We connect the blue pump directly to the selector valve.
    --  For the green pump, we connect it to the shutoff valve that
    --  is later connected to the selector valve after.
	blue_to_selector    : port blue_pump.pressure_output -> selector.blue_input; 
	green_to_shutoff    : port green_pump.pressure_output -> shutoff.input;
	shutoff_to_selector : port shutoff.shutoff_output -> selector.green_input;
	bscu_to_shutoff     : port bscu.Select_Alternate -> shutoff.boolean_input;
	
	bscu_to_selector    : port bscu.Select_Alternate -> selector.select_alternate;
	 
	
	-- Added bscu to accumulator_valve (new)
	bscu_to_accumulator_valve : port bscu.Select_Alternate -> accumulator_valve.select_alternate;
	-- Add accumulator_valve.blue_skid _output to blue_skid input (new)
	accum_valve_to_blue_skid : port accumulator_valve.blue_skid_output -> blue_skid.input;
	 
	--  Connect the command from the BSCU to the skid valves
	bscu_to_gskid       : port bscu.cmd_nor -> green_skid.cmd_input;
	bscu_to_bskid       : port bscu.cmd_alt -> blue_skid.cmd_input;
	
	--  Connect the output pressure from the selector
	--  to the anti-skid components (changed to only send to green_skid, not blue_skid)
	selector_to_gskid   : port selector.green_output -> green_skid.input;
	
	-- Connect output pressure from selector 
	-- to the accumulator valve component (new)
	selector_to_accumulator_valve   : port selector.blue_output -> accumulator_valve.blue_input;
	
	-- Connect accumulator pump to accumulator valve
    accum_pump_to_accum_valve : port accumulator.pressure_output -> accumulator_valve.accumulator_input;
	
	--  Connect the anti-skid system to the wheel. In this version,
	--  we see the wheel as having two paths for getting the pressure.
	--  We see that as a physical model, not a logical one.
	bskid_to_wheel      : port blue_skid.output -> wheel.blue_input;
	gskid_to_wheel      : port green_skid.output -> wheel.green_input;
	 
	-- Connect the output from wheel to the bscu here
	wheel_to_bscu		: port wheel.output_realized_pressure -> bscu.wheel_pressure 
	   {Communication_Properties::Timing => delayed; };
	
	
	power1	   : bus access power.line1 <-> bscu.pwr1;
	power2     : bus access power.line2 <-> bscu.pwr2;
	
	
	annex agree {**
		 
		eq test : common::command.pedal = pedals.signal1;	
		fun pedal_pressed(pedal: common::command.pedal): bool = pedal.val > 0.0;
		 
		eq pedals_pressed : bool = 
			pedal_pressed(pedals.signal1) and pedal_pressed(pedals.signal2); 
		 
		eq no_skid : bool = not bscu.cmd_nor.activate_antiskid and
						    not bscu.cmd_alt.activate_antiskid;
		
		-- To represent brake pressure applied, we would need a notion of 
		-- values sent along a bus, and I don't know how to do this in AADL.
		eq brake_pressure : bool = wheel.green_input.val > 0.0 or wheel.blue_input.val > 0.0;
	 	   
		-- Top level contract
		lemma "Pedal pressed and no skid implies brake pressure applied" : 
			true -> (pre(pedals_pressed) and pedals_pressed and no_skid => brake_pressure);

 		
 		
 		-- BSCU contracts
 		eq pedals_pressed_bscu: bool = (bscu.pedal1.val > 0.0) and (bscu.pedal2.val > 0.0);
		eq skid_active: bool = (bscu.cmd_nor.activate_antiskid) or (bscu.cmd_alt.activate_antiskid);
		eq commanded_pressure: bool = (bscu.cmd_nor.val > 0.0) or (bscu.cmd_alt.val > 0.0);
 		lemma "If pedals pressed, no skid, and wheel pressure is nonexistant, then
		           select alternate should be true" :
		  (bscu.Select_Alternate = 
		      faults.historically(false -> not (pre(pedals_pressed_bscu and not(skid_active)) 
		      	    => bscu.wheel_pressure.val > 0.0)));
		
		lemma "Pedals pressed and no skid and normal implies pressure commanded" : 
			(bscu.pedals_pressed and (not bscu.skid_active))  =>
				bscu.commanded_pressure; 
				 
		lemma "Alternate pressure and normal pressure don't occur simultaneously." : 
		          not(bscu.cmd_alt.val > 0.0 and bscu.cmd_nor.val > 0.0); 
 		
 		-- For pedals
		lemma "Range for pedal1" : 
		    pedals.signal1.val >= 0.0;
		lemma "Range for pedal2" : 
		    pedals.signal2.val >= 0.0;
 		
	**};

   annex safety{**
   		
	  analyze : max 2 fault
	  propagate_from: {valve_failed@shutoff} to {pressure_fail_blue@selector};
	  
   **};
	
end wbs.federated;
 
system implementation wbs.ima
subcomponents
	-- Pedal subsystem
	pedals			: system pedals::pedals;

	-- Power subsystem
	power      		: system power::power.generic;
	
    --  The two pumps at the top of the diagram
	blue_pump  		: system pump::pump;
	green_pump 		: system pump::pump;
	
	--  The accumulator pump
	accumulator		: system pump::pump;
	
	bscu 			: system bscu::bscu.ima;
	
	-- Annunciation device
	annunciation 	: device communication::annunciation.i;
	selector   : system valves::selector_detailed;
	shutoff    : system valves::boolean_shutoff;
	green_skid : system valves::cmd_shutoff; 
	blue_skid  : system valves::cmd_shutoff; 
	wheel      : system wheel::wheel_two_inputs; 
connections
    --accu_to_sel: port accumulator.pressure_output -> selector.accumulator_input;
	power1     : bus access bscu.pwr1 <-> power.line1;
	power2     : bus access power.line2 <-> bscu.pwr2;
	pedal1     : port pedals.signal1 -> bscu.pedal1;
	pedal2     : port pedals.signal2 -> bscu.pedal2;
    --  We connect the blue pump directly to the selector valve.
    --  For the green pump, we connect it to the shutoff valve that
    --  is later connected to the selector valve after.
	blue_to_selector    : port blue_pump.pressure_output -> selector.blue_input; 
	green_to_shutoff    : port green_pump.pressure_output -> shutoff.input;
	shutoff_to_selector : port shutoff.shutoff_output -> selector.green_input;
	bscu_to_shutoff     : port bscu.Select_Alternate -> shutoff.boolean_input;
	
	bscu_to_selector    : port bscu.Select_Alternate -> selector.select_alternate;
	 
	--  Connect the command from the BSCU to the skid valves
	bscu_to_gskid       : port bscu.cmd_nor -> green_skid.cmd_input;
	bscu_to_bskid       : port bscu.cmd_alt -> blue_skid.cmd_input;
	
	--  Connect the output pressure from the selector
	--  to the anti-skid components
	selector_to_gskid   : port selector.green_output -> green_skid.input;
	selector_to_bskid   : port selector.blue_output  -> blue_skid.input;
	
	--  Connect the anti-skid system to the wheel. In this version,
	--  we see the wheel as having two paths for getting the pressure.
	--  We see that as a physical model, not a logical one.
	bskid_to_wheel      : port blue_skid.output -> wheel.blue_input;
	gskid_to_wheel      : port green_skid.output -> wheel.green_input;
	
	annex agree {**
		eq foo: int;
	
		lemma "hello" : true;
		--eq pedal_pressed : bool = selector.accumulator_input;
		
		-- PedP_NoSkid := (IsPressed(PedalPos1) & !Skid) ;
		-- SomeP := ((Normal_Pressure > threshold) | (Alternate_Pressure > threshold)) ;
		-- IsPressed is a predicate that returns true when the pedal is pressed. PedP_NoSkid and SomeP are then used in a CTL property as:
		-- SPEC AG(PedP_NoSkid -> SomeP) ; 
		
		-- Select_Alternate (bscu.aadl)
		--assert bscu.inverted_occurred = false;                                                 
		 	
	**};
	
end wbs.ima;


end wbs;