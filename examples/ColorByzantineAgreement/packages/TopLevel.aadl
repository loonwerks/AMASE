package TopLevel
public
with Base_Types;
with LeaderNode;
with Nodes;

with Nodes;

	system TopLevel
		features
			color_from_n2 : out data port Base_Types::Boolean;
			color_from_n3 : out data port Base_Types::Boolean;
			color_from_n4 : out data port Base_Types::Boolean;
			
			color_from_leader : out data port Base_Types::Boolean;
			
		annex agree{**
				
				
			guarantee "All nodes agree (i.e., choose the same color after one time step) 
						- when no fault is present" :
				true -> ((color_from_leader = color_from_n2) 
					and (color_from_n2 = color_from_n3)
					and (color_from_n2 = color_from_n4)
				);
		
		
			eq leader_failed : bool;
			eq n2_failed : bool;
			eq n3_failed : bool;
			eq n4_failed : bool;
			
			guarantee "All non-failing nodes agree 
					  (i.e., all agree on the color in the second step)" :
				true -> (if leader_failed 
						 then ((color_from_n2 = color_from_n3)
						and (color_from_n2 = color_from_n4))
					else if n2_failed 
						 then ((color_from_leader = color_from_n3)
							and (color_from_n3 = color_from_n4))
					else if n3_failed 
						 then ((color_from_leader = color_from_n2)
							and (color_from_n2 = color_from_n4))
					else if n4_failed 
						 then ((color_from_leader = color_from_n2)
							and (color_from_n2 = color_from_n3))
					else ((color_from_leader = color_from_n2) 
						and (color_from_n2 = color_from_n3)
						and (color_from_n2 = color_from_n4))
				); 
		
		**};
	end TopLevel;
	
	system implementation TopLevel.impl
		subcomponents
			
			leaderNode : system LeaderNode::leader;
			node2 : system Nodes::Node;
			node3 : system Nodes::Node;
			node4 : system Nodes::Node;
		
		connections
			
			-- Leader node output to nodes 2, 3, 4
			N1B1 : port leaderNode.color -> node2.color_from_leader;
			N1B2 : port leaderNode.color -> node3.color_from_leader;
			N1B3 : port leaderNode.color -> node4.color_from_leader;
			
			
			-- Node 2 output (what it saw from leader node) to nodes 3, 4
			N2B3 : port node2.color_reported_to_me -> node3.color_seen_1;
			N2B4 : port node2.color_reported_to_me -> node4.color_seen_1;
			
			-- Node 3 output to nodes 2, 4
			N3B2 : port node3.color_reported_to_me -> node2.color_seen_1;
			N3B4 : port node3.color_reported_to_me -> node4.color_seen_2;
			
			-- Node 4 output to nodes 2, 3
			N4B2 : port node4.color_reported_to_me -> node2.color_seen_2;
			N4B3 : port node4.color_reported_to_me -> node3.color_seen_2;
			
			-- Node outputs to top level
			N2toTop : port node2.color_results -> color_from_n2;
			N3toTop : port node3.color_results -> color_from_n3;
			N4toTop : port node4.color_results -> color_from_n4;
			
			LeaderToTop : port leaderNode.color_to_top -> color_from_leader;
		
		annex safety {**
			fault_activation: leader_failed = Node_Fault@leaderNode;
			fault_activation: n2_failed = Node_Fault@node2;
			fault_activation: n3_failed = Node_Fault@node3; 
			fault_activation: n4_failed = Node_Fault@node4;
			--analyze: max 2 fault
			analyze: probability 1.0E-10
		**};
	end TopLevel.impl;
end TopLevel;