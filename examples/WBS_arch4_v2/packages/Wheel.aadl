package Wheel
public
with Base_Types;

	system Wheel
		features
			-- Input 
			-- ground speed from top level ctrl_sys 
			ground_speed : in data port Base_Types::Integer;
			-- braking force from wheel_brake component
			brake_force : in data port Base_Types::Integer;
			
			-- Outputs 
			-- Should be enumerated type: {stopped, rolling}
			-- Instead: true = rolling, false = stopped
			wheel_status : out data port Base_Types::Boolean;
			
		annex agree {**
				
				-- braking_behavior_norm_guarantee := 
				--   (TRUE -> G
	   			--		  (((braking_force > 8 & ground_speed > 1) -> next(status) = stopped) 
				--		&  ((braking_force <= 8 & ground_speed > 1) -> next(status) = rolling))) 
				--		&  (ground_speed < 2 -> next(status) = stopped)));
				guarantee "(Wheel) Stopped status: if in previous state braking force > 8 and ground speed < 1, 
							or the ground speed is less than 2, then this state, status is stopped." :
							true -> 
								((pre(brake_force) > 8 and pre(ground_speed) > 1) or (pre(ground_speed) < 2)) 
										=> (wheel_status = false);
				
				guarantee "(Wheel) Rolling status: If in previous state the brake force is < 9 and ground speed > 1, 
							then this state, status is rolling.":
							true ->
								(pre(brake_force) <= 9 and pre(ground_speed) > 1) => (wheel_status = true);
		**};
		
		annex safety {**
			fault Wheel_NoRotation "(Wheel) Inverted boolean (Switch mode) fault." : faults.inverted_fail {
				inputs: val_in <- wheel_status; 
				outputs: wheel_status <- val_out;    
        		probability: 1.0E-5 ;
				duration: permanent;
			}
		**};		
	end Wheel;
	
	system implementation Wheel.inst
		
	end Wheel.inst;

end Wheel;