package Wheel
public
with Base_Types;

	system Wheel
		features
			-- Input 
			-- ground speed from top level ctrl_sys 
			ground_speed : in data port Base_Types::Integer;
			-- braking force from wheel_brake component
			braking_force : in data port Base_Types::Integer;
			
			-- Outputs 
			-- Should be enumerated type: {stopped, rolling}
			-- Instead: true = rolling, false = stopped
			status : out data port Base_Types::Boolean;
			
		annex agree {**
				
				
--				-- Handwritten property			
--				-- braking_behavior_norm_guarantee := 
--				--   (TRUE -> G
--	   			--		  (((braking_force > 8 & ground_speed > 1) -> next(status) = stopped) 
--				--		&  ((braking_force <= 8 & ground_speed > 1) -> next(status) = rolling))) 
--				--		&  (ground_speed < 2 -> next(status) = stopped)));
--				guarantee "(Wheel) Stopped status: if in previous state braking force > 8 and ground speed < 1, 
--							or the ground speed is less than 2, then this state, status is stopped." :
--							true -> 
--								((pre(brake_force) > 8 and pre(ground_speed) < 1) or (pre(ground_speed) < 2)) 
--										=> not wheel_status;
--				
--				guarantee "(Wheel) Rolling status: If in previous state the brake force is < 9 and ground speed > 1, 
--							then this state, status is rolling.":
--							true ->
--								(pre(brake_force) < 9 and pre(ground_speed) > 1) => wheel_status;

			-- ltl2lustre property:
			eq initial_step_counter : int = 0 -> pre(initial_step_counter) + 1;
			eq stopped : bool = false;
			eq rolling : bool = true;
			
			guarantee "Wheel contract" : 
				((initial_step_counter >= 1) => (true => (((((pre(braking_force) > 8) and (pre(ground_speed) > 1)) => (status = stopped)) and (((pre(braking_force) <= 8) and (pre(ground_speed) > 1)) => (status = pre(rolling)))) and ((pre(ground_speed) < 2) => (status = stopped)))));


		**};
		annex safety {**
			fault Wheel_NoRotation "(Wheel) Inverted boolean (Switch mode) fault." : faults.inverted_fail {
				inputs: val_in <- status; 
				outputs: status <- val_out;    
        		probability: 1.0E-5 ;
				duration: permanent;
			}
			
		**};		
	end Wheel;
	
	system implementation Wheel.inst
		
	end Wheel.inst;

end Wheel;

--    -- ===============================================================================
--    MODULE Wheel(braking_force, ground_speed)
--        VAR
--            status : {stopped, rolling};
--            LTLSPEC NAME braking_behavior_norm_guarantee := (TRUE -> (( G ((braking_force > 8 & ground_speed > 1) -> next(status) = stopped) &  G ((braking_force <= 8 & ground_speed > 1) -> next(status) = rolling)) &  G (ground_speed < 2 -> next(status) = stopped)));
--
--	DEFINE
--	skidding_threshold:=8;
--	ground_speed_threshold:=2;
--
--        ASSIGN
--	init(status) :=
-- 	case 
--  		(ground_speed > 0) : rolling;
--  		(ground_speed = 0) : stopped;
-- 		 TRUE : stopped;
-- 	esac;
--
--        next(status) :=
--	case
--		braking_force>skidding_threshold & ground_speed>=ground_speed_threshold :stopped;
--		braking_force<=skidding_threshold & ground_speed>=ground_speed_threshold :rolling;
--		ground_speed<ground_speed_threshold :stopped;
--		TRUE : status;
--	esac;
--
--    -- ===============================================================================
--    --                               End of module
--    -- ===============================================================================