package OrGate
public
with Base_Types;

	system OrGate
		features
			-- Input
			in_1 : in data port Base_Types::Boolean;
			in_2 : in data port Base_Types::Boolean;
			
			-- Output
			out_val : out data port Base_Types::Boolean;
			
			annex agree {**
				
				-- or_behavior_norm_guarantee := (TRUE ->  G (out <-> (in_1 | in_2)));
				guarantee "(OrGate) Output is equivalent to input1 or input2." : 
					out_val <=> (in_1 or in_2);
				
				-- Changing this slightly to make more predictable behavior...
				-- If channel1 is valid, go with that. Else, go with channel 2.
--				guarantee "(OrGate) If channel1 is valid, go with that. Else, go with channel 2." :
--					true -> (
--						if (in_1) then (in_1 = out_val) 
--							else (in_2 = out_val)
--					);
				
				
			**};
			
	end OrGate;	
	
	system implementation OrGate.inst
		
	end OrGate.inst;
end OrGate;