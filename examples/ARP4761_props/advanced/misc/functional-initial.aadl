package functional_initial
public
with WBSPS,EMV2,ARP4761;



system DecelerateAircraft
properties
	WBSPS::IsFunction => true;
end DecelerateAircraft;

system implementation DecelerateAircraft.basic
subcomponents
	DecelerateWheels: system DecelerateWheels.basic;
	DecelerateThrottle: system DecelerateThrottle;
annex EMV2 {**
	use types WBSFunctionalErrorLib;
	use behavior WBSFunctionalErrorLib::TwostateWBS;

	composite error behavior
	states
		[DecelerateWheels.Failed or DecelerateThrottle.Failed]-> Failed;
	end composite;                
 **};
end DecelerateAircraft.basic;

system DecelerateWheels
properties
	WBSPS::IsFunction => true;
end DecelerateWheels;

system implementation DecelerateWheels.basic
subcomponents
    -- List of functions is available in AIR6110 page 30
	ApplyWheelBrake1: system ApplyWheelBrake.basic;
	ApplyWheelBrake2: system ApplyWheelBrake.basic;
	nosewheelSteering: system NoseWheelSteering;
	aircraftStatus   : system AircraftStatus;
	crewAlert        : system CrewAlert;
	electricPower    : system ElectricPower;
	hydraulicPower   : system HydraulicPower;
	annunciation     : system Annunciation;
annex EMV2 {**
	use types WBSFunctionalErrorLib;
	use behavior WBSFunctionalErrorLib::TwostateWBS;

	composite error behavior
	states
	    -- FHA for Unnanunciated loss of all wheel
	    -- from AIR6110 page 49
		[annunciation.Failed and ApplyWheelBrake1.Failed and ApplyWheelBrake2.Failed]-> Failed;
	end composite;

	properties
	              EMV2::hazards => 
              ([      crossreference => "AIR6110 page 36";
              failure => "Total Loss of wheel braking - Unannunciated loss of wheel braking";
              phases => ("Landing" , "RTO");
              description => "Crew detects the failure when the brakes are operated. The crew uses spoilers and thrust reversers to the maximum extent possible. This may result in a runway overrun.";
              comment => "";
              ])
              applies to Failed.TotalWBLossAnunciated;
              EMV2::Severity => ARP4761::Hazardous applies to Failed.TotalWBLossAnunciated;
              EMV2::Likelihood => ARP4761::Remote applies to Failed.TotalWBLossAnunciated;
              


              EMV2::hazards => 
              ([      crossreference => "AIR6110 page 36";
              failure => "Total Loss of wheel braking - Annunciated loss of wheel braking";
              phases => ("Landing");
              description => "Crew selects a more suitable airport, notifies emergency ground support, and prepares occupants for runway overrun. The crew uses spoilers and thrust reversers to the maximum extent possible.";
              comment => "";
              ])
              applies to Failed.TotalWBLossUnanunciated;
              EMV2::Severity => ARP4761::Hazardous applies to Failed.TotalWBLossUnanunciated;      
              EMV2::Likelihood => ARP4761::Remote applies to Failed.TotalWBLossUnanunciated;      
              
              EMV2::hazards => 
              ([      crossreference => "AIR6110 page 36";
              failure => "Partial Symmetrical Loss of Wheel Braking - Unannunciated partial symmetrical loss of wheel braking";
              phases => ("Landing","RTO");
              description => "The crew detects the failure when the brakes are used. Crew uses available wheel braking, spoilers and thrust reversers available to maximum extent to decelerate the aircraft. The temperature on wheels of the loaded brakes increases and could reach point where wheel/fire failure occurs. Depending on number of brakes lost result could be an overrun.";
              comment => "Potentially catastrophic â€“ to be confirmed by analysis";
              ])
              applies to Failed.PartialSymmetricalWBLossUnAnunciated;
              EMV2::Severity => ARP4761::Hazardous applies to Failed.PartialSymmetricalWBLossUnAnunciated;      
              EMV2::Likelihood => ARP4761::Remote applies to Failed.PartialSymmetricalWBLossUnAnunciated;      
              
              
              EMV2::hazards => 
              ([      crossreference => "AIR6110 page 36";
              failure => "Partial Symmetrical Loss of Wheel Braking - Annunciated partial symmetrical loss of wheel braking";
              phases => ("Landing");
              description => "The crew is aware that there is a partial loss of braking before landing. Crew uses wheel braking, spoilers and thrust reversers available to maximum extent to decelerate the aircraft. The temperature on wheels of the loaded brakes increases and could reach point where wheel/fire failure occurs. Depending on number of brakes lost result could be an overrun.";
              comment => "";
              ])
              applies to Failed.PartialSymmetricalWBLossanunciated;
              EMV2::Severity => ARP4761::Major applies to Failed.PartialSymmetricalWBLossanunciated;   
              EMV2::Likelihood => ARP4761::Remote applies to Failed.PartialSymmetricalWBLossanunciated;  
                
 **};
end DecelerateWheels.basic;

system CrewAlert
properties
	WBSPS::IsFunction => true;
annex EMV2 {**
	use behavior WBSFunctionalErrorLib::TwostateWBS;
**};
end CrewAlert;

system implementation CrewAlert.basic
end CrewAlert.basic;

system ElectricPower
properties
	WBSPS::IsFunction => true;
annex EMV2 {**
	use behavior WBSFunctionalErrorLib::Twostate;
	component error behavior
	events
		Failure : error event;
	transitions
		t1 : Operational -[ Failure ]-> Failed;
	end component;
**};
end ElectricPower;

system Command
properties
	WBSPS::IsFunction => true;
annex EMV2 {**
	use behavior WBSFunctionalErrorLib::Twostate;
	component error behavior
	events
		Failure : error event;
	transitions
		t1 : Operational -[ Failure ]-> Failed;
	end component;
**};
end Command;

system implementation ElectricPower.basic
end ElectricPower.basic;

system HydraulicPower
properties
	WBSPS::IsFunction => true;
annex EMV2 {**
	use behavior WBSFunctionalErrorLib::TwostateWBS;
**};
end HydraulicPower;

system implementation HydraulicPower.basic
end HydraulicPower.basic;


system Annunciation
properties
	WBSPS::IsFunction => true;
annex EMV2 {**
	use behavior WBSFunctionalErrorLib::Twostate;
	
	component error behavior
	events
		Failure : error event;
	transitions
		t1 : Operational -[Failure]-> Failed;	
	end component;
**};
end Annunciation;

system implementation Annunciation.basic
end Annunciation.basic;

system AirCraftStatus
properties
	WBSPS::IsFunction => true;
annex EMV2 {**
	use behavior WBSFunctionalErrorLib::TwostateWBS;
**};
end AirCraftStatus;

system implementation AirCraftStatus.basic
end AirCraftStatus.basic;

system ApplyWheelBrake
properties
	WBSPS::IsFunction => true;
annex EMV2 {**
	use behavior WBSFunctionalErrorLib::TwostateWBS;
**};
end ApplyWheelBrake;

system implementation ApplyWheelBrake.basic
subcomponents
	BrakeWheel: system BrakeByWheel;
	WBControl: system WBControl;
	BrakeCommand: system BrakeCommand.basic;
	BrakeStatus: system WBStatus;
annex EMV2 {**
	use types WBSFunctionalErrorLib;
	use behavior WBSFunctionalErrorLib::TwostateWBS;

	composite error behavior
	states
	    -- FHA for Unnanunciated loss of all wheel
	    -- from AIR6110 page 49
		[BrakeWheel.Failed or BrakeCommand.Failed]-> Failed;
	end composite;
**};
end ApplyWheelBrake.basic;


system BrakeByWheel
properties
	WBSPS::IsFunction => true;
annex EMV2 {**
	use behavior WBSFunctionalErrorLib::Twostate;
	component error behavior
	events
		LossHydraulicSupply : error event;
		LossHydraulicComponents : error event;
	transitions
		t1 : Operational -[ LossHydraulicSupply]-> Failed;
		t2 : Operational -[ LossHydraulicComponents]-> Failed;
	end component;
**};
end BrakeByWheel;

system implementation BrakeByWheel.basic
properties
	WBSPS::IsFunction => true;
annex EMV2 {**
	
	use behavior WBSFunctionalErrorLib::Twostate;
	

**};
end BrakeByWheel.basic;

system NoseWheelSteering
annex EMV2 {**
	use behavior WBSFunctionalErrorLib::TwostateWBS;
**};
end NoseWheelSteering;

system WBControl
annex EMV2 {**
	use behavior WBSFunctionalErrorLib::TwostateWBS;
**};
end WBControl;


system WBStatus
annex EMV2 {**
	use behavior WBSFunctionalErrorLib::TwostateWBS;
**};
end WBStatus;

system BrakeCommand
annex EMV2 {**
	use behavior WBSFunctionalErrorLib::TwostateWBS;
**};
end BrakeCommand;

system implementation BrakeCommand.basic
subcomponents
	electricPower    : system ElectricPower;
	command          : system Command;
annex EMV2 {**
	use behavior WBSFunctionalErrorLib::TwostateWBS;
	composite error behavior
	states
		[electricPower.Failed or command.Failed ]-> Failed;
	end composite;
**};
end BrakeCommand.basic;

system DecelerateThrottle
annex EMV2 {**
	use behavior WBSFunctionalErrorLib::Twostate;
	component error behavior
	events
		Failure : error event;
	transitions
		t1 : Operational -[ Failure]-> Failed;

	end component;
**};
end DecelerateThrottle;

end functional_initial;