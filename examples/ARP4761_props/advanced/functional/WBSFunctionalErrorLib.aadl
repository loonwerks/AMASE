package WBSFunctionalErrorLib
public
annex EMV2 {**
	error types
		AnyFunctionalError: type;
		AliasAnyFunctionalError renames type WBSImplementationErrorLib::AnyImplementationError;
		HydraulicLossBlue : type;
		HydraulicLossGreen : type;
		HydraulicLossComponents : type;
		
		NoService: type extends AnyFunctionalError;
		NoValue: type extends NoService;
		NoPower: type extends NoService;
	
		
		
		TotalWBLoss: type extends AnyFunctionalError;
		TotalWBLossAnunciated: type extends TotalWBLoss;
		TotalWBLossUnanunciated: type extends TotalWBLoss;
		PartialSymmetricalWBLoss: type extends AnyFunctionalError;
		PartialSymmetricalWBLossAnunciated: type extends PartialSymmetricalWBLoss;
		PartialSymmetricalWBLossUnanunciated: type extends PartialSymmetricalWBLoss;
		AssymetricalWBLoss: type extends AnyFunctionalError;
		InadvertentWB: type extends AnyFunctionalError;
		
		WBErrorSet: type set {TotalWBLossAnunciated,TotalWBLossUnanunciated,PartialSymmetricalWBLoss,
			AssymetricalWBLoss,InadvertentWB
		};
		
		HydraulicErrors: type set {HydraulicLossBlue,HydraulicLossGreen,HydraulicLossComponents,NoService};
		end types;
	
	error behavior Twostate
	use types WBSFunctionalErrorLib;
	states
		Operational:initial state;
		failed:state {WBErrorSet};
	end behavior;
	
	error behavior TwostateWBS 
	use types WBSFunctionalErrorLib;
	states
		Operational:initial state;
--		failed : state WBErrorSet;
-- WORK
--		failed:state {TotalWBLoss,PartialSymmetricalWBLoss,AssymetricalWBLoss,InadvertentWB};
-- NOT WORKING
		failed:state {TotalWBLossAnunciated,TotalWBLossUnanunciated,PartialSymmetricalWBLoss,AssymetricalWBLoss,InadvertentWB};
	end behavior;
**};
end WBSFunctionalErrorLib;