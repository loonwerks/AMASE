package ThreeModeSys
public
with Base_Types;
with Normal;
with Alternate;
with Emergency;
with SupplyReceiver;
with MonitorSystem;
with Selector;
    -- Top level has supply as inputs. This "supply" is always positive and never zero. 
    -- Subcomponents: 
    -- - Normal : Takes supply input from top level.
	-- - Alternate : Takes supply input from top level.
	-- - Emergency : Backup reserve supply. 
	-- - Selector : is a valve that takes the supply from both normal and alternate components and selects between them. 
	--      Its behavior is very much like the selector valve in the WBS. 
	-- 		If neither normal nor alternate gives the supply, then it sends a signal to the Monitor.
	--
	-- - Monitor : Monitors the mode of the system (similar to the MonitorSystem in WBS). 
	--		It gets input from the Selector on whether its getting supply from normal or alternate 
	--		and if the supply is not received at Selector, then it sends command to Emergency. 
	--		Emergency then sends pressure to Receiver. 
	--		The system mode is sent to the top level for testing purposes.
	--
	-- - Receiver : the "end of the flow" subcomponent that needs to receive the supply. 
	--		Similar to the wheel, I guess. It takes input from the selector and from the emergency component. 
	--		The only output is to the top level stating that it has received supply. 
	--
	-- The logic is very basic. If no normal supply at selector, then switch to alternate. 
	--	Likewise alternate switch to emergency. Faulty behavior is defined when the supply is zero. 
	--	The only faults defined are in normal component or in alternate component.
	-- 
	system ThreeModeSys
		features
			-- Main signal passed to subcomponent that is active.
			normal_supply : in data port Base_Types::Integer;
			alt_supply : in data port Base_Types::Integer;
			
			-- Mode comes from monitor system
			-- System modes: 
			-- mode = 1 -> normal
			-- mode = 2 -> alternate
			-- mode = 3 -> emergency
			sys_mode: out data port Base_Types::Integer;
			
			-- Signal that receiver got (just for testing purposes)
			supply_received : out data port Base_Types::Integer;
			
		annex agree {**
		
			-- The supply is always positive
		
			assume "Normal supply is bounded." : 
				(1 <= normal_supply);
			
			assume "Alternate supply is bounded." : 
				(1 <= alt_supply);
			
				
			
		**};
	end ThreeModeSys;
	
	system implementation ThreeModeSys.simple
		subcomponents
			normal_sys : system Normal::Normal;
			alternate_sys : system Alternate::Alternate;
			emergency_sys : system Emergency::Emergency;
			receiver : system SupplyReceiver::SupplyReceiver;
			monitor : system MonitorSystem::MonitorSystem;
			selector : system Selector::Selector;
			
		connections 
			-- Supply to normal and alternate lines
			supply_to_normal : port normal_supply -> normal_sys.supply_in;
			supply_to_alt : port alt_supply -> alternate_sys.supply_in;
			
			-- Mode of system from Monitor
			system_mode : port monitor.sys_mode -> sys_mode;
				
				
			-- Supply to selector
			supply_from_norm_to_sel : port normal_sys.supply_out -> selector.normal_supply;
			supply_from_alt_to_sel : port alternate_sys.supply_out -> selector.alt_supply;
			
			-- Supply to receiver
			supply_from_sel_to_rec : port selector.supply_out -> receiver.supply_in;
			supply_from_emer_to_rec : port emergency_sys.supply_out -> receiver.supply_in_emergency;
			
			-- Selector info to monitor
			selector_info_to_monitor : port selector.valve_position -> monitor.selector_valve_position;
			
			-- Emergency command
			cmd_emergency_mode : port monitor.cmd_emergency -> emergency_sys.cmd_to_activate;
			
			-- Supply received (sent to top level for testing)
			supply_at_receiver : port receiver.supply_out -> supply_received;
		
		annex agree {**
			
			-- Supply is always provided at receiver. 
			lemma "Receiver supply is always positive." :
				(supply_received > 0);
			
			-- Make sure system modes are bounded.
			lemma "System modes are bounded." :
				(sys_mode > 0) and (sys_mode < 4);
			
			-- Lemma to make sure we do not switch back to normal mode.
			lemma "When we switch to alternate or emergency mode, we do not change back to normal." :
				((prev(sys_mode, 1) = 2)) => not((sys_mode = 1));
--				
--			-- Lemma to make sure we do not switch back to alternate once in emergency mode.
			lemma "When we switch to emergency mode, we do not change back to alternate or normal." :
				((prev(sys_mode, 1) = 3)) => (not(sys_mode = 2) and not(sys_mode = 1));
			
			lemma "System mode reflects selector position." :
				(selector.valve_position) = (sys_mode); 
			
			
			-----------------------------------------------------------------------------------------------------------	
			-- Testing active fault behavior.
			-----------------------------------------------------------------------------------------------------------
--			
--			-- When in alternate mode, receving pressure is equal to alternate pressure.
--			-- This should fail with two faults active.
--			lemma "Alternate supply equals supply received (false with 0 or 2+ faults active, true with 1 fault active on normal sys)." :
--				alt_supply = supply_received;
--			
--			-- When in emergency mode, receving pressure is equal to emergency pressure (always 5).
--			-- This should fail with two faults active.
--			lemma "Emergency supply (5) equals supply received (false with 0,1 faults active, true with 2 faults active)." :
--				alt_supply = supply_received;
				
			
			
		**};
		annex safety {**
			
			analyze : max 3 fault
	  		--analyze : probability 1.0E-6
			
		**};	
	end ThreeModeSys.simple;


end ThreeModeSys;