package NormalBrakeSystem
public
with MeterValve;
with Base_Types;

	system NormalBrakeSystem
		features
			-- Inputs
			brake_as_cmd1 : in data port Base_Types::Boolean;
			brake_as_cmd2 : in data port Base_Types::Boolean;
			brake_as_cmd3 : in data port Base_Types::Boolean;
			brake_as_cmd4 : in data port Base_Types::Boolean;
			brake_as_cmd5 : in data port Base_Types::Boolean;
			brake_as_cmd6 : in data port Base_Types::Boolean;
			brake_as_cmd7 : in data port Base_Types::Boolean;
			brake_as_cmd8 : in data port Base_Types::Boolean;
			
			hyd_pressure_in : in data port Base_Types::Integer;
			
			-- Outputs
			hyd_pressure_out1 : out data port Base_Types::Integer;
			hyd_pressure_out2 : out data port Base_Types::Integer;
			hyd_pressure_out3 : out data port Base_Types::Integer;
			hyd_pressure_out4 : out data port Base_Types::Integer;
			hyd_pressure_out5 : out data port Base_Types::Integer;
			hyd_pressure_out6 : out data port Base_Types::Integer;
			hyd_pressure_out7 : out data port Base_Types::Integer;
			hyd_pressure_out8 : out data port Base_Types::Integer;
		
		
		annex agree {**
			
			-- apply_command_1_norm_guarantee := (TRUE ->  G ((brake_as_cmd_1 & hyd_pressure_in > 0) <-> hyd_pressure_out_1 > 0));
			guarantee "(NormalBrakeSys) (W1) Hydraulic pressure out is positive if and only if
						brake_as_cmd input is true and hyd pressure in is positive." :
						true -> 
							(brake_as_cmd1 and hyd_pressure_in > 0) <=> hyd_pressure_out1 > 0;
							
			guarantee "(NormalBrakeSys) (W2) Hydraulic pressure out is positive if and only if
						brake_as_cmd input is true and hyd pressure in is positive." :
						true -> 
							(brake_as_cmd2 and hyd_pressure_in > 0) <=> hyd_pressure_out2 > 0;
			
			guarantee "(NormalBrakeSys) (W3) Hydraulic pressure out is positive if and only if
						brake_as_cmd input is true and hyd pressure in is positive." :
						true -> 
							(brake_as_cmd3 and hyd_pressure_in > 0) <=> hyd_pressure_out3 > 0;
			
			guarantee "(NormalBrakeSys) (W4) Hydraulic pressure out is positive if and only if
						brake_as_cmd input is true and hyd pressure in is positive." :
						true -> 
							(brake_as_cmd4 and hyd_pressure_in > 0) <=> hyd_pressure_out4 > 0;
			
			guarantee "(NormalBrakeSys) (W5) Hydraulic pressure out is positive if and only if
						brake_as_cmd input is true and hyd pressure in is positive." :
						true -> 
							(brake_as_cmd5 and hyd_pressure_in > 0) <=> hyd_pressure_out5 > 0;
			
			guarantee "(NormalBrakeSys) (W6) Hydraulic pressure out is positive if and only if
						brake_as_cmd input is true and hyd pressure in is positive." :
						true -> 
							(brake_as_cmd6 and hyd_pressure_in > 0) <=> hyd_pressure_out6 > 0;
			
			guarantee "(NormalBrakeSys) (W7) Hydraulic pressure out is positive if and only if
						brake_as_cmd input is true and hyd pressure in is positive." :
						true -> 
							(brake_as_cmd7 and hyd_pressure_in > 0) <=> hyd_pressure_out7 > 0;
			
			guarantee "(NormalBrakeSys) (W8) Hydraulic pressure out is positive if and only if
						brake_as_cmd input is true and hyd pressure in is positive." :
						true -> 
							(brake_as_cmd8 and hyd_pressure_in > 0) <=> hyd_pressure_out8 > 0;
											
			
		**};
	end NormalBrakeSystem;
	
	system implementation NormalBrakeSystem.inst
		subcomponents
			mv1 : system MeterValve::MeterValve.inst;
			mv2 : system MeterValve::MeterValve.inst;
			mv3 : system MeterValve::MeterValve.inst;
			mv4 : system MeterValve::MeterValve.inst;
			mv5 : system MeterValve::MeterValve.inst;
			mv6 : system MeterValve::MeterValve.inst;
			mv7 : system MeterValve::MeterValve.inst;
			mv8 : system MeterValve::MeterValve.inst;
			
		connections
			-- hyd pressure to all meter valves
			pressure_1 : port hyd_pressure_in -> mv1.hyd_pressure_in;
			pressure_2 : port hyd_pressure_in -> mv2.hyd_pressure_in;
			pressure_3 : port hyd_pressure_in -> mv3.hyd_pressure_in;
			pressure_4 : port hyd_pressure_in -> mv4.hyd_pressure_in;
			pressure_5 : port hyd_pressure_in -> mv5.hyd_pressure_in;
			pressure_6 : port hyd_pressure_in -> mv6.hyd_pressure_in;
			pressure_7 : port hyd_pressure_in -> mv7.hyd_pressure_in;
			pressure_8 : port hyd_pressure_in -> mv8.hyd_pressure_in;
			
			-- antiskid commands to mv
			as_to_mv_1 : port brake_as_cmd1 -> mv1.elec_cmd;
			as_to_mv_2 : port brake_as_cmd2 -> mv2.elec_cmd;
			as_to_mv_3 : port brake_as_cmd3 -> mv3.elec_cmd;
			as_to_mv_4 : port brake_as_cmd4 -> mv4.elec_cmd;
			as_to_mv_5 : port brake_as_cmd5 -> mv5.elec_cmd;
			as_to_mv_6 : port brake_as_cmd6 -> mv6.elec_cmd;
			as_to_mv_7 : port brake_as_cmd7 -> mv7.elec_cmd;
			as_to_mv_8 : port brake_as_cmd8 -> mv8.elec_cmd;
			
			
	end NormalBrakeSystem.inst;
end NormalBrakeSystem;