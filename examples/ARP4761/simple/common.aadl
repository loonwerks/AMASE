package common

public
with Base_Types;

bus power
end power;

bus implementation power.generic
end power.generic;

bus pwm
end pwm;

bus implementation pwm.generic
end pwm.generic;
 
data command
end command;

data implementation command.brake
end command.brake;

data wheel
end wheel;


-- This is being used as the meter valve amount.
data implementation command.skid
	subcomponents
		val: data Base_Types::Float; 
		activate_antiskid: data Base_Types::Boolean;
end command.skid;

data implementation command.pedal
  	subcomponents
  		val : data Base_Types::Float ; 
end command.pedal;

data implementation command.announce
end command.announce;

-- The pressure bus represents the pressure sent/received by
-- other devices/pumps
--
-- How do I represent data sent along the bus?  Obviously, 
-- I'd like to represent 'pressure'.

data pressure
end pressure;


data implementation pressure.i
	subcomponents
		val: data Base_Types::Float;
end pressure.i;

data sensor	
end sensor;

data implementation sensor.i
	subcomponents
		val: data Base_Types::Float;
end sensor.i;


system pipe
features
	input : in data port Base_Types::Float;
	output : out data port Base_Types::Float;
end pipe;


end common;
