package pedals

public

with common;
with EMV2;
with ARP4761;
--
--  This is a stub component for the pedal
-- 
system pedals
features
	signal1 : out data port common::command.pedal;
	signal2 : out data port common::command.pedal;
	
annex AGREE {**
		
	-- I'm assuming there must be some range of values for the pedals. 
	-- I will just say it's nonnegative for now. We can change it
	-- if there is an upper bound.
	guarantee "Range for pedal1" : 
	    signal1.val >= 0.0;
	guarantee "Range for pedal2" : 
	    signal2.val >= 0.0;
	    
	-- Do both need to be pressed at the same time? Is only one pressed at once? 
	-- Are there contracts needed for this?
	    
**}	;

annex EMV2 {**
	use types error_library;
	use behavior error_library::simple;
	
	error propagations
		signal1 : out propagation {NoService};
		signal2 : out propagation {NoService};
	flows
		f1 : error source signal1{NoService};
		f2 : error source signal2{NoService};
	end propagations;
	
	component error behavior
	events
		InternalFault : error event;
	transitions
		nosignal : Operational -[InternalFault]-> Failed;
	propagations
		p1 : Failed -[]-> signal1{NoService};
		p2 : Failed -[]-> signal2{NoService};
	end component;

	properties
			EMV2::hazards => 
		([	crossreference => "TBD";
			failure => "No signal for the pedals so that the BSCU cannot produce any results for the brakes.";
			phases => ("TBD");
			description => "No signal from the pedals";
			comment => "Would be critical if both power supplies are lost";
		])
		applies to signal1.NoService, signal2.NoService;
		
				EMV2::OccurrenceDistribution => [ ProbabilityValue => 3.4e-5 ; Distribution => Fixed;] applies to Failed;
	
	
		
**};
end pedals;

system implementation pedals.generic
end pedals.generic;

end pedals;
