package valves

public

with base_types;
with common; 
with faults;

system generic
features
	input : in data port common::pressure.i;
	output : out data port common::pressure.i;
annex EMV2 {**
	use types     error_library;
	use behavior  error_library::simple;
	error propagations
		input  : in propagation {NoService};
		output : out propagation {NoService};
	flows
		f1 : error path input{NoService} -> output; 
	end propagations;
**};
end generic;

system implementation generic.i
end generic.i;

system generic_pwm_input extends generic
features
	input_pwm : requires bus access common::pwm.generic;
end generic_pwm_input;

system implementation generic_pwm_input.i
end generic_pwm_input.i;


system boolean_shutoff 
features
	input : in data port common::pressure.i;
	output : out data port common::pressure.i;
	boolean_input : in data port Base_Types::Boolean;
	
	-- failure-related information: we can have a stuck-at fault.
	stuck_at_occurred: in data port Base_Types::Boolean;
	
	
	 
	
annex agree {**
	eq nominal_output : common::pressure.i;
	
	-- Used to show nondeterministic or stuck_at failure
	eq alt_val : common::pressure.i; 
	
		
    -- If boolean_input is true, then the output should be zero.
	guarantee "Pressure on boolean shutoff" : 
	       if boolean_input then output.val = 0.0 
	       else nominal_output.val = input.val ;
	
	-- This seems super obvious... I don't even think it's physically possible
	-- to break this contract...       
	guarantee "Output is never greater than input" :
	       not(nominal_output.val > input.val);
	       
	 -- guarantee mapping output (fail_to)
	 guarantee "Output failure binding for boolean_shutoff (fail_to)" : 
	    output.val = faults.fail_to(nominal_output.val, alt_val.val, stuck_at_occurred);
	    
	              
**};end boolean_shutoff;

system cmd_shutoff 
features
	input : in data port common::pressure.i;
	output : out data port common::pressure.i;
	cmd_input : in data port common::command.skid;
	
	-- failure-related information: we can have a stuck-at fault.
	stuck_at_occurred: in data port Base_Types::Boolean;

annex AGREE {**
	
	-- Fault occurred:
	eq nominal_output : common::pressure.i;
	
	-- Used to show nondeterministic or stuck_at failure
	eq alt_val : common::pressure.i;
	
	-- QUESTION: 
	-- In this case, we are setting the output value. Should this contract change
	-- to show the fault modeling? 
	-- As it is, it seems like the fault will not affect cmd_shutoff at all. 
	
	-- Depending on cmd_input (skidding), the output can either be the same as the cmd_input 
	-- (this occurs when cmd_input < input) or the output is equal to the input
	-- (cmd_input does nothing to change output when cmd_input <= input).
	guarantee "Valve pressure limits by cmd_input." : 
		if (cmd_input.activate_antiskid and cmd_input.val < input.val) then 
			nominal_output.val = cmd_input.val 
		else nominal_output.val = input.val ; 
	
	-- Do we even need this one? Not sure. 
	guarantee "Output is never greater than input." :
	    not(nominal_output.val > input.val);	
	    
	guarantee "Output failure binding for cmd_shutoff" : 
	    output.val = faults.fail_to(nominal_output.val, alt_val.val, stuck_at_occurred);
**}	;

annex EMV2 {**
	use types     error_library;
	use behavior  error_library::simple;
	
	error propagations
		input  : in propagation {NoService};
		output : out propagation {NoService};
		cmd_input : in propagation {NoValue};
	flows
		f1 : error path input{NoService} -> output; 
	    --  We assume that if we get no value on the input, we do
	    --  not produce any pressure at all. Then, we propagate a
	    --  NoService error on the output.
		f3 : error path cmd_input{NoValue} -> output{NoService};
		f2 : error source output{NoService};
	end propagations;
	
	component error behavior
	transitions
		t1 : Operational -[cmd_input{NoValue}]-> Failed;
		t2 : Operational -[input{NoService}]-> Failed;
	propagations
		p1 : Failed -[]-> output{NoService};
	end component;
**};
end cmd_shutoff;




system selector
features
	--accumulator_input: in data port common::pressure.i;
	green_input      : in data port common::pressure.i;
	blue_input       : in data port common::pressure.i;
	select_alternate : in data port Base_Types::Boolean;
	cmd_nor          : in data port common::command.skid;
	cmd_alt          : in data port common::command.skid;
	
--annex AGREE {**
	
	-- 	ADD SYSTEM SELECTOR CONTRACTS HERE
-- **}	;

annex EMV2 {**
	use types error_library;
	
	error propagations
		select_alternate    : in propagation{NoValue};
		cmd_nor    			: in propagation{NoValue};
		cmd_alt    			: in propagation{NoValue};
		--accumulator_input 	: in propagation{NoService};
		green_input 		: in propagation{NoService};
		blue_input  		: in propagation{NoService};
	flows
		f1 : error sink cmd_nor{NoValue};
		f2 : error sink cmd_alt{NoValue};
		f3 : error sink select_alternate{NoValue};
	end propagations;
**};


end selector;


system implementation selector.i
end selector.i;


system selector_basic extends selector
features
	output           : out data port common::pressure.i;
annex EMV2 {**
	use types error_library;
	
	error propagations
		output : out propagation{NoService};
	flows
		ns1 : error path green_input{NoService} 		-> output;
		ns2 : error path blue_input{NoService} 			-> output;
		--ns3 : error path accumulator_input{NoService} 	-> output;
	end propagations;
**};
end selector_basic;


system selector_detailed 
features
	--accumulator_input: in data port common::pressure.i;
	green_input      : in data port common::pressure.i;
	blue_input       : in data port common::pressure.i;
	select_alternate : in data port Base_Types::Boolean;
	cmd_nor          : in data port common::command.skid;
	cmd_alt          : in data port common::command.skid;
	green_output : out data port common::pressure.i;
	blue_output  : out data port common::pressure.i;
	stuck_at_occurred : in data port Base_Types::Boolean;
annex AGREE {** 
	
	-- Fault occurred:
	eq blue_nominal_output : common::pressure.i;
	eq green_nominal_output : common::pressure.i;
	
	-- Used to show nondeterministic or stuck_at failure
	eq alt_val : common::pressure.i;
	
	-- We have blue input, green input, or neither. Not both. 
	guarantee "Pressure selector: either green or blue output. " : 
		if (green_input.val > 0.0) then 
			(blue_nominal_output.val = 0.0 and green_nominal_output = green_input)
		else (blue_nominal_output = blue_input and green_nominal_output.val = 0.0);

  
    -- If select_alternate is not selected (normal pressure) 
    -- then green pressure is positive. 
    guarantee "If select_alternate is selected, then blue input is positive, else green
               is positive." :
        if select_alternate then blue_input.val > 0.0
        else green_input.val > 0.0;
        
    -- cmd_nor and cmd_alt cannot both be positive.
    guarantee "cmd_nor and cmd_alt cannot both be positive." :
        not(cmd_nor.val > 0.0 and cmd_alt.val > 0.0);
        
    -- If select_alt is true, then cmd_alt should be positive.
    guarantee "If select_alternate is true, then cmd_alt > 0.0, else cmd_nor > 0.0." :
        if select_alternate then cmd_alt.val > 0.0 
        else cmd_nor.val > 0.0;
        
    -- The output is never greater than the input for either green or blue.
    guarantee "Output is never greater than input." :
        (green_nominal_output.val <= green_input.val) and (blue_nominal_output.val <= blue_input.val);
        
    -- guarantee mapping output (fail_to) green_output
	 guarantee "Output failure binding for green_output (fail_to)" : 
	    green_output.val = faults.fail_to(green_nominal_output.val, alt_val.val, stuck_at_occurred);
	 
	 -- guarantee mapping output (fail_to) blue_output
	 guarantee "Output failure binding for blue_output (fail_to)" : 
	    blue_output.val = faults.fail_to(blue_nominal_output.val, alt_val.val, stuck_at_occurred);
	       
  
**};

annex EMV2 {**
	use types       error_library;
	use behavior    error_library::simple;
	error propagations
		select_alternate    : in propagation{NoValue};
		cmd_nor    			: in propagation{NoValue};
		cmd_alt    			: in propagation{NoValue};
		--accumulator_input 	: in propagation{NoService};
		green_input 		: in propagation{NoService};
		blue_input  		: in propagation{NoService};
		green_output 	: out propagation{NoService};
		blue_output 	: out propagation{NoService};
	flows
		f1 : error sink cmd_nor{NoValue};
		f2 : error sink cmd_alt{NoValue};
		f3 : error sink select_alternate{NoValue};
		ns1 : error path green_input{NoService} 		-> green_output;
		ns2 : error path blue_input{NoService} 			-> blue_output;
		--ns3 : error path accumulator_input{NoService} 	-> green_output;
		--ns4 : error path accumulator_input{NoService} 	-> blue_output;
		ns5 : error path cmd_alt{NoValue}               -> blue_output{NoService};
		ns6 : error path cmd_nor{NoValue}               -> green_output{NoService};
		ns7 : error path Select_Alternate{NoValue}      -> green_output{NoService};
		ns8 : error path Select_Alternate{NoValue}      -> blue_output{NoService};
	end propagations;

	component error behavior
	transitions
		t1 : Operational -[select_alternate{NoValue}]-> Failed;
		t2 : Operational -[cmd_alt{NoValue}]-> Failed;
		t3 : Operational -[cmd_nor{NoValue}]-> Failed;
	propagations
		p1: Failed -[]-> green_output{NoService};
		p2: Failed -[]-> blue_output{NoService};
	end component;
**};
end selector_detailed;

system accumulator_valve
features
	blue_input : in data port common::pressure.i;
	accumulator_input : in data port common::pressure.i;
	select_alternate : in data port Base_Types::Boolean;
	blue_skid_output : out data port common::pressure.i;
	stuck_off_occurred : out data port Base_Types::Boolean;
annex AGREE{**
		
		-- faults
	eq blue_skid_nominal_output : common::pressure.i;
	eq alt_val : common::pressure.i;
	
	-- Contract: Accumulator valve will emit no pressure unless select_alternate
	-- is true
	guarantee "No pressure emitted unless select_alternate is true" :
	  if (select_alternate) then blue_skid_nominal_output.val > 0.0 else blue_skid_nominal_output.val = 0.0;
	  
	-- If select_alternate is true and blue_input > Threshold then emit blue pressure, 
	-- else emit accumulator pressure
	guarantee "If select_alternate true, then emit accumulator pressure" :
	   (select_alternate)  => blue_skid_nominal_output = accumulator_input;
	    
	-- Fault binding
	guarantee "Output failure binding for blue_skid_output (fail_to)" : 
	    blue_skid_output.val = faults.fail_to(blue_skid_nominal_output.val, alt_val.val, stuck_off_occurred);
	    
**}	;
end accumulator_valve;

end valves;
