Explanation of the WBS ARP4761 model.

The system is empty.

The system implementation is described in wbs.generic

First, the decomposition: 

WBS consists of:
{pedals, power, blue_pump, green_pump, accumulator, selector, bscu, wheel, and annunciations}	
	<-> Missing pipe segments? 
		These are actually modeled as "bus accesses" for a bus called "pressure".
		

In terms of connections, we have: 
    accu_to_sel: bus access selector.accumulator_input <-> accumulator.pressure_output;
	power1     : bus access bscu.pwr1 <-> power.line1;
	power2     : bus access power.line2 <-> bscu.pwr2;
	pedal1     : port pedals.signal1 -> bscu.pedal1;
	pedal2     : port pedals.signal2 -> bscu.pedal2;

There are no connections to blue_pump, green_pump, and wheel in the generic model.

However, in the basic model, there are connections to the pumps, and in more detailed models, 
it adds additional connections.
  
There are the following error states
	-- Operational
	-- AnnunciatedTotalBrakingLoss
	-- UnannunciatedTotalBrakingLoss
	-- PartialBrakingLoss
	-- AsymmetricLoss
	-- InadvertentBrake

In the top-level model, the conditions under which we enter these states is described as a state machine.
Once an error state is entered, can we switch between them?

Properties are used to map these states to ARP4761 hazards:
	severity: {Catastrophic, Extremely Hazardous, Hazardous, ...}
	likelihood: {Extremely improbable, improbable, ...}
	hazards: [Cross reference, failure, phases, description, comment]
	
=============================================================

There are several refinements of the model:
wbs.generic {<-- wbs.basic, <-- wbs.detailed {<-- wbs.federated, <-- wbs.ima }}

...why do we do this?
When AADL does refinement we have to say how substitution is performed (type refinement)

The detailed model adds additional components: 
	shutoff    : system valves::boolean_shutoff;
	green_skid : system valves::cmd_shutoff; 
	blue_skid  : system valves::cmd_shutoff; 
	
along with additional connections between the components.

Looking at the components further:

selector_detailed: 
	green_input, blue_input, accumulator_input: common::pressure.i
	green_output, blue_output : common::pressure.i

==============================================================

1/11

I have updated the model to remove "extends" for both the IMA and Federated models. 

I have also added some nominal contracts to the model, though in some cases these are commented out, for reasons involving buses described below.  When possible, I have added fields to data types to represent the values needed to sensibly build a behavioral description of the model.

AADL Buses are used to act as the "pipes" between the valves and the wheels.  However, I don't know how to associate data with buses; they are a physical construct, not a logical construct, so a connection through a bus does not really do anything in terms of data, so I think this aspect will have to be rearchitected.  Similarly, buses are used to represent the power supply connections to the BSCU.  Both of these uses seem to be an abuse of the "bus" construct, but of course there is no construct in AADL that actually matches these aspects of the system.  For power, we may actually want to use buses the EMV2 support to propagate errors from power supplies into logical components and AGREE.  It is at least something to think about.  However, it may get complicated mixing the two semantics.

Also, the selector valve in the AADL model is much more complicated than was modeled in the Simulink model.  Given two pressurized lines, it is only supposed to pass through one of the lines.  In the AADL model there is substantial associated logic.  For the selector valve, the AADL failure propagation stuff is, as best I can see, somewhat divorced from the real requirements.  For example, many of the propagations specified in the error annex below are incorrect, as I see it.  The point of the selector valve is to provide some fault protection in case both lines are pressurized for some reason.  This functionality gets lost in the error propagations.  

The BSCU model has input only from pedals, not AutoBrake, so it is missing information on deceleration rate, current speed, skid, and pressure inputs from the pipes.  I don't see how this model can command anything, really.