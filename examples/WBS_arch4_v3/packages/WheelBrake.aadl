package WheelBrake
public
with Base_Types;
	
	system WheelBrake
		features
			-- Input from physical system
			normal_hyd_pressure_in : in data port Base_Types::Integer;
			alt_hyd_pressure_in : in data port Base_Types::Integer;
			-- Output 
			brake_force : out data port Base_Types::Integer;
			
			annex agree {**
				
				assume "Pressure input from 0 to 10 inclusive" : 
					(normal_hyd_pressure_in >= 0 and normal_hyd_pressure_in <= 10)
					and (alt_hyd_pressure_in >= 0 and alt_hyd_pressure_in <= 10);
				
				guarantee "(WheelBrake) braking force is positive if and only if
							either normal or alternate pressure is positive." :
							(brake_force > 0 <=> (normal_hyd_pressure_in > 0 or alt_hyd_pressure_in > 0));			
				
				guarantee "(WheelBrake) Brake force output from 0 to 10 inclusive" : 
					(brake_force >= 0 and brake_force <= 10);
				
			**};
			
	end WheelBrake;
	
	system implementation WheelBrake.inst
		subcomponents
			normal_hyd_fuse : system HydraulicFuse;
			normal_hyd_piston : system HydraulicPiston;
			alt_hyd_fuse : system HydraulicFuse;
			alt_hyd_piston : system HydraulicPiston;
			brake_actuator : system BrakeActuator;
			
		connections
			-- To normal hyd fuse
			norm_pressure_to_fuse : port normal_hyd_pressure_in -> normal_hyd_fuse.hyd_pressure_in;
			-- To normal piston
			norm_fuse_to_piston : port normal_hyd_fuse.hyd_pressure_out ->  normal_hyd_piston.hyd_pressure_in;
			-- alt hyd fuse
			pressure_to_alt_fuse : port alt_hyd_pressure_in -> alt_hyd_fuse.hyd_pressure_in;
			-- To alt piston
			alt_fuse_to_piston : port alt_hyd_fuse.hyd_pressure_out -> alt_hyd_piston.hyd_pressure_in;
			-- brake actuator
			normal_force_to_actuator : port normal_hyd_piston.force_out -> brake_actuator.normal_force_in;
			alt_force_to_actuator : port alt_hyd_piston.force_out -> brake_actuator.alternate_force_in;
			
			-- Braking force
			brake_force_out : port brake_actuator.braking_force -> brake_force;
		
		
		annex agree {**
			lemma "(BrakeActuator) Brake force is equivalent to either alternate or normal force in." :
							(brake_actuator.braking_force = brake_actuator.alternate_force_in) or (brake_actuator.braking_force = brake_actuator.normal_force_in);
					
				-- transform_force_norm_guarantee := (TRUE ->  G ((normal_force_in > 0 | alternate_force_in > 0) <-> braking_force > 0));
	 		lemma "(BrakeActuator) Braking force is positive if and only if
							normal force or alternate force is positive." :
							(brake_actuator.braking_force > 0 <=> (brake_actuator.normal_force_in > 0 or brake_actuator.alternate_force_in > 0));
		
		
			lemma "(NormHydraulicFuse) hydraulic pressure in equals hydraulic pressure out." :
							(normal_hyd_fuse.hyd_pressure_in = normal_hyd_fuse.hyd_pressure_out);
		
			
			lemma "(HydraulicPiston) hydraulic pressure in equals force out." :
							(normal_hyd_piston.hyd_pressure_in = normal_hyd_piston.force_out);
		
		**};
		
		
		annex safety{**
	
		analyze : max 0 fault
		-- MWW: END HACK!
		-- ---------------------------------------------------------------------------	
		**}	;		
		
	end WheelBrake.inst;


	system HydraulicFuse
		features
			-- Inputs
			hyd_pressure_in : in data port Base_Types::Integer;
			--Output 
			hyd_pressure_out : out data port Base_Types::Integer;
			
			annex agree {**
				
				assume "Pressure input from 0 to 10 inclusive" : 
					(hyd_pressure_in >= 0 and hyd_pressure_in <= 10);
				
				--  fuse_behavior_norm_guarantee := (TRUE ->  G hyd_pressure_out = hyd_pressure_in);
				guarantee "(HydraulicFuse) hydraulic pressure in equals hydraulic pressure out." :
							(hyd_pressure_in = hyd_pressure_out);
			
			
				guarantee "Pressure output from 0 to 10 inclusive" : 
					(hyd_pressure_out >= 0 and hyd_pressure_out <= 10);
					
					
			**};
		annex safety {**
			fault HydraulicFuse_FailedClosed "(HydraulicFuse) Stuck closed fault." : faults.fail_to {
				inputs: val_in <- hyd_pressure_out, alt_val <- 0; 
				outputs: hyd_pressure_out <- val_out;    
        		probability: 1.0E-5 ;
				duration: permanent;
			}
			
		**};		
	end HydraulicFuse;
	

	
	
	system HydraulicPiston
		features
			-- Inputs
			hyd_pressure_in : in data port Base_Types::Integer;
			--Output 
			force_out : out data port Base_Types::Integer;
			
			annex agree {**
				
				assume "Pressure input from 0 to 10 inclusive" : 
					(hyd_pressure_in >= 0 and hyd_pressure_in <= 10);
				
				--  create_force_norm_guarantee := (TRUE ->  G hyd_pressure_in = force_out);
				guarantee "(HydraulicPiston) hydraulic pressure in equals force out." :
							(hyd_pressure_in = force_out);
			
				guarantee "Force output from 0 to 10 inclusive" : 
					(force_out >= 0 and force_out <= 10);
			
			**};
			
			
		annex safety {**
			fault HydraulicPiston_FailedFullOff "(HydraulicPiston) Stuck closed fault." : faults.fail_to {
				inputs: val_in <- force_out, alt_val <- 0; 
				outputs: force_out <- val_out;    
        		probability: 3.3E-5 ;
				duration: permanent;
			}
			fault HydraulicPiston_FailedFullOpen "(HydraulicPiston) Stuck open fault." : faults.fail_to {
				inputs: val_in <- force_out, alt_val <- hyd_pressure_in; 
				outputs: force_out <- val_out;    
        		probability: 3.3E-5 ;
				duration: permanent;
			}	
			fault HydraulicPiston_StuckAtLastPosition "(HydraulicPiston) Stuck at last value fault." : faults.fail_to {
				inputs: val_in <- force_out, alt_val <- pre(force_out); 
				outputs: force_out <- val_out;    
        		probability: 3.3E-5 ;
				duration: permanent;
			}
		**};		
	end HydraulicPiston;
	
	
	system BrakeActuator
		features
			-- Inputs
			normal_force_in : in data port Base_Types::Integer;
			alternate_force_in : in data port Base_Types::Integer;
			
			-- Output
			braking_force : out data port Base_Types::Integer;
			
			annex agree {**
				
				assume "Force input from 0 to 10 inclusive" : 
					(normal_force_in >= 0 and normal_force_in <= 10)
					and (alternate_force_in >= 0 and alternate_force_in <= 10);
				
				
										
										
				-- Added guarantee: brake force is always either normal or alternate force value
				guarantee "(BrakeActuator) Brake force is equivalent to either alternate or normal force in." :
							(braking_force = alternate_force_in) or (braking_force = normal_force_in);
					
				-- transform_force_norm_guarantee := (TRUE ->  G ((normal_force_in > 0 | alternate_force_in > 0) <-> braking_force > 0));
	 			guarantee "(BrakeActuator) Braking force is positive if and only if
							normal force or alternate force is positive." :
							(braking_force > 0 <=> (normal_force_in > 0 or alternate_force_in > 0));
			
			
			
				guarantee "Force output from 0 to 10 inclusive" : 
					(braking_force >= 0 and braking_force <= 10);
				
			**};
			
		annex safety {**
			
				
			fault BrakeActuator_FailedFullOff "(BrakeActuator) Stuck closed fault." : faults.fail_to {
				inputs: val_in <- braking_force, alt_val <- 0; 
				outputs: braking_force <- val_out;    
        		probability: 3.3E-6 ;
				duration: permanent;
			}
			fault BrakeActuator_FailedFullOpen "(BrakeActuator) Stuck open fault." : faults.fail_to {
				eq fail_value : int = if (normal_force_in > 0) then normal_force_in
										else (alternate_force_in);
				inputs: val_in <- braking_force, alt_val <- fail_value; 
				outputs: braking_force <- val_out;    
        		probability: 3.3E-6 ;
				duration: permanent;
			}			
			fault BrakeActuator_StuckAtLastPosition "(BrakeActuator) Stuck at last value fault." : faults.fail_to {
				inputs: val_in <- braking_force, alt_val <- pre(braking_force); 
				outputs: braking_force <- val_out;    
        		probability: 3.3E-6 ;
				duration: permanent;
			}
		**};		
	end BrakeActuator;
	
	
	
end WheelBrake;