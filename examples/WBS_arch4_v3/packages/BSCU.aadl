package BSCU
public
with Channel;
with OrGate;
with Base_Types;

	with SwitchGate;
	
	system BSCU
		features
			-- Inputs
			power_1 : in data port Base_Types::Boolean; 
			power_2 : in data port Base_Types::Boolean;
			ground_speed : in data port Base_Types::Integer;
			elec_pedal_pos_L : in data port Base_Types::Boolean;
			elec_pedal_pos_R : in data port Base_Types::Boolean;
			
			wheel_rolling_1 : in data port Base_Types::Boolean;
			wheel_rolling_2 : in data port Base_Types::Boolean;
			wheel_rolling_3 : in data port Base_Types::Boolean;
			wheel_rolling_4 : in data port Base_Types::Boolean;
			wheel_rolling_5 : in data port Base_Types::Boolean;
			wheel_rolling_6 : in data port Base_Types::Boolean;
			wheel_rolling_7 : in data port Base_Types::Boolean;
			wheel_rolling_8 : in data port Base_Types::Boolean;
			
			-- Outputs
			brake_as_cmd_1 : out data port Base_Types::Boolean;
			brake_as_cmd_2 : out data port Base_Types::Boolean;
			brake_as_cmd_3 : out data port Base_Types::Boolean;
			brake_as_cmd_4 : out data port Base_Types::Boolean;
			brake_as_cmd_5 : out data port Base_Types::Boolean;
			brake_as_cmd_6 : out data port Base_Types::Boolean;
			brake_as_cmd_7 : out data port Base_Types::Boolean;
			brake_as_cmd_8 : out data port Base_Types::Boolean;
			as_cmd_pair_1_5 : out data port Base_Types::Boolean;
			as_cmd_pair_2_6 : out data port Base_Types::Boolean;
			as_cmd_pair_3_7 : out data port Base_Types::Boolean;
			as_cmd_pair_4_8 : out data port Base_Types::Boolean;
			system_validity : out data port Base_Types::Boolean;
				
			annex agree {**
				
				-- Properties
				
				assume "(BSCU) Ground speed always greater than zero." : 
					(ground_speed >= 0) and (ground_speed <= 10);
				-- Properties 
				property SPEED = ground_speed > 0;
				property VALID = system_validity;
				-- When one of the wheels in a pair is not rolling
				property PAIR_NOT_ROLLING_15 = not wheel_rolling_1 or not wheel_rolling_5;
				property PAIR_NOT_ROLLING_26 = not wheel_rolling_2 or not wheel_rolling_6;
				property PAIR_NOT_ROLLING_37 = not wheel_rolling_3 or not wheel_rolling_7;
				property PAIR_NOT_ROLLING_48 = not wheel_rolling_4 or not wheel_rolling_8;
				property power = power_1 or power_2;			
				-- Antiskid command equivalence
				guarantee "(Channel) Antiskid command to pair 1,5: Alternate AS command is true if and only if
							we have power, ground speed is positive, and one of the two wheels is not rolling." :
							true -> ((as_cmd_pair_1_5 = (power and SPEED and PAIR_NOT_ROLLING_15)) or (as_cmd_pair_1_5 = false));
							
				guarantee "(Channel) Antiskid command to pair 2,6: Alternate AS command is true if and only if
							we have power, ground speed is positive, and one of the two wheels is not rolling." :
							true -> ((as_cmd_pair_2_6 = (power and SPEED and PAIR_NOT_ROLLING_26)) or (as_cmd_pair_2_6 = false));
							
				guarantee "(Channel) Antiskid command to pair 3,7: Alternate AS command is true if and only if
							we have power, ground speed is positive, and one of the two wheels is not rolling." :
							true -> ((as_cmd_pair_3_7 = (power and SPEED and PAIR_NOT_ROLLING_37)) or (as_cmd_pair_3_7 = false));
							
				guarantee "(Channel) Antiskid command to pair 4,8: Alternate AS command is true if and only if
							we have power, ground speed is positive, and one of the two wheels is not rolling." :
							true -> ((as_cmd_pair_4_8 = (power and SPEED and PAIR_NOT_ROLLING_48)) or (as_cmd_pair_4_8 = false));

				guarantee " (ctrl system) Brake antiskid command behavior (wheel 1): Brake antiskid is commanded to the wheel only when 
							Pedal pressed, system valid, and either speed and rolling wheel or no speed." :
							true -> (((VALID and power and elec_pedal_pos_L) and ((SPEED and wheel_rolling_1) or (not SPEED))) <=> brake_as_cmd_1);
							
				guarantee " (ctrl system) Brake antiskid command behavior (wheel 2): Brake antiskid is commanded to the wheel only when 
							Pedal pressed, system valid, and either speed and rolling wheel or no speed." :
							true -> (((VALID and power and elec_pedal_pos_L) and ((SPEED and wheel_rolling_2) or (not SPEED))) <=> brake_as_cmd_2);
				
				guarantee " (ctrl system) Brake antiskid command behavior (wheel 3): Brake antiskid is commanded to the wheel only when 
							Pedal pressed, system valid, and either speed and rolling wheel or no speed." :
							true -> (((VALID and power and elec_pedal_pos_R) and ((SPEED and wheel_rolling_3) or (not SPEED))) <=> brake_as_cmd_3);
				
				guarantee " (ctrl system) Brake antiskid command behavior (wheel 4): Brake antiskid is commanded to the wheel only when 
							Pedal pressed, system valid, and either speed and rolling wheel or no speed." :
							true -> (((VALID and power and elec_pedal_pos_R) and ((SPEED and wheel_rolling_4) or (not SPEED))) <=> brake_as_cmd_4);
							
				guarantee " (ctrl system) Brake antiskid command behavior (wheel 5): Brake antiskid is commanded to the wheel only when 
							Pedal pressed, system valid, and either speed and rolling wheel or no speed." :
							true -> (((VALID and power and elec_pedal_pos_L) and ((SPEED and wheel_rolling_5) or (not SPEED))) <=> brake_as_cmd_5);
				
				guarantee " (ctrl system) Brake antiskid command behavior (wheel 6): Brake antiskid is commanded to the wheel only when 
							Pedal pressed, system valid, and either speed and rolling wheel or no speed." :
							true -> (((VALID and power and elec_pedal_pos_L) and ((SPEED and wheel_rolling_6) or (not SPEED))) <=> brake_as_cmd_6);
				
				guarantee " (ctrl system) Brake antiskid command behavior (wheel 7): Brake antiskid is commanded to the wheel only when 
							Pedal pressed, system valid, and either speed and rolling wheel or no speed." :
							true -> (((VALID and power and elec_pedal_pos_R) and ((SPEED and wheel_rolling_7) or (not SPEED))) <=> brake_as_cmd_7);
							 
				guarantee " (ctrl system) Brake antiskid command behavior (wheel 8): Brake antiskid is commanded to the wheel only when 
							Pedal pressed, system valid, and either speed and rolling wheel or no speed." :
							true -> (((VALID and power and elec_pedal_pos_R) and ((SPEED and wheel_rolling_8) or (not SPEED))) <=> brake_as_cmd_8);

			**};
				
	end BSCU;
	
	system implementation BSCU.inst
		subcomponents
			channel1 : system Channel::Channel.inst; 
			channel2 : system Channel::Channel.inst;
			or_gate_system_validity : system OrGate::OrGate;
			switch_gate_brake_as_cmd_1 : system SwitchGate::SwitchGate;
			switch_gate_brake_as_cmd_2 : system SwitchGate::SwitchGate;
			switch_gate_brake_as_cmd_3 : system SwitchGate::SwitchGate;
			switch_gate_brake_as_cmd_4 : system SwitchGate::SwitchGate;
			switch_gate_brake_as_cmd_5 : system SwitchGate::SwitchGate;
			switch_gate_brake_as_cmd_6 : system SwitchGate::SwitchGate;
			switch_gate_brake_as_cmd_7 : system SwitchGate::SwitchGate;
			switch_gate_brake_as_cmd_8 : system SwitchGate::SwitchGate;
			switch_gate_brake_as_cmd_pair_1_5 : system SwitchGate::SwitchGate;
			switch_gate_brake_as_cmd_pair_2_6 : system SwitchGate::SwitchGate;
			switch_gate_brake_as_cmd_pair_3_7 : system SwitchGate::SwitchGate;
			switch_gate_brake_as_cmd_pair_4_8 : system SwitchGate::SwitchGate;
			
		connections
			chan1_valid_to_orgate : port channel1.system_validity -> or_gate_system_validity.in_1;
			chan2_valid_to_orgate : port channel2.system_validity -> or_gate_system_validity.in_2;
			sys_valid : port or_gate_system_validity.out_val -> system_validity;
			
			brake_as_1 : port switch_gate_brake_as_cmd_1.cmd_out -> brake_as_cmd_1;
			brake_as_2 : port switch_gate_brake_as_cmd_2.cmd_out -> brake_as_cmd_2;
			brake_as_3 : port switch_gate_brake_as_cmd_3.cmd_out -> brake_as_cmd_3;
			brake_as_4 : port switch_gate_brake_as_cmd_4.cmd_out -> brake_as_cmd_4;
			brake_as_5 : port switch_gate_brake_as_cmd_5.cmd_out -> brake_as_cmd_5;
			brake_as_6 : port switch_gate_brake_as_cmd_6.cmd_out -> brake_as_cmd_6;
			brake_as_7 : port switch_gate_brake_as_cmd_7.cmd_out -> brake_as_cmd_7;
			brake_as_8 : port switch_gate_brake_as_cmd_8.cmd_out -> brake_as_cmd_8;
			
			as_pair_1_5 : port switch_gate_brake_as_cmd_pair_1_5.cmd_out -> as_cmd_pair_1_5;
			as_pair_2_6 : port switch_gate_brake_as_cmd_pair_2_6.cmd_out -> as_cmd_pair_2_6;
			as_pair_3_7 : port switch_gate_brake_as_cmd_pair_3_7.cmd_out -> as_cmd_pair_3_7;
			as_pair_4_8 : port switch_gate_brake_as_cmd_pair_4_8.cmd_out -> as_cmd_pair_4_8;
			
			-- To switch gates:
			sg1_cmd_in_1 : port channel1.brake_as_cmd_1 -> switch_gate_brake_as_cmd_1.cmd_in_1;
			sg1_cmd_in_2 : port channel2.brake_as_cmd_1 -> switch_gate_brake_as_cmd_1.cmd_in_2;
			sg1_valid_in_1 : port channel1.system_validity -> switch_gate_brake_as_cmd_1.validity1;
			sg1_valid_in_2 : port channel2.system_validity -> switch_gate_brake_as_cmd_1.validity2;
			
			sg2_cmd_in_1 : port channel1.brake_as_cmd_2 -> switch_gate_brake_as_cmd_2.cmd_in_1;
			sg2_cmd_in_2 : port channel2.brake_as_cmd_2 -> switch_gate_brake_as_cmd_2.cmd_in_2;
			sg2_valid_in_1 : port channel1.system_validity -> switch_gate_brake_as_cmd_2.validity1;
			sg2_valid_in_2 : port channel2.system_validity -> switch_gate_brake_as_cmd_2.validity2;
		
			sg3_cmd_in_1 : port channel1.brake_as_cmd_3 -> switch_gate_brake_as_cmd_3.cmd_in_1;
			sg3_cmd_in_2 : port channel2.brake_as_cmd_3 -> switch_gate_brake_as_cmd_3.cmd_in_2;
			sg3_valid_in_1 : port channel1.system_validity -> switch_gate_brake_as_cmd_3.validity1;
			sg3_valid_in_2 : port channel2.system_validity -> switch_gate_brake_as_cmd_3.validity2;
			
			sg4_cmd_in_1 : port channel1.brake_as_cmd_4 -> switch_gate_brake_as_cmd_4.cmd_in_1;
			sg4_cmd_in_2 : port channel2.brake_as_cmd_4 -> switch_gate_brake_as_cmd_4.cmd_in_2;
			sg4_valid_in_1 : port channel1.system_validity -> switch_gate_brake_as_cmd_4.validity1;
			sg4_valid_in_2 : port channel2.system_validity -> switch_gate_brake_as_cmd_4.validity2;
			
			sg5_cmd_in_1 : port channel1.brake_as_cmd_5 -> switch_gate_brake_as_cmd_5.cmd_in_1;
			sg5_cmd_in_2 : port channel2.brake_as_cmd_5 -> switch_gate_brake_as_cmd_5.cmd_in_2;
			sg5_valid_in_1 : port channel1.system_validity -> switch_gate_brake_as_cmd_5.validity1;
			sg5_valid_in_2 : port channel2.system_validity -> switch_gate_brake_as_cmd_5.validity2;
			
			sg6_cmd_in_1 : port channel1.brake_as_cmd_6 -> switch_gate_brake_as_cmd_6.cmd_in_1;
			sg6_cmd_in_2 : port channel2.brake_as_cmd_6 -> switch_gate_brake_as_cmd_6.cmd_in_2;
			sg6_valid_in_1 : port channel1.system_validity -> switch_gate_brake_as_cmd_6.validity1;
			sg6_valid_in_2 : port channel2.system_validity -> switch_gate_brake_as_cmd_6.validity2;
			
			sg7_cmd_in_1 : port channel1.brake_as_cmd_7 -> switch_gate_brake_as_cmd_7.cmd_in_1;
			sg7_cmd_in_2 : port channel2.brake_as_cmd_7 -> switch_gate_brake_as_cmd_7.cmd_in_2;
			sg7_valid_in_1 : port channel1.system_validity -> switch_gate_brake_as_cmd_7.validity1;
			sg7_valid_in_2 : port channel2.system_validity -> switch_gate_brake_as_cmd_7.validity2;
			
			sg8_cmd_in_1 : port channel1.brake_as_cmd_8 -> switch_gate_brake_as_cmd_8.cmd_in_1;
			sg8_cmd_in_2 : port channel2.brake_as_cmd_8 -> switch_gate_brake_as_cmd_8.cmd_in_2;
			sg8_valid_in_1 : port channel1.system_validity -> switch_gate_brake_as_cmd_8.validity1;
			sg8_valid_in_2 : port channel2.system_validity -> switch_gate_brake_as_cmd_8.validity2;
			
			ch1_validity_to_switch_gate_1_5: port channel1.system_validity -> switch_gate_brake_as_cmd_pair_1_5.validity1;
			ch2_validity_to_switch_gate_1_5: port channel2.system_validity -> switch_gate_brake_as_cmd_pair_1_5.validity2;
			ch1_1_as_cmd_pair_to_switch_gate_1_5: port channel1.as_cmd_pair_1_5 -> switch_gate_brake_as_cmd_pair_1_5.cmd_in_1;
			ch1_2_as_cmd_pair_to_switch_gate_1_5: port channel2.as_cmd_pair_1_5 -> switch_gate_brake_as_cmd_pair_1_5.cmd_in_2;
			
			ch1_validity_to_switch_gate_2_6: port channel1.system_validity -> switch_gate_brake_as_cmd_pair_2_6 .validity1;
			ch2_validity_to_switch_gate_2_6: port channel2.system_validity -> switch_gate_brake_as_cmd_pair_2_6 .validity2;
			ch1_1_as_cmd_pair_to_switch_gate_2_6: port channel1.as_cmd_pair_2_6 -> switch_gate_brake_as_cmd_pair_2_6.cmd_in_1;
			ch1_2_as_cmd_pair_to_switch_gate_2_6: port channel2.as_cmd_pair_2_6 -> switch_gate_brake_as_cmd_pair_2_6.cmd_in_2;			
			
			ch1_validity_to_switch_gate_3_7: port channel1.system_validity -> switch_gate_brake_as_cmd_pair_3_7.validity1;
			ch2_validity_to_switch_gate_3_7: port channel2.system_validity -> switch_gate_brake_as_cmd_pair_3_7.validity2;
			ch1_1_as_cmd_pair_to_switch_gate_3_7: port channel1.as_cmd_pair_3_7 -> switch_gate_brake_as_cmd_pair_3_7.cmd_in_1;
			ch1_2_as_cmd_pair_to_switch_gate_3_7: port channel2.as_cmd_pair_3_7 -> switch_gate_brake_as_cmd_pair_3_7.cmd_in_2;	
			
			ch1_validity_to_switch_gate_4_8: port channel1.system_validity -> switch_gate_brake_as_cmd_pair_4_8.validity1;
			ch2_validity_to_switch_gate_4_8: port channel2.system_validity -> switch_gate_brake_as_cmd_pair_4_8.validity2;
			ch1_1_as_cmd_pair_to_switch_gate_4_8: port channel1.as_cmd_pair_4_8 -> switch_gate_brake_as_cmd_pair_4_8.cmd_in_1;
			ch1_2_as_cmd_pair_to_switch_gate_4_8: port channel2.as_cmd_pair_4_8 -> switch_gate_brake_as_cmd_pair_4_8.cmd_in_2;				
			
			-- Inputs to channels
			
			wheel_rolling_to_channel1_1 : port wheel_rolling_1 -> channel1.wheel_rolling_1;
			wheel_rolling_to_channel2_1 : port wheel_rolling_1 -> channel2.wheel_rolling_1;
			wheel_rolling_to_channel1_2 : port wheel_rolling_2 -> channel1.wheel_rolling_2;
			wheel_rolling_to_channel2_2 : port wheel_rolling_2 -> channel2.wheel_rolling_2;
			wheel_rolling_to_channel1_3 : port wheel_rolling_3 -> channel1.wheel_rolling_3;
			wheel_rolling_to_channel2_3 : port wheel_rolling_3 -> channel2.wheel_rolling_3;
			wheel_rolling_to_channel1_4 : port wheel_rolling_4 -> channel1.wheel_rolling_4;
			wheel_rolling_to_channel2_4 : port wheel_rolling_4 -> channel2.wheel_rolling_4;
			wheel_rolling_to_channel1_5 : port wheel_rolling_5 -> channel1.wheel_rolling_5;
			wheel_rolling_to_channel2_5 : port wheel_rolling_5 -> channel2.wheel_rolling_5;
			wheel_rolling_to_channel1_6 : port wheel_rolling_6 -> channel1.wheel_rolling_6;
			wheel_rolling_to_channel2_6 : port wheel_rolling_6 -> channel2.wheel_rolling_6;
			wheel_rolling_to_channel1_7 : port wheel_rolling_7 -> channel1.wheel_rolling_7;
			wheel_rolling_to_channel2_7 : port wheel_rolling_7 -> channel2.wheel_rolling_7;
			wheel_rolling_to_channel1_8 : port wheel_rolling_8 -> channel1.wheel_rolling_8;
			wheel_rolling_to_channel2_8 : port wheel_rolling_8 -> channel2.wheel_rolling_8;
			
			elec_pedal_pos_channel1_L : port elec_pedal_pos_L -> channel1.elec_pedal_pos_L;
			elec_pedal_pos_channel1_R : port elec_pedal_pos_R -> channel1.elec_pedal_pos_R;
			elec_pedal_pos_channel2_L : port elec_pedal_pos_L -> channel2.elec_pedal_pos_L;
			elec_pedal_pos_channel2_R : port elec_pedal_pos_R -> channel2.elec_pedal_pos_R;
			
			ground_speed_to_channel1 : port ground_speed -> channel1.ground_speed;
			ground_speed_to_channel2 : port ground_speed -> channel2.ground_speed;
			
			power_to_channel1 : port power_1 -> channel1.power;
			power_to_channel2 : port power_2 -> channel2.power;
			
		annex safety{**
	
		analyze : max 1 fault
		-- MWW: END HACK!
		-- ---------------------------------------------------------------------------	
		**}	;	
	
	end BSCU.inst;

	
end bscu;