package Reactor_Radiation_Ctrl
public
	with Base_Types;
	renames Base_Types::all;
	
	with Radiation_Sensors;
	renames Radiation_Sensors::all;

	with Voters;
	renames Voters::all;

	system Reactor_Radiation_Ctrl
		features
			Env_Radiation: in data port Integer;
			Shut_Down_Cmd: out data port Boolean;
		annex agree {**
				
			guarantee "shut down when and only when we should": 
			Shut_Down_Cmd = (Env_Radiation > Constants.HIGH_RADIATION_THRESHOLD);	
			
--with the above guarantee split into the following two, with pressure sensor stuck at low,
--for the non voting implementation, it takes the max 3 fault to make the "shut down when we should" to fail						
--			guarantee "shut down when we should": 
--			(Env_Radiation > Constants.HIGH_RADIATION_THRESHOLD) => Shut_Down_Cmd;			
--				
--			guarantee "don't shut down when we shouldn't": 
--			not(Env_Radiation > Constants.HIGH_RADIATION_THRESHOLD) => not(Shut_Down_Cmd);					
			
		**};
	end Reactor_Radiation_Ctrl;

	system implementation Reactor_Radiation_Ctrl.No_Voting
		subcomponents
			Radiation_Sensor1: system Radiation_Sensor;
			Radiation_Sensor2: system Radiation_Sensor;
			Radiation_Sensor3: system Radiation_Sensor;
		connections
			Env_Radiation_To_Radiation_Sensor1: port Env_Radiation -> Radiation_Sensor1.Env_Radiation;
			Env_Radiation_To_Radiation_Sensor2: port Env_Radiation -> Radiation_Sensor2.Env_Radiation;
			Env_Radiation_To_Radiation_Sensor3: port Env_Radiation -> Radiation_Sensor3.Env_Radiation;
			Radiation_Sensor1_High_Radiation_To_Shut_Down: port Radiation_Sensor1.High_Radiation_Indicator -> Shut_Down_Cmd;
			Radiation_Sensor2_High_Radiation_To_Shut_Down: port Radiation_Sensor2.High_Radiation_Indicator -> Shut_Down_Cmd;
			Radiation_Sensor3_High_Radiation_To_Shut_Down: port Radiation_Sensor3.High_Radiation_Indicator -> Shut_Down_Cmd;
		annex agree {**
			connection Radiation_Sensor1_High_Radiation_To_Shut_Down: true;
			connection Radiation_Sensor2_High_Radiation_To_Shut_Down: true;
			connection Radiation_Sensor3_High_Radiation_To_Shut_Down: true;
			
			assign Shut_Down_Cmd = Radiation_Sensor1.High_Radiation_Indicator or Radiation_Sensor2.High_Radiation_Indicator or Radiation_Sensor3.High_Radiation_Indicator;
							
		**};
		annex safety {**
      		analyze : max 2 fault
   		**};
	end Reactor_Radiation_Ctrl.No_Voting;

	system implementation Reactor_Radiation_Ctrl.W_Voting
		subcomponents
			Radiation_Sensor1: system Radiation_Sensor;
			Radiation_Sensor2: system Radiation_Sensor;
			Radiation_Sensor3: system Radiation_Sensor;
			Radiation_Voter: system All_Three_Agree_Voter;
		connections
			Env_Radiation_To_Radiation_Sensor1: port Env_Radiation -> Radiation_Sensor1.Env_Radiation;
			Env_Radiation_To_Radiation_Sensor2: port Env_Radiation -> Radiation_Sensor2.Env_Radiation;
			Env_Radiation_To_Radiation_Sensor3: port Env_Radiation -> Radiation_Sensor3.Env_Radiation;
			Radiation_Sensor1_To_Voter: port Radiation_Sensor1.High_Radiation_Indicator -> Radiation_Voter.Sensor1_High;
			Radiation_Sensor2_To_Voter: port Radiation_Sensor2.High_Radiation_Indicator -> Radiation_Voter.Sensor2_High;
			Radiation_Sensor3_To_Voter: port Radiation_Sensor3.High_Radiation_Indicator -> Radiation_Voter.Sensor3_High;
			Radiation_Voter_To_Shut_Down: port Radiation_Voter.High_Out -> Shut_Down_Cmd;
		annex safety {**
      		analyze : max 1 fault
   		**};
	end Reactor_Radiation_Ctrl.W_Voting;
end Reactor_Radiation_Ctrl;