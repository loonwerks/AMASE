package Temp_Sensors
public
	with Base_Types;
	renames Base_Types::all;
	with Constants;
	with Common_Faults;
	
	system Temp_Sensor
		features
			Env_Temp: in data port Integer;
			High_Temp_Indicator: out data port Boolean;
			
		annex agree{**
			eq compare : bool = (Env_Temp > Constants::HIGH_TEMPERATURE_THRESHOLD);
			guarantee "If env temperature higher than temperature threshold,
					   then indicate high temperature":
			High_Temp_Indicator = compare;
			
		**};
		
		annex safety {**
				

			fault Temp_sensor_stuck_at_high "Temp sensor stuck at high": Common_Faults::stuck_true {
				inputs: val_in <- High_Temp_Indicator;     
				outputs: High_Temp_Indicator <- val_out;   
         		disable : false;
         		probability: 1.0E-5 ;
				duration: permanent;
			}
			
			fault Temp_sensor_stuck_at_low "Temp sensor stuck at low": Common_Faults::stuck_false {
				inputs: val_in <- High_Temp_Indicator;     
				outputs: High_Temp_Indicator <- val_out;   
         		disable : false;
         		probability: 1.0E-5 ;
				duration: permanent;
			}	
		**};
	end Temp_Sensor;
	
end Temp_Sensors;