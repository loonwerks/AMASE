 package Nodes
public
with Base_Types;
with Buses;
	system Node
		features
			sensor_input : in data port Base_Types::Float;
			output : out data port Buses::commBus.real;
			
			busA_input : in data port Buses::commBus.real;
			busB_input : in data port Buses::commBus.real;
			busC_input : in data port Buses::commBus.real;
			
		annex agree {**
			assume "Input is bounded between 0 and 10.":
				((sensor_input > 0.0) and (sensor_input < 10.0));
				
			guarantee "All bus inputs are equal." :
				(busA_input = busB_input) and (busA_input = busC_input);
			
			guarantee "Sensor input equals output." :
				(sensor_input = output.NODE_VAL);	
		**};
		
		annex safety {**
			
			fault Node_Fault "Node output is asymmetric": Common_Faults.fail_to_real {
				eq fail_val : real;
				
				inputs: val_in <- output.NODE_VAL, alt_val <- fail_val;     
				outputs: output.NODE_VAL <- val_out;    
				duration: permanent;
				propagate_type: asymmetric;
			}
			
		**};
	end Node;
end Nodes;