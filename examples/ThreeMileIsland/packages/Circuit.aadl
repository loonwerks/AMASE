package Circuit
public
with Base_Types;

	system Circuit
		features
			-- Status of the pump connected to the circuit
			pump_status : in data port Base_Types::Integer;
			-- If open, coolant is injected in the circuit
			-- Comes from tank output
			input_valve_status : in data port Base_Types::Integer;
			-- If open, coolant is drained from the circuit
			-- Comes from seriesValves.output
			-- (If both porv and block valves open, status is open, 
			-- else its closed)
			output_valve_status : in data port Base_Types::Integer;
			-- Temp at the cold point
			-- Comes from circuit 2
			temp_input_low : in data port Base_Types::Integer;
			-- Temp at the hot point
			-- reactor output temp
			temp_input_high : in data port Base_Types::Integer;
			
			-- Temp at the exit of the cold point {1,,,5}
			temp_output_low : out data port Base_Types::Integer;
			-- Temp at the exit of the hot point {1,..,5}
			temp_output_high : out data port Base_Types::Integer;
			-- Level of coolant {1,...,10}
			coolant_level : out data port Base_Types::Integer;
			-- Status of coolant {steam_cavities, normal, solid}
			coolant_status : out data port Base_Types::Integer;
			
		annex agree {**
		

			-- Coolant level state machine
			const Coolant_level_init : int = 5;
			
			eq Current_coolant_level : int;
			eq Previous_coolant_level : int = prev(Current_coolant_level, Coolant_level_init);
			
			-- Of both the input and output valves are both open or both closed, 
			-- the level remains the same.
			eq T_coolant_remains_same_level : bool = 
				((input_valve_status = datatypes.VALVE_OPEN) 
						and (output_valve_status = datatypes.VALVE_OPEN))
				or ((input_valve_status = datatypes.VALVE_CLOSED)  
						and (output_valve_status = datatypes.VALVE_CLOSED));
			  
			-- If input valve is open, increase the level
			eq T_increase_coolant_level : bool = 
				false -> ((input_valve_status = datatypes.VALVE_OPEN) 
					and (output_valve_status = datatypes.VALVE_CLOSED));
			
			-- If output valve is open, decrease the level
			eq T_decrease_coolant_level : bool = 
				false -> ((input_valve_status = datatypes.VALVE_CLOSED) 
					and (output_valve_status = datatypes.VALVE_OPEN));
					
			eq Some_coolant_level_transition : bool = T_coolant_remains_same_level or T_increase_coolant_level
					or T_decrease_coolant_level;		
			
			
			
			
			
			
			-- temp output low transitions
			-- Status of the coolant before entering the heater
--			eq Temp_output_low_init : int = 2;
--			eq Current_temp_output_low : int;
--			eq Previous_temp_output_low : int = prev(Current_temp_output_low, Temp_output_low_init);
--			
--			eq T_temp_output_low_to_input_low : bool = 
--				false-> (pump_status = datatypes.PUMPING);
--				
--			eq T_temp_output_low_to_input_high : bool =
--				false -> (not (pump_status = datatypes.PUMPING));
--			
--			eq Some_temp_out_low_transition : bool = T_temp_output_low_to_input_low 
--				or T_temp_output_low_to_input_high;
			
			 
					
			-- Status of coolant after entering heater
--			eq Temp_output_high_init : int = 2;
--			eq Current_temp_output_high : int;
--			eq Previous_temp_output_high : int = prev(Current_temp_output_high, Temp_output_high_init);
--			
--			eq T_temp_output_high_to_input_high : bool = 
--				false -> (pump_status = datatypes.PUMPING);
--				
--			eq T_temp_output_high_to_input_low : bool =
--				false -> (not (pump_status = datatypes.PUMPING));
--			
--			eq Some_temp_out_high_transition : bool = T_temp_output_high_to_input_high 
--				or T_temp_output_high_to_input_low; 
			
			
			-- Coolant status state machine
			eq Coolant_status_init : int = datatypes.NORMAL;
			eq Current_coolant_status : int;
			eq Previous_coolant_status : int = prev(Current_coolant_status, Coolant_status_init);
			
			eq T_coolant_status_to_solid : bool = 
				false -> (coolant_level = 10);
				
			eq T_coolant_status_to_steam_cavities : bool = 
				false -> ((coolant_level <= 2)
					and ((temp_output_low = 5) or (temp_output_high= 5))); 
			 
			eq Some_coolant_status_transition : bool =
				T_coolant_status_to_solid or T_coolant_status_to_steam_cavities;
				
			
--			
			-- Coolant level guarantees
			guarantee "Coolant level remains constant" :
				((input_valve_status = datatypes.VALVE_OPEN) 
						and (output_valve_status = datatypes.VALVE_OPEN))
				or ((input_valve_status = datatypes.VALVE_CLOSED)  
						and (output_valve_status = datatypes.VALVE_CLOSED)) 
					=> (Current_coolant_level = Previous_coolant_level);
			
			guarantee "Coolant level increases" : 
				((input_valve_status = datatypes.VALVE_OPEN) 
					and (output_valve_status = datatypes.VALVE_CLOSED))
					=> (Current_coolant_level = datatypes.move(Previous_coolant_level, 10));
			
			guarantee "Coolant level decreases" : 
				((input_valve_status = datatypes.VALVE_CLOSED) 
					and (output_valve_status = datatypes.VALVE_OPEN))
					=> (Current_coolant_level = datatypes.move(Previous_coolant_level, 0));
			
			guarantee "No status change, no new output" : 
				not (Some_coolant_level_transition) => (Current_coolant_level = Previous_coolant_level);
			
			guarantee "Coolant level equals Current_coolant_level" :
				coolant_level = Current_coolant_level;
			
			guarantee "Current coolant level bounded" :
				(Current_coolant_level >= 0) and (Current_coolant_level <= 10);	
			
			guarantee "Coolant level bounded" :
				(coolant_level >= 0) and (coolant_level <= 10);
			
			
--			guarantee "Datatypes move coolant temp one step" : 
--				(datatypes.move(Current_coolant_level, 10) = (Current_coolant_level + 1))
--				or (datatypes.move(Current_coolant_level, 0) = (Current_coolant_level - 1))
--				or (datatypes.move(Current_coolant_level, Current_coolant_level) = (Current_coolant_level)); 
--			
			-- Temp_output_low guarantees
--			guarantee "Temp output low equals input low" :
--				(T_temp_output_low_to_input_low) => (temp_input_low = Current_temp_output_low);
--			
--			guarantee "Temp output low equals input high" :
--				(T_temp_output_low_to_input_high) => (temp_input_low = Current_temp_output_high);
--			
--			guarantee "No status change for temp_output_low, no new output" : 
--				not (Some_temp_out_low_transition) => (Current_temp_output_low = Previous_temp_output_low);
--			
--			guarantee "Temp output low status" : 
--				(temp_output_low = Current_temp_output_low); 
			
--			guarantee "Temp output low bounded" : 
--				(temp_output_low >= 0) and (temp_output_low <= 10);
--			






--			-- Temp_output_high guarantees
--			guarantee "Temp output high equals input low" :
--				(T_temp_output_high_to_input_low) => (temp_input_high = Current_temp_output_low);
--			
--			guarantee "Temp output high equals input high" :
--				(T_temp_output_high_to_input_high) => (temp_input_high = Current_temp_output_high);
--			
--			guarantee "No status change for temp_output_high, no new output" : 
--				not (Some_temp_out_high_transition) => (Current_temp_output_high = Previous_temp_output_high);
--			
--			guarantee "Temp output high status" : 
--				(temp_output_high = Current_temp_output_high); 
--				
--				



			-- Coolant status guarantees
			guarantee "Coolant status is solid" :
				(T_coolant_status_to_solid) => (Current_coolant_status = datatypes.SOLID);
				
			guarantee "Coolant status is steam cavities" :
				(T_coolant_status_to_steam_cavities) => (Current_coolant_status = datatypes.STEAM_CAVITIES);
			
			guarantee "Coolant status output" :
				(coolant_status = Current_coolant_status);	
			
			guarantee "Current coolant status bounded" :
				(coolant_status >= datatypes.STEAM_CAVITIES) and (coolant_status <= datatypes.SOLID);
--			
--					 
				
		**};
	end Circuit;
	
	
end Circuit;