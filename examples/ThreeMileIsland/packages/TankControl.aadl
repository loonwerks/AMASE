package TankControl
public
with Base_Types;

	system TankControl
		features
			-- {inject, none} (operator command)
			command : in data port Base_Types::Integer; 
			
			
			-- Output flows to tank
			output_to_tank : out data port Base_Types::Integer;
			-- Output to valve
			output_to_valve : out data port Base_Types::Integer;
			-- Output to pump
			output_to_pump : out data port Base_Types::Integer;
			
		annex agree {**
			
			assume "Command input is bounded." :
				(command >= datatypes.TANK_INJECT) and (command <= datatypes.TANK_STOP);
				
			
			--------------- Tank output
			
			guarantee "Initially, output to tank is open." :
				(output_to_tank = datatypes.VALVE_OPEN) -> true;
				
			-- If pump is pumping and valve is open, output is open, else it's closed.
			-- In order for the pump to be pumping and valve to be open, we need
			-- an inject command. This guarantee is simplified from the original NuSMV model.
			guarantee "Transform valve and pump output into Tank output." :
				if (command = datatypes.TANK_INJECT) 
					then (output_to_tank = datatypes.VALVE_OPEN) 
				else (output_to_tank = datatypes.VALVE_CLOSED);
			
			guarantee "Output to tank bounded:" :
				(output_to_tank >= datatypes.VALVE_OPEN) and (output_to_tank <= datatypes.VALVE_CLOSED); 
--			
--			
			------------------------ Valve output
			guarantee "Transform tank stop command to valve closed." :
				(command = datatypes.TANK_STOP) => (output_to_valve = datatypes.VALVE_CLOSED);
				
			guarantee "Transform tank inject command to valve open." :
				(command = datatypes.TANK_INJECT) => (output_to_valve = datatypes.VALVE_OPEN);
				
			guarantee "Output to valve bounded:" :
				(output_to_valve >= datatypes.VALVE_OPEN) and (output_to_valve <= datatypes.VALVE_CLOSED);
				
			------------------------ Pump output
			guarantee "Transform tank stop command to pump stop." :
				(command = datatypes.TANK_STOP) => (output_to_pump = datatypes.MAIN_STOP);
				
			guarantee "Transform tank inject command to pump start." :
				(command = datatypes.TANK_INJECT) => (output_to_pump = datatypes.MAIN_START);
				
			guarantee "Output to pump bounded:" :
				(output_to_pump >= datatypes.TANK_INJECT) and (output_to_pump <= datatypes.TANK_STOP);
				
					
		**};
			
	end TankControl;

end TankControl;