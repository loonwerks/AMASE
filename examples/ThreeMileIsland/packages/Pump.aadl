package Pump
public
with Base_Types;
with datatypes;

	system Pump
		features
			-- {start, stop, none}
			command : in data port Base_Types::Integer;
			-- {steam_cavities, normal, solid}
			coolant_status : in data port Base_Types::Integer;
			
			-- {pumping, stopped, shaking}
			status : out data port Base_Types::Integer; 
		
		annex agree {**
			
			assume "Command input is bounded." :
				(command >= datatypes.TANK_INJECT) and (command <= datatypes.TANK_STOP);
				
			assume "Coolant status input is bounded." :
				(coolant_status >= datatypes.STEAM_CAVITIES) and (coolant_status <= datatypes.SOLID);
			
				
			guarantee "Initial status of pump is pumping." :
				(status = datatypes.PUMPING) -> true;
				
			guarantee "Command to start pumping." :
				(((command = datatypes.MAIN_START) and (not (coolant_status = datatypes.STEAM_CAVITIES)))) 
					=> (status = datatypes.PUMPING);
				
			guarantee "Command to stop pumping." :
				(command = datatypes.MAIN_STOP) => (status = datatypes.STOPPED);
				
			guarantee "Switch to shaking status." :
				((pre(status) = datatypes.PUMPING) and (coolant_status = datatypes.STEAM_CAVITIES)) 
					=> (status = datatypes.SHAKING);
				
				
			guarantee "Bounds on status" :
				(status >= datatypes.PUMPING) and (status <= datatypes.SHAKING); 
			
			
			guarantee "Initial status of pump is pumping." :
				(status = datatypes.PUMPING) -> true;
		
			
		**};
			
	end Pump;

	
end Pump;