package SeriesValve
public
with Base_Types;
with Valve;

	system SeriesValve
		features
			-- Input from main TMI: {open, close}
			porv_cmd : in data port Base_Types::Integer;
			block_cmd : in data port Base_Types::Integer;
			
			
			-- {open, close}
			status : out data port Base_Types::Integer;
		
		annex agree {**
			assume "Range for porv commands." :
				(porv_cmd >= datatypes.VALVE_OPEN) and (porv_cmd <= datatypes.VALVE_CLOSED);
				
			assume "Range for block commands." :
				(block_cmd >= datatypes.VALVE_OPEN) and (block_cmd <= datatypes.VALVE_CLOSED);
				
			guarantee "Output status is open if both valves are open." :
				if (porv_cmd = datatypes.VALVE_OPEN) 
					then (status = block_cmd)
				else (status = porv_cmd);
				
			guarantee "Initially, output is open." :
				(status = datatypes.VALVE_OPEN) -> true;
			
			guarantee "Output status bounded." :
				(status >= datatypes.VALVE_OPEN) and (status <= datatypes.VALVE_CLOSED);
		**};
			
	end SeriesValve;
		
end SeriesValve;