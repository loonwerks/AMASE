package SeriesValve
public
with Base_Types;
with Valve;

	system SeriesValve
		features
			-- Input from main TMI: {open, close, none}
			porv_cmd : in data port Base_Types::Integer;
			block_cmd : in data port Base_Types::Integer;
			
			
			-- {open, close, none}
			status : out data port Base_Types::Integer;
		
		annex agree {**
			assume "Range for porv commands." :
				(porv_cmd >= datatypes.VALVE_OPEN) and (porv_cmd <= datatypes.VALVE_NONE);
				
			assume "Range for block commands." :
				(block_cmd >= datatypes.VALVE_OPEN) and (block_cmd <= datatypes.VALVE_NONE);
				
				
			guarantee "Output status is open if both valves are open." :
				if (porv_cmd = datatypes.VALVE_OPEN) 
					then (status = block_cmd)
				else (status = porv_cmd);
			
		**};
			
	end SeriesValve;
	
	
	system implementation SeriesValve.impl
		subcomponents
			porv : system Valve::Valve;
			block : system Valve::Valve;
		
		connections
			command_to_porv : port porv_cmd -> porv.command;
			command_to_block : port block_cmd -> block.command;
			
	end SeriesValve.impl;	
end SeriesValve;