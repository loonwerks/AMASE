package Reactor
public	
with Base_Types;
with datatypes;

	system Reactor
		features
			-- insertion of rods
			-- {extracted, partially_inserted, inserted}
			rods_command : in data port Base_Types::Integer;
			-- How much coolant is present in reactor
			coolant_level : in data port Base_Types::Integer;
			-- Temperature of coolant
			coolant_temperature : in data port Base_Types::Integer;
			
			-- Temp of reactor
			-- {1,..,5} = {inert, low, normal, hot, very hot}
			output_temp : out data port Base_Types::Integer;
			-- True if core is melted
			melted : out data port Base_Types::Boolean;
		
		annex agree {**
			
			-- Reactor core status values
			const CORE_INERT : int = 1;
			const CORE_LOW : int = 2;
			const CORE_NORMAL : int = 3;
			const CORE_HOT : int = 4;
			const CORE_VERY_HOT : int = 5;
			
			-- Core status transitions
			eq Current_core_status : int;
			eq Core_status_init : int = CORE_NORMAL;
			eq Previous_status : int = prev(Current_core_status, Core_status_init);
			
			-- Rods are either inserted partially or fully
			eq T_core_status_to_inert : bool = (rods_command = datatypes.INSERTED);
			eq T_core_status_to_low : bool = (rods_command = datatypes.PARTIALLY_EXTRACTED);
			
			-- Now the rods are extracted. 
			-- We check the coolant level. If it is "adequate" and the coolant is 
			-- "ok" then it keeps the core_status at the same temp
			-- but never lower than 3.
			eq Rods_extracted : bool = 
				((rods_command = datatypes.EXTRACTED) or (rods_command = datatypes.PARTIALLY_EXTRACTED));
			eq T_core_status_to_normal : bool = (coolant_level > 3) and Rods_extracted;
			-- Any increase in the coolant temp does not increase the core status.
			-- It just keeps it as it is.
			eq T_core_status_to_hot : bool = (coolant_level = 3) and Rods_extracted;
			-- If the coolant level is low, then the temp increases
			eq T_core_status_to_very_hot : bool = (coolant_level < 3) and Rods_extracted;
			 
			eq Some_transition : bool = T_core_status_to_inert or T_core_status_to_low 
					or T_core_status_to_normal or T_core_status_to_hot
					or T_core_status_to_very_hot; 
			
			eq Melted_status : bool = (Current_core_status = CORE_VERY_HOT) and (coolant_level = 1);
			
			guarantee "Core status is inert (1)" : 
				(T_core_status_to_inert) => (Current_core_status = CORE_INERT);
				
			guarantee "Core status is low (2)" : 
				(T_core_status_to_low) => (Current_core_status = CORE_LOW);
			
			guarantee "Core status is normal (3)" : 
				(T_core_status_to_normal) => (Current_core_status = CORE_NORMAL);
			
			guarantee "Core status is hot (4)" :
				(T_core_status_to_hot) => (Current_core_status = CORE_HOT); 
				
			guarantee "Core status is very hot (5)" :
				(T_core_status_to_very_hot) => (Current_core_status = CORE_VERY_HOT); 
			
			guarantee "No status change, no new output" : 
				not (Some_transition) => (Current_core_status = Previous_status);
			
			guarantee "Output status" : (Current_core_status = output_temp);
			
			guarantee "Melted status" : (Melted_status = melted);
		**};
			
	end Reactor;
end Reactor;