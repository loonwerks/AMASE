package Nodes_v5
public
	with Base_Types;
	with Data_Types;
	renames Data_Types::all;

	system Node
		features
			--inputs
			Node1_In: in data port Node_Msg.Impl;
			Node2_In: in data port Node_Msg.Impl;
			Node3_In: in data port Node_Msg.Impl;
			--outputs
			Node_Out: out data port Node_Msg.Impl;
			
			testOutput : out data port Base_Types::Boolean;

		annex agree {**
			eq pid : int = Get_Property(this, AADL_Properties::PID);
			eq node_num : int = Get_Property(this, AADL_Properties::Node_Num);
			
			-- for each Nodei_PID_from_Nodei field of Node_Out,
			-- if Node_i, report its own pid_i
			-- else forward pid_i from node_i
			guarantee "if node 1, Node1_PID_from_Node1 remains pid from beginning step;
			else, forward node1_pid1 previously received from the node 1 with init value 0" :
				Node_Out.Node1_PID_from_Node1 = 
				(if(node_num = 1)
				then(pid)
				else
				(0->pre(Node1_In.Node1_PID_from_Node1)));
				
			guarantee "if node 2, Node2_PID_from_Node2 remains pid from beginning step;
			else, forward node2_pid2 previously received from the node 2 with init value 0" :
				Node_Out.Node2_PID_from_Node2 = 
				(if(node_num = 2)
				then(pid)
				else(
					 if(node_num = 1) 
					 then(0->pre(Node1_In.Node2_PID_from_Node2))
					 else(0->pre(Node2_In.Node2_PID_from_Node2))
					)
				);
				
			guarantee "if node 3, Node3_PID_from_Node3 remains pid from beginning step;
			else, forward node3_pid3 previously received from the node 3 with init value 0" :
				Node_Out.Node3_PID_from_Node3 = 
				(if(node_num = 3)
				then(pid)
				else(
					if(node_num = 4) 
					 then(0->pre(Node3_In.Node3_PID_from_Node3))
					 else(0->pre(Node2_In.Node3_PID_from_Node3))
					)
				);
				
			guarantee "if node 4, Node4_PID_from_Node4 remains pid from beginning step;
			else, forward node4_pid4 previously received from the node 4 with init value 0" :
				Node_Out.Node4_PID_from_Node4 = 
				(if(node_num = 4)
				then(pid)
				else(0->pre(Node3_In.Node4_PID_from_Node4))
				);
				

			-- for each nodei_pidi local variable
			-- If Node_i, take its own pid_i
			-- else, vote on what it got from node_i previously, and what it got from other nodes
			-- (majority vote).
			eq node1_pid1: int = 
				if(node_num = 1) 
				then pid
				else(
			    0 -> Library.majority(Node2_In.Node1_PID_from_Node1, 
				Node3_In.Node1_PID_from_Node1, pre(Node1_In.Node1_PID_from_Node1)
				));
				
			eq node2_pid2: int = 
				if(node_num = 2) 
				then pid
				else(
				     if(node_num = 1) 
				     then(
				     	0 -> Library.majority(Node2_In.Node2_PID_from_Node2, 
				        Node3_In.Node2_PID_from_Node2, pre(Node1_In.Node2_PID_from_Node2)
				        ))
				     else(
				     	0 -> Library.majority(Node1_In.Node2_PID_from_Node2, 
				        Node3_In.Node2_PID_from_Node2, pre(Node2_In.Node2_PID_from_Node2)
				        ))
				       );
				
			eq node3_pid3: int = 
				if(node_num = 3) 
				then pid
				else(
				     if(node_num = 4) 
				     then(
				     	0 -> Library.majority(Node1_In.Node3_PID_from_Node3, 
				        Node2_In.Node3_PID_from_Node3, pre(Node3_In.Node3_PID_from_Node3)
				        ))
				     else(
				     	0 -> Library.majority(Node1_In.Node3_PID_from_Node3, 
				        Node3_In.Node3_PID_from_Node3, pre(Node2_In.Node3_PID_from_Node3)
				        ))
				       );
				       
			eq node4_pid4: int = 
				if(node_num = 4) 
				then pid
				else(
			    0 -> Library.majority(Node1_In.Node4_PID_from_Node4, 
				Node2_In.Node4_PID_from_Node4, pre(Node3_In.Node4_PID_from_Node4)
				));
		**};
		annex safety {**

			fault PID1_Asym_Fail_To_One "Node output is asymmetric": Common_Faults.fail_PID1_to_one {
				inputs: val_in <- Node_Out;     
				outputs: Node_Out <- val_out;    
				duration: permanent;
				propagate_type: asymmetric;
			}
			
			fault PID2_Asym_Fail_To_One "Node output is asymmetric": Common_Faults.fail_PID2_to_one {
				inputs: val_in <- Node_Out;     
				outputs: Node_Out <- val_out;    
				duration: permanent;
				propagate_type: asymmetric;
			}
			
			fault testSymFault "Node output is symmetric": Common_Faults.invert_signal {
				inputs: val_in <- testOutput;     
				outputs: testOutput <- val_out;    
				duration: permanent;
--				propagate_type: asymmetric;
			}
			
		**};
	end Node;
	
end Nodes_v5;