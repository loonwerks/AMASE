package Sender
public
with Base_Types;
	system Sender
		features
			in1 : in data port Base_Types::Float;
			in2 : in data port Base_Types::Float;
			
			sender_out : out data port Base_Types::Float;
		
		annex agree {** 
			
			guarantee "Sender behavior." :
				sender_out = (in1 + in2);
			
		**};
		
		annex safety {**

			fault Sender_Fault1 "Or output is asymmetric, zero": Common_Faults.fail_to_real {
				eq test: real = 0.0;
				inputs: val_in <- sender_out, alt_val <- test;     
				outputs: sender_out <- val_out;    
				duration: permanent;
				propagate_type: asymmetric;
			}	
			
			fault Sender_Fault2 "Or output is symmetric, zero": Common_Faults.fail_to_real {
				inputs: val_in <- sender_out, alt_val <- 0.0;     
				outputs: sender_out <- val_out;    
				duration: permanent;
				propagate_type: asymmetric;
			}
			
			fault Sender_Fault3 "Or output is symmetric, one": Common_Faults.fail_to_real {
				inputs: val_in <- sender_out, alt_val <- 1.0;     
				outputs: sender_out <- val_out;    
				duration: permanent;
				propagate_type: asymmetric;
			}
		**};
		
	end Sender;
end Sender;