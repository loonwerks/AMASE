package Nodes_v2
public
	with Base_Types;
	with Data_Types;
	renames Data_Types::all;
		
	system leader
		features 
			--outputs
			Node_Out: out data port Node_Msg.Impl;
		annex agree {**
				
			eq node1_pid1: int = 10;
			
			guarantee "Node1_PID_from_Node1 remains node1_pid1 from beginning step." :
				((Node_Out.Node1_PID_from_Node1 = node1_pid1) -> (Node_Out.Node1_PID_from_Node1 = pre(Node_Out.Node1_PID_from_Node1)));
			
		**};
		annex safety {**
			
			fault Leader_Node1_PID_Asym_Fail_To_One "Leader node output is asymmetric": Common_Faults.fail_to_one {
				inputs: val_in <- Node_Out.Node1_PID_from_Node1;     
				outputs: Node_Out.Node1_PID_from_Node1 <- val_out;    
				duration: permanent;
				propagate_type: asymmetric;
			}
			
		**};
	end leader;

	system Node
		features
			--inputs
			Leader_In: in data port Node_Msg.Impl;
			Node2_In: in data port Node_Msg.Impl;
			Node3_In: in data port Node_Msg.Impl;
			--outputs
			Node_Out: out data port Node_Msg.Impl;

		annex agree {**
			
			-- Report what was told to this node to the other two nodes.
			guarantee "Send color told to this node to the other two nodes
					   in the second time step." :
				 true -> (pre(Leader_In.Node1_PID_from_Node1) = Node_Out.Node1_PID_from_Node1);
			
			-- Vote on what I have seen and what the others report.
			-- Take number seen the most often (majority vote).
			eq node1_pid1: int = 0 -> Library.majority(Node2_In.Node1_PID_from_Node1, 
				Node3_In.Node1_PID_from_Node1, pre(Leader_In.Node1_PID_from_Node1)
			);

		**};
		annex safety {**

			fault Other_Node_Node1_PID_Asym_Fail_To_One "Node output is asymmetric": Common_Faults.fail_to_one {
				inputs: val_in <- Node_Out.Node1_PID_from_Node1;     
				outputs: Node_Out.Node1_PID_from_Node1 <- val_out;    
				duration: permanent;
				propagate_type: asymmetric;
			}
			
		**};
	end Node;
	
end Nodes_v2;